basic[core/APIException.java]=[
package com.fern.core;

import java.lang.Exception;

public class APIException extends Exception {
}

]


basic[core/BearerAuth.java]=[
package com.fern.core;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Override;
import java.lang.String;

public final class BearerAuth {
  private final String token;

  private BearerAuth(String token) {
    this.token = token;
  }

  @JsonValue
  public String getToken() {
    return token;
  }

  @Override
  public String toString() {
    return "Bearer " + getToken();
  }

  public static BearerAuth of(String token) {
    return new BearerAuth(token.startsWith("Bearer ") ? token.substring(7) : token);
  }
}

]


basic[core/DateTimeDeserializer.java]=[
package com.fern.core;

import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.module.SimpleModule;
import java.io.IOException;
import java.time.Instant;
import java.time.LocalDateTime;
import java.time.OffsetDateTime;
import java.time.ZoneOffset;
import java.time.format.DateTimeFormatter;
import java.time.temporal.TemporalAccessor;
import java.time.temporal.TemporalQueries;

/**
 * Custom deserializer that handles converting ISO8601 dates into {@link OffsetDateTime} objects.
 */
class DateTimeDeserializer extends JsonDeserializer<OffsetDateTime> {
    private static final SimpleModule MODULE;

    static {
        MODULE = new SimpleModule().addDeserializer(OffsetDateTime.class, new DateTimeDeserializer());
    }

    /**
     * Gets a module wrapping this deserializer as an adapter for the Jackson ObjectMapper.
     *
     * @return A {@link SimpleModule} to be plugged onto Jackson ObjectMapper.
     */
    public static SimpleModule getModule() {
        return MODULE;
    }

    @Override
    public OffsetDateTime deserialize(JsonParser parser, DeserializationContext context) throws IOException {
        JsonToken token = parser.currentToken();
        if (token == JsonToken.VALUE_NUMBER_INT) {
            return OffsetDateTime.ofInstant(Instant.ofEpochSecond(parser.getValueAsLong()), ZoneOffset.UTC);
        } else {
            TemporalAccessor temporal = DateTimeFormatter.ISO_DATE_TIME.parseBest(
                    parser.getValueAsString(), OffsetDateTime::from, LocalDateTime::from);

            if (temporal.query(TemporalQueries.offset()) == null) {
                return LocalDateTime.from(temporal).atOffset(ZoneOffset.UTC);
            } else {
                return OffsetDateTime.from(temporal);
            }
        }
    }
}
]


basic[core/ErrorBody.java]=[
package com.fern.core;

import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.String;
import java.util.UUID;

public final class ErrorBody<T> {
  private final String errorName;

  private final T body;

  private final UUID errorInstanceId = UUID.randomUUID();

  public ErrorBody(String errorName) {
    this(errorName, null);
  }

  public ErrorBody(String errorName, T body) {
    this.errorName = errorName;
    this.body = body;
  }

  @JsonProperty("errorName")
  public String getErrorName() {
    return this.errorName;
  }

  @JsonProperty("content")
  public T getContent() {
    return this.body;
  }

  @JsonProperty("errorInstanceId")
  public UUID getErrorInstanceId() {
    return this.errorInstanceId;
  }
}

]


basic[core/ObjectMappers.java]=[
package com.fern.core;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.SerializationFeature;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;
import com.fasterxml.jackson.datatype.jsr310.JavaTimeModule;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.String;

public final class ObjectMappers {
  public static final ObjectMapper JSON_MAPPER = JsonMapper.builder()
    .addModule(new Jdk8Module())
    .addModule(new JavaTimeModule())
    .addModule(DateTimeDeserializer.getModule())
    .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
    .disable(SerializationFeature.WRITE_DATES_AS_TIMESTAMPS)
    .build();

    private ObjectMappers() {
    }

    public static String stringify(Object o) {
      try {
        return JSON_MAPPER.setSerializationInclusion(JsonInclude.Include.ALWAYS)
            .writerWithDefaultPrettyPrinter()
            .writeValueAsString(o);
      }
      catch (IOException e) {
        return o.getClass().getName() + "@" + Integer.toHexString(o.hashCode());
      }
    }
  }

]


basic[resources/auth/AuthService.java]=[
package com.fern.resources.auth;

import com.fern.core.BearerAuth;
import java.security.Principal;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;

@RequestMapping(
    path = "/auth"
)
public interface AuthService {
  @GetMapping("")
  void getAuth(@RequestHeader("Authorization") BearerAuth auth, Principal principal);
}

]


basic[resources/blog/BlogService.java]=[
package com.fern.resources.blog;

import com.fern.resources.blog.exceptions.PostNotFoundError;
import com.fern.resources.blog.requests.CreatePostRequest;
import com.fern.resources.blog.types.BlogPost;
import com.fern.resources.blog.types.PostId;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

@RequestMapping(
    path = "/posts"
)
public interface BlogService {
  @PostMapping(
      value = "/create",
      consumes = "application/json"
  )
  void createPost(@RequestBody CreatePostRequest body);

  @GetMapping(
      value = "/{postId}",
      produces = "application/json"
  )
  BlogPost getPost(@PathVariable("postId") PostId postId) throws PostNotFoundError;
}

]


basic[resources/blog/exceptions/GeneratorsDoNotExistError.java]=[
package com.fern.resources.blog.exceptions;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fern.core.APIException;
import com.fern.resources.blog.types.GeneratorIdAndVersion;
import java.lang.String;
import java.util.List;

public final class GeneratorsDoNotExistError extends APIException {
  public static final int STATUS_CODE = 400;

  public static final String ERROR_NAME = "GeneratorsDoNotExistError";

  private final List<GeneratorIdAndVersion> body;

  public GeneratorsDoNotExistError(List<GeneratorIdAndVersion> body) {
    this.body = body;
  }

  @JsonValue
  public List<GeneratorIdAndVersion> getBody() {
    return this.body;
  }
}

]


basic[resources/blog/exceptions/PostNotFoundError.java]=[
package com.fern.resources.blog.exceptions;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fern.core.APIException;
import com.fern.resources.blog.types.PostNotFoundErrorBody;
import java.lang.String;

public final class PostNotFoundError extends APIException {
  public static final int STATUS_CODE = 400;

  public static final String ERROR_NAME = "PostNotFoundError";

  private final PostNotFoundErrorBody body;

  public PostNotFoundError(PostNotFoundErrorBody body) {
    this.body = body;
  }

  @JsonValue
  public PostNotFoundErrorBody getBody() {
    return this.body;
  }
}

]


basic[resources/blog/exceptions/UnauthorizedError.java]=[
package com.fern.resources.blog.exceptions;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fern.core.APIException;
import com.fern.resources.blog.types.UnauthorizedErrorBody;
import java.lang.String;

public final class UnauthorizedError extends APIException {
  public static final int STATUS_CODE = 403;

  public static final String ERROR_NAME = "UnauthorizedError";

  private final UnauthorizedErrorBody body;

  public UnauthorizedError(UnauthorizedErrorBody body) {
    this.body = body;
  }

  @JsonValue
  public UnauthorizedErrorBody getBody() {
    return this.body;
  }
}

]


basic[resources/blog/handlers/GeneratorsDoNotExistErrorExceptionHandler.java]=[
package com.fern.resources.blog.handlers;

import com.fern.core.ErrorBody;
import com.fern.resources.blog.exceptions.GeneratorsDoNotExistError;
import java.lang.Object;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public final class GeneratorsDoNotExistErrorExceptionHandler {
  @ExceptionHandler(GeneratorsDoNotExistError.class)
  ResponseEntity<Object> handle(GeneratorsDoNotExistError generatorsDoNotExistError) {
    ErrorBody body = new ErrorBody<>(GeneratorsDoNotExistError.ERROR_NAME, generatorsDoNotExistError.getBody());
    return new ResponseEntity<>(body, null, GeneratorsDoNotExistError.STATUS_CODE);
  }
}

]


basic[resources/blog/handlers/PostNotFoundErrorExceptionHandler.java]=[
package com.fern.resources.blog.handlers;

import com.fern.core.ErrorBody;
import com.fern.resources.blog.exceptions.PostNotFoundError;
import java.lang.Object;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public final class PostNotFoundErrorExceptionHandler {
  @ExceptionHandler(PostNotFoundError.class)
  ResponseEntity<Object> handle(PostNotFoundError postNotFoundError) {
    ErrorBody body = new ErrorBody<>(PostNotFoundError.ERROR_NAME, postNotFoundError.getBody());
    return new ResponseEntity<>(body, null, PostNotFoundError.STATUS_CODE);
  }
}

]


basic[resources/blog/handlers/UnauthorizedErrorExceptionHandler.java]=[
package com.fern.resources.blog.handlers;

import com.fern.core.ErrorBody;
import com.fern.resources.blog.exceptions.UnauthorizedError;
import java.lang.Object;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public final class UnauthorizedErrorExceptionHandler {
  @ExceptionHandler(UnauthorizedError.class)
  ResponseEntity<Object> handle(UnauthorizedError unauthorizedError) {
    ErrorBody body = new ErrorBody<>(UnauthorizedError.ERROR_NAME, unauthorizedError.getBody());
    return new ResponseEntity<>(body, null, UnauthorizedError.STATUS_CODE);
  }
}

]


basic[resources/blog/requests/CreatePostRequest.java]=[
package com.fern.resources.blog.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.core.ObjectMappers;
import com.fern.resources.blog.types.Author;
import com.fern.resources.blog.types.PostType;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = CreatePostRequest.Builder.class
)
public final class CreatePostRequest {
  private final String title;

  private final Author author;

  private final String content;

  private final PostType postType;

  private final int switch_;

  private CreatePostRequest(String title, Author author, String content, PostType postType,
      int switch_) {
    this.title = title;
    this.author = author;
    this.content = content;
    this.postType = postType;
    this.switch_ = switch_;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @JsonProperty("postType")
  public PostType getPostType() {
    return postType;
  }

  @JsonProperty("switch")
  public int getSwitch() {
    return switch_;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreatePostRequest && equalTo((CreatePostRequest) other);
  }

  private boolean equalTo(CreatePostRequest other) {
    return title.equals(other.title) && author.equals(other.author) && content.equals(other.content) && postType.equals(other.postType) && switch_ == other.switch_;
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.title, this.author, this.content, this.postType, this.switch_);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static TitleStage builder() {
    return new Builder();
  }

  public interface TitleStage {
    AuthorStage title(String title);

    Builder from(CreatePostRequest other);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    PostTypeStage content(String content);
  }

  public interface PostTypeStage {
    SwitchStage postType(PostType postType);
  }

  public interface SwitchStage {
    _FinalStage switch_(int switch_);
  }

  public interface _FinalStage {
    CreatePostRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TitleStage, AuthorStage, ContentStage, PostTypeStage, SwitchStage, _FinalStage {
    private String title;

    private Author author;

    private String content;

    private PostType postType;

    private int switch_;

    private Builder() {
    }

    @Override
    public Builder from(CreatePostRequest other) {
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      postType(other.getPostType());
      switch_(other.getSwitch());
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public PostTypeStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    @JsonSetter("postType")
    public SwitchStage postType(PostType postType) {
      this.postType = postType;
      return this;
    }

    @Override
    @JsonSetter("switch")
    public _FinalStage switch_(int switch_) {
      this.switch_ = switch_;
      return this;
    }

    @Override
    public CreatePostRequest build() {
      return new CreatePostRequest(title, author, content, postType, switch_);
    }
  }
}

]


basic[resources/blog/types/Age.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class Age {
  private final int value;

  private Age(int value) {
    this.value = value;
  }

  @JsonValue
  public int get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof Age && this.value == ((Age) other).value);
  }

  @Override
  public int hashCode() {
    return Integer.hashCode(value);
  }

  @Override
  public String toString() {
    return Integer.toString(value);
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static Age of(int value) {
    return new Age(value);
  }

  public static Age valueOf(String value) {
    return of(Integer.parseInt(value));
  }
}

]


basic[resources/blog/types/Author.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class Author {
  private final Value value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private Author(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static Author anonymous() {
    return new Author(new AnonymousValue());
  }

  public static Author name(String value) {
    return new Author(new NameValue(value));
  }

  public boolean isAnonymous() {
    return value instanceof AnonymousValue;
  }

  public boolean isName() {
    return value instanceof NameValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<String> getName() {
    if (isName()) {
      return Optional.of(((NameValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitAnonymous();

    T visitName(String name);

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "type",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(AnonymousValue.class),
      @JsonSubTypes.Type(NameValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("anonymous")
  private static final class AnonymousValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private AnonymousValue() {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitAnonymous();
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof AnonymousValue;
    }

    @Override
    public String toString() {
      return "Author{" + "}";
    }
  }

  @JsonTypeName("name")
  private static final class NameValue implements Value {
    @JsonProperty("value")
    private String value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private NameValue(@JsonProperty("value") String value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitName(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof NameValue && equalTo((NameValue) other);
    }

    private boolean equalTo(NameValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "type: " + type + ", value: " + value + "}";
    }
  }
}

]


basic[resources/blog/types/BlogPost.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = BlogPost.Builder.class
)
public final class BlogPost {
  private final PostId id;

  private final PostType type;

  private final String title;

  private final Author author;

  private final String content;

  private BlogPost(PostId id, PostType type, String title, Author author, String content) {
    this.id = id;
    this.type = type;
    this.title = title;
    this.author = author;
    this.content = content;
  }

  @JsonProperty("id")
  public PostId getId() {
    return id;
  }

  @JsonProperty("type")
  public PostType getType() {
    return type;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BlogPost && equalTo((BlogPost) other);
  }

  private boolean equalTo(BlogPost other) {
    return id.equals(other.id) && type.equals(other.type) && title.equals(other.title) && author.equals(other.author) && content.equals(other.content);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.type, this.title, this.author, this.content);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    TypeStage id(PostId id);

    Builder from(BlogPost other);
  }

  public interface TypeStage {
    TitleStage type(PostType type);
  }

  public interface TitleStage {
    AuthorStage title(String title);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    _FinalStage content(String content);
  }

  public interface _FinalStage {
    BlogPost build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, TypeStage, TitleStage, AuthorStage, ContentStage, _FinalStage {
    private PostId id;

    private PostType type;

    private String title;

    private Author author;

    private String content;

    private Builder() {
    }

    @Override
    public Builder from(BlogPost other) {
      id(other.getId());
      type(other.getType());
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      return this;
    }

    @Override
    @JsonSetter("id")
    public TypeStage id(PostId id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("type")
    public TitleStage type(PostType type) {
      this.type = type;
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public _FinalStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    public BlogPost build() {
      return new BlogPost(id, type, title, author, content);
    }
  }
}

]


basic[resources/blog/types/GeneratorIdAndVersion.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = GeneratorIdAndVersion.Builder.class
)
public final class GeneratorIdAndVersion {
  private final String id;

  private final String version;

  private GeneratorIdAndVersion(String id, String version) {
    this.id = id;
    this.version = version;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("version")
  public String getVersion() {
    return version;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GeneratorIdAndVersion && equalTo((GeneratorIdAndVersion) other);
  }

  private boolean equalTo(GeneratorIdAndVersion other) {
    return id.equals(other.id) && version.equals(other.version);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id, this.version);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    VersionStage id(String id);

    Builder from(GeneratorIdAndVersion other);
  }

  public interface VersionStage {
    _FinalStage version(String version);
  }

  public interface _FinalStage {
    GeneratorIdAndVersion build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, VersionStage, _FinalStage {
    private String id;

    private String version;

    private Builder() {
    }

    @Override
    public Builder from(GeneratorIdAndVersion other) {
      id(other.getId());
      version(other.getVersion());
      return this;
    }

    @Override
    @JsonSetter("id")
    public VersionStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("version")
    public _FinalStage version(String version) {
      this.version = version;
      return this;
    }

    @Override
    public GeneratorIdAndVersion build() {
      return new GeneratorIdAndVersion(id, version);
    }
  }
}

]


basic[resources/blog/types/PostId.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class PostId {
  private final String value;

  private PostId(String value) {
    this.value = value;
  }

  @JsonValue
  public String get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof PostId && this.value.equals(((PostId) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value;
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostId of(String value) {
    return new PostId(value);
  }

  public static PostId valueOf(String value) {
    return of(value);
  }
}

]


basic[resources/blog/types/PostNotFoundErrorBody.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = PostNotFoundErrorBody.Builder.class
)
public final class PostNotFoundErrorBody {
  private final PostId id;

  private PostNotFoundErrorBody(PostId id) {
    this.id = id;
  }

  @JsonProperty("id")
  public PostId getId() {
    return id;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PostNotFoundErrorBody && equalTo((PostNotFoundErrorBody) other);
  }

  private boolean equalTo(PostNotFoundErrorBody other) {
    return id.equals(other.id);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.id);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    _FinalStage id(PostId id);

    Builder from(PostNotFoundErrorBody other);
  }

  public interface _FinalStage {
    PostNotFoundErrorBody build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, _FinalStage {
    private PostId id;

    private Builder() {
    }

    @Override
    public Builder from(PostNotFoundErrorBody other) {
      id(other.getId());
      return this;
    }

    @Override
    @JsonSetter("id")
    public _FinalStage id(PostId id) {
      this.id = id;
      return this;
    }

    @Override
    public PostNotFoundErrorBody build() {
      return new PostNotFoundErrorBody(id);
    }
  }
}

]


basic[resources/blog/types/PostType.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Override;
import java.lang.String;

public enum PostType {
  LONG("LONG"),

  SHORT("SHORT"),

  MEDIUM("med.med");

  private final String value;

  PostType(String value) {
    this.value = value;
  }

  @JsonValue
  @Override
  public String toString() {
    return this.value;
  }
}

]


basic[resources/blog/types/UnauthorizedErrorBody.java]=[
package com.fern.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.core.ObjectMappers;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonInclude(JsonInclude.Include.NON_EMPTY)
@JsonDeserialize(
    builder = UnauthorizedErrorBody.Builder.class
)
public final class UnauthorizedErrorBody {
  private final String reason;

  private UnauthorizedErrorBody(String reason) {
    this.reason = reason;
  }

  @JsonProperty("reason")
  public String getReason() {
    return reason;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UnauthorizedErrorBody && equalTo((UnauthorizedErrorBody) other);
  }

  private boolean equalTo(UnauthorizedErrorBody other) {
    return reason.equals(other.reason);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.reason);
  }

  @Override
  public String toString() {
    return ObjectMappers.stringify(this);
  }

  public static ReasonStage builder() {
    return new Builder();
  }

  public interface ReasonStage {
    _FinalStage reason(String reason);

    Builder from(UnauthorizedErrorBody other);
  }

  public interface _FinalStage {
    UnauthorizedErrorBody build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ReasonStage, _FinalStage {
    private String reason;

    private Builder() {
    }

    @Override
    public Builder from(UnauthorizedErrorBody other) {
      reason(other.getReason());
      return this;
    }

    @Override
    @JsonSetter("reason")
    public _FinalStage reason(String reason) {
      this.reason = reason;
      return this;
    }

    @Override
    public UnauthorizedErrorBody build() {
      return new UnauthorizedErrorBody(reason);
    }
  }
}

]


basic[resources/dummyservice/DummyServiceService.java]=[
package com.fern.resources.dummyservice;

import com.fern.resources.dummyservice.types.DummyId;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;

@RequestMapping(
    path = "/dummy"
)
public interface DummyServiceService {
  @PostMapping(
      value = "",
      consumes = "application/json"
  )
  void getDummy(@RequestBody DummyId body);

  @GetMapping("/health")
  void health();
}

]


basic[resources/dummyservice/exceptions/NotFoundError.java]=[
package com.fern.resources.dummyservice.exceptions;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fern.core.APIException;
import java.lang.String;

public final class NotFoundError extends APIException {
  public static final int STATUS_CODE = 404;

  public static final String ERROR_NAME = "NotFoundError";

  private final String body;

  public NotFoundError(String body) {
    this.body = body;
  }

  @JsonValue
  public String getBody() {
    return this.body;
  }
}

]


basic[resources/dummyservice/handlers/NotFoundErrorExceptionHandler.java]=[
package com.fern.resources.dummyservice.handlers;

import com.fern.core.ErrorBody;
import com.fern.resources.dummyservice.exceptions.NotFoundError;
import java.lang.Object;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.bind.annotation.RestControllerAdvice;

@RestControllerAdvice
public final class NotFoundErrorExceptionHandler {
  @ExceptionHandler(NotFoundError.class)
  ResponseEntity<Object> handle(NotFoundError notFoundError) {
    ErrorBody body = new ErrorBody<>(NotFoundError.ERROR_NAME, notFoundError.getBody());
    return new ResponseEntity<>(body, null, NotFoundError.STATUS_CODE);
  }
}

]


basic[resources/dummyservice/types/DummyId.java]=[
package com.fern.resources.dummyservice.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class DummyId {
  private final String value;

  private DummyId(String value) {
    this.value = value;
  }

  @JsonValue
  public String get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof DummyId && this.value.equals(((DummyId) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value;
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static DummyId of(String value) {
    return new DummyId(value);
  }

  public static DummyId valueOf(String value) {
    return of(value);
  }
}

]