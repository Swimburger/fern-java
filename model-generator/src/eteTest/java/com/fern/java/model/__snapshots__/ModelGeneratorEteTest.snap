basic[basic/generated-java/.git/COMMIT_EDITMSG]=[
generate

]


basic[basic/generated-java/.git/HEAD]=[
ref: refs/heads/main

]


basic[basic/generated-java/.git/config]=[
[core]
	repositoryformatversion = 0
	filemode = true
	bare = false
	logallrefupdates = true
	ignorecase = true
	precomposeunicode = true

]


basic[basic/generated-java/.git/description]=[
Unnamed repository; edit this file 'description' to name the repository.

]


basic[basic/generated-java/.git/hooks/applypatch-msg.sample]=[
#!/bin/sh
#
# An example hook script to check the commit log message taken by
# applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.  The hook is
# allowed to edit the commit message file.
#
# To enable this hook, rename this file to "applypatch-msg".

. git-sh-setup
commitmsg="$(git rev-parse --git-path hooks/commit-msg)"
test -x "$commitmsg" && exec "$commitmsg" ${1+"$@"}
:

]


basic[basic/generated-java/.git/hooks/commit-msg.sample]=[
#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

test "" = "$(grep '^Signed-off-by: ' "$1" |
	 sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	echo >&2 Duplicate Signed-off-by lines.
	exit 1
}

]


basic[basic/generated-java/.git/hooks/fsmonitor-watchman.sample]=[
#!/usr/bin/perl

use strict;
use warnings;
use IPC::Open2;

# An example hook script to integrate Watchman
# (https://facebook.github.io/watchman/) with git to speed up detecting
# new and modified files.
#
# The hook is passed a version (currently 2) and last update token
# formatted as a string and outputs to stdout a new update token and
# all files that have been modified since the update token. Paths must
# be relative to the root of the working tree and separated by a single NUL.
#
# To enable this hook, rename this file to "query-watchman" and set
# 'git config core.fsmonitor .git/hooks/query-watchman'
#
my ($version, $last_update_token) = @ARGV;

# Uncomment for debugging
# print STDERR "$0 $version $last_update_token\n";

# Check the hook interface version
if ($version ne 2) {
	die "Unsupported query-fsmonitor hook version '$version'.\n" .
	    "Falling back to scanning...\n";
}

my $git_work_tree = get_working_dir();

my $retry = 1;

my $json_pkg;
eval {
	require JSON::XS;
	$json_pkg = "JSON::XS";
	1;
} or do {
	require JSON::PP;
	$json_pkg = "JSON::PP";
};

launch_watchman();

sub launch_watchman {
	my $o = watchman_query();
	if (is_work_tree_watched($o)) {
		output_result($o->{clock}, @{$o->{files}});
	}
}

sub output_result {
	my ($clockid, @files) = @_;

	# Uncomment for debugging watchman output
	# open (my $fh, ">", ".git/watchman-output.out");
	# binmode $fh, ":utf8";
	# print $fh "$clockid\n@files\n";
	# close $fh;

	binmode STDOUT, ":utf8";
	print $clockid;
	print "\0";
	local $, = "\0";
	print @files;
}

sub watchman_clock {
	my $response = qx/watchman clock "$git_work_tree"/;
	die "Failed to get clock id on '$git_work_tree'.\n" .
		"Falling back to scanning...\n" if $? != 0;

	return $json_pkg->new->utf8->decode($response);
}

sub watchman_query {
	my $pid = open2(\*CHLD_OUT, \*CHLD_IN, 'watchman -j --no-pretty')
	or die "open2() failed: $!\n" .
	"Falling back to scanning...\n";

	# In the query expression below we're asking for names of files that
	# changed since $last_update_token but not from the .git folder.
	#
	# To accomplish this, we're using the "since" generator to use the
	# recency index to select candidate nodes and "fields" to limit the
	# output to file names only. Then we're using the "expression" term to
	# further constrain the results.
	my $last_update_line = "";
	if (substr($last_update_token, 0, 1) eq "c") {
		$last_update_token = "\"$last_update_token\"";
		$last_update_line = qq[\n"since": $last_update_token,];
	}
	my $query = <<"	END";
		["query", "$git_work_tree", {$last_update_line
			"fields": ["name"],
			"expression": ["not", ["dirname", ".git"]]
		}]
	END

	# Uncomment for debugging the watchman query
	# open (my $fh, ">", ".git/watchman-query.json");
	# print $fh $query;
	# close $fh;

	print CHLD_IN $query;
	close CHLD_IN;
	my $response = do {local $/; <CHLD_OUT>};

	# Uncomment for debugging the watch response
	# open ($fh, ">", ".git/watchman-response.json");
	# print $fh $response;
	# close $fh;

	die "Watchman: command returned no output.\n" .
	"Falling back to scanning...\n" if $response eq "";
	die "Watchman: command returned invalid output: $response\n" .
	"Falling back to scanning...\n" unless $response =~ /^\{/;

	return $json_pkg->new->utf8->decode($response);
}

sub is_work_tree_watched {
	my ($output) = @_;
	my $error = $output->{error};
	if ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {
		$retry--;
		my $response = qx/watchman watch "$git_work_tree"/;
		die "Failed to make watchman watch '$git_work_tree'.\n" .
		    "Falling back to scanning...\n" if $? != 0;
		$output = $json_pkg->new->utf8->decode($response);
		$error = $output->{error};
		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		# Uncomment for debugging watchman output
		# open (my $fh, ">", ".git/watchman-output.out");
		# close $fh;

		# Watchman will always return all files on the first query so
		# return the fast "everything is dirty" flag to git and do the
		# Watchman query just to get it over with now so we won't pay
		# the cost in git to look up each individual file.
		my $o = watchman_clock();
		$error = $output->{error};

		die "Watchman: $error.\n" .
		"Falling back to scanning...\n" if $error;

		output_result($o->{clock}, ("/"));
		$last_update_token = $o->{clock};

		eval { launch_watchman() };
		return 0;
	}

	die "Watchman: $error.\n" .
	"Falling back to scanning...\n" if $error;

	return 1;
}

sub get_working_dir {
	my $working_dir;
	if ($^O =~ 'msys' || $^O =~ 'cygwin') {
		$working_dir = Win32::GetCwd();
		$working_dir =~ tr/\\/\//;
	} else {
		require Cwd;
		$working_dir = Cwd::cwd();
	}

	return $working_dir;
}

]


basic[basic/generated-java/.git/hooks/post-update.sample]=[
#!/bin/sh
#
# An example hook script to prepare a packed repository for use over
# dumb transports.
#
# To enable this hook, rename this file to "post-update".

exec git update-server-info

]


basic[basic/generated-java/.git/hooks/pre-applypatch.sample]=[
#!/bin/sh
#
# An example hook script to verify what is about to be committed
# by applypatch from an e-mail message.
#
# The hook should exit with non-zero status after issuing an
# appropriate message if it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-applypatch".

. git-sh-setup
precommit="$(git rev-parse --git-path hooks/pre-commit)"
test -x "$precommit" && exec "$precommit" ${1+"$@"}
:

]


basic[basic/generated-java/.git/hooks/pre-commit.sample]=[
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

if git rev-parse --verify HEAD >/dev/null 2>&1
then
	against=HEAD
else
	# Initial commit: diff against an empty tree object
	against=$(git hash-object -t tree /dev/null)
fi

# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --type=bool hooks.allownonascii)

# Redirect output to stderr.
exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
	# Note that the use of brackets around a tr range is ok here, (it's
	# even required, for portability to Solaris 10's /usr/bin/tr), since
	# the square bracket bytes happen to fall in the designated range.
	test $(git diff --cached --name-only --diff-filter=A -z $against |
	  LC_ALL=C tr -d '[ -~]\0' | wc -c) != 0
then
	cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
	exit 1
fi

# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --

]


basic[basic/generated-java/.git/hooks/pre-merge-commit.sample]=[
#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git merge" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message to
# stderr if it wants to stop the merge commit.
#
# To enable this hook, rename this file to "pre-merge-commit".

. git-sh-setup
test -x "$GIT_DIR/hooks/pre-commit" &&
        exec "$GIT_DIR/hooks/pre-commit"
:

]


basic[basic/generated-java/.git/hooks/pre-push.sample]=[
#!/bin/sh

# An example hook script to verify what is about to be pushed.  Called by "git
# push" after it has checked the remote status, but before anything has been
# pushed.  If this script exits with a non-zero status nothing will be pushed.
#
# This hook is called with the following parameters:
#
# $1 -- Name of the remote to which the push is being done
# $2 -- URL to which the push is being done
#
# If pushing without using a named remote those arguments will be equal.
#
# Information about the commits which are being pushed is supplied as lines to
# the standard input in the form:
#
#   <local ref> <local oid> <remote ref> <remote oid>
#
# This sample shows how to prevent push of commits where the log message starts
# with "WIP" (work in progress).

remote="$1"
url="$2"

zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')

while read local_ref local_oid remote_ref remote_oid
do
	if test "$local_oid" = "$zero"
	then
		# Handle delete
		:
	else
		if test "$remote_oid" = "$zero"
		then
			# New branch, examine all commits
			range="$local_oid"
		else
			# Update to existing branch, examine new commits
			range="$remote_oid..$local_oid"
		fi

		# Check for WIP commit
		commit=$(git rev-list -n 1 --grep '^WIP' "$range")
		if test -n "$commit"
		then
			echo >&2 "Found WIP commit in $local_ref, not pushing"
			exit 1
		fi
	fi
done

exit 0

]


basic[basic/generated-java/.git/hooks/pre-rebase.sample]=[
#!/bin/sh
#
# Copyright (c) 2006, 2008 Junio C Hamano
#
# The "pre-rebase" hook is run just before "git rebase" starts doing
# its job, and can prevent the command from running by exiting with
# non-zero status.
#
# The hook is called with the following parameters:
#
# $1 -- the upstream the series was forked from.
# $2 -- the branch being rebased (or empty when rebasing the current branch).
#
# This sample shows how to prevent topic branches that are already
# merged to 'next' branch from getting rebased, because allowing it
# would result in rebasing already published history.

publish=next
basebranch="$1"
if test "$#" = 2
then
	topic="refs/heads/$2"
else
	topic=`git symbolic-ref HEAD` ||
	exit 0 ;# we do not interrupt rebasing detached HEAD
fi

case "$topic" in
refs/heads/??/*)
	;;
*)
	exit 0 ;# we do not interrupt others.
	;;
esac

# Now we are dealing with a topic branch being rebased
# on top of master.  Is it OK to rebase it?

# Does the topic really exist?
git show-ref -q "$topic" || {
	echo >&2 "No such branch $topic"
	exit 1
}

# Is topic fully merged to master?
not_in_master=`git rev-list --pretty=oneline ^master "$topic"`
if test -z "$not_in_master"
then
	echo >&2 "$topic is fully merged to master; better remove it."
	exit 1 ;# we could allow it, but there is no point.
fi

# Is topic ever merged to next?  If so you should not be rebasing it.
only_next_1=`git rev-list ^master "^$topic" ${publish} | sort`
only_next_2=`git rev-list ^master           ${publish} | sort`
if test "$only_next_1" = "$only_next_2"
then
	not_in_topic=`git rev-list "^$topic" master`
	if test -z "$not_in_topic"
	then
		echo >&2 "$topic is already up to date with master"
		exit 1 ;# we could allow it, but there is no point.
	else
		exit 0
	fi
else
	not_in_next=`git rev-list --pretty=oneline ^${publish} "$topic"`
	/usr/bin/perl -e '
		my $topic = $ARGV[0];
		my $msg = "* $topic has commits already merged to public branch:\n";
		my (%not_in_next) = map {
			/^([0-9a-f]+) /;
			($1 => 1);
		} split(/\n/, $ARGV[1]);
		for my $elem (map {
				/^([0-9a-f]+) (.*)$/;
				[$1 => $2];
			} split(/\n/, $ARGV[2])) {
			if (!exists $not_in_next{$elem->[0]}) {
				if ($msg) {
					print STDERR $msg;
					undef $msg;
				}
				print STDERR " $elem->[1]\n";
			}
		}
	' "$topic" "$not_in_next" "$not_in_master"
	exit 1
fi

<<\DOC_END

This sample hook safeguards topic branches that have been
published from being rewound.

The workflow assumed here is:

 * Once a topic branch forks from "master", "master" is never
   merged into it again (either directly or indirectly).

 * Once a topic branch is fully cooked and merged into "master",
   it is deleted.  If you need to build on top of it to correct
   earlier mistakes, a new topic branch is created by forking at
   the tip of the "master".  This is not strictly necessary, but
   it makes it easier to keep your history simple.

 * Whenever you need to test or publish your changes to topic
   branches, merge them into "next" branch.

The script, being an example, hardcodes the publish branch name
to be "next", but it is trivial to make it configurable via
$GIT_DIR/config mechanism.

With this workflow, you would want to know:

(1) ... if a topic branch has ever been merged to "next".  Young
    topic branches can have stupid mistakes you would rather
    clean up before publishing, and things that have not been
    merged into other branches can be easily rebased without
    affecting other people.  But once it is published, you would
    not want to rewind it.

(2) ... if a topic branch has been fully merged to "master".
    Then you can delete it.  More importantly, you should not
    build on top of it -- other people may already want to
    change things related to the topic as patches against your
    "master", so if you need further changes, it is better to
    fork the topic (perhaps with the same name) afresh from the
    tip of "master".

Let's look at this example:

		   o---o---o---o---o---o---o---o---o---o "next"
		  /       /           /           /
		 /   a---a---b A     /           /
		/   /               /           /
	       /   /   c---c---c---c B         /
	      /   /   /             \         /
	     /   /   /   b---b C     \       /
	    /   /   /   /             \     /
    ---o---o---o---o---o---o---o---o---o---o---o "master"
.
.
A, B and C are topic branches.

 * A has one fix since it was merged up to "next".

 * B has finished.  It has been fully merged up to "master" and "next",
   and is ready to be deleted.

 * C has not merged to "next" at all.

We would want to allow C to be rebased, refuse A, and encourage
B to be deleted.

To compute (1):

	git rev-list ^master ^topic next
	git rev-list ^master        next

	if these match, topic has not merged in next at all.

To compute (2):

	git rev-list master..topic

	if this is empty, it is fully merged to "master".

DOC_END

]


basic[basic/generated-java/.git/hooks/pre-receive.sample]=[
#!/bin/sh
#
# An example hook script to make use of push options.
# The example simply echoes all push options that start with 'echoback='
# and rejects all pushes when the "reject" push option is used.
#
# To enable this hook, rename this file to "pre-receive".

if test -n "$GIT_PUSH_OPTION_COUNT"
then
	i=0
	while test "$i" -lt "$GIT_PUSH_OPTION_COUNT"
	do
		eval "value=\$GIT_PUSH_OPTION_$i"
		case "$value" in
		echoback=*)
			echo "echo from the pre-receive-hook: ${value#*=}" >&2
			;;
		reject)
			exit 1
		esac
		i=$((i + 1))
	done
fi

]


basic[basic/generated-java/.git/hooks/prepare-commit-msg.sample]=[
#!/bin/sh
#
# An example hook script to prepare the commit log message.
# Called by "git commit" with the name of the file that has the
# commit message, followed by the description of the commit
# message's source.  The hook's purpose is to edit the commit
# message file.  If the hook fails with a non-zero status,
# the commit is aborted.
#
# To enable this hook, rename this file to "prepare-commit-msg".

# This hook includes three examples. The first one removes the
# "# Please enter the commit message..." help message.
#
# The second includes the output of "git diff --name-status -r"
# into the message, just before the "git status" output.  It is
# commented because it doesn't cope with --amend or with squashed
# commits.
#
# The third example adds a Signed-off-by line to the message, that can
# still be edited.  This is rarely a good idea.

COMMIT_MSG_FILE=$1
COMMIT_SOURCE=$2
SHA1=$3

/usr/bin/perl -i.bak -ne 'print unless(m/^. Please enter the commit message/..m/^#$/)' "$COMMIT_MSG_FILE"

# case "$COMMIT_SOURCE,$SHA1" in
#  ,|template,)
#    /usr/bin/perl -i.bak -pe '
#       print "\n" . `git diff --cached --name-status -r`
# 	 if /^#/ && $first++ == 0' "$COMMIT_MSG_FILE" ;;
#  *) ;;
# esac

# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# git interpret-trailers --in-place --trailer "$SOB" "$COMMIT_MSG_FILE"
# if test -z "$COMMIT_SOURCE"
# then
#   /usr/bin/perl -i.bak -pe 'print "\n" if !$first_line++' "$COMMIT_MSG_FILE"
# fi

]


basic[basic/generated-java/.git/hooks/push-to-checkout.sample]=[
#!/bin/sh

# An example hook script to update a checked-out tree on a git push.
#
# This hook is invoked by git-receive-pack(1) when it reacts to git
# push and updates reference(s) in its repository, and when the push
# tries to update the branch that is currently checked out and the
# receive.denyCurrentBranch configuration variable is set to
# updateInstead.
#
# By default, such a push is refused if the working tree and the index
# of the remote repository has any difference from the currently
# checked out commit; when both the working tree and the index match
# the current commit, they are updated to match the newly pushed tip
# of the branch. This hook is to be used to override the default
# behaviour; however the code below reimplements the default behaviour
# as a starting point for convenient modification.
#
# The hook receives the commit with which the tip of the current
# branch is going to be updated:
commit=$1

# It can exit with a non-zero status to refuse the push (when it does
# so, it must not modify the index or the working tree).
die () {
	echo >&2 "$*"
	exit 1
}

# Or it can make any necessary changes to the working tree and to the
# index to bring them to the desired state when the tip of the current
# branch is updated to the new commit, and exit with a zero status.
#
# For example, the hook can simply run git read-tree -u -m HEAD "$1"
# in order to emulate git fetch that is run in the reverse direction
# with git push, as the two-tree form of git read-tree -u -m is
# essentially the same as git switch or git checkout that switches
# branches while keeping the local changes in the working tree that do
# not interfere with the difference between the branches.

# The below is a more-or-less exact translation to shell of the C code
# for the default behaviour for git's push-to-checkout hook defined in
# the push_to_deploy() function in builtin/receive-pack.c.
#
# Note that the hook will be executed from the repository directory,
# not from the working tree, so if you want to perform operations on
# the working tree, you will have to adapt your code accordingly, e.g.
# by adding "cd .." or using relative paths.

if ! git update-index -q --ignore-submodules --refresh
then
	die "Up-to-date check failed"
fi

if ! git diff-files --quiet --ignore-submodules --
then
	die "Working directory has unstaged changes"
fi

# This is a rough translation of:
#
#   head_has_history() ? "HEAD" : EMPTY_TREE_SHA1_HEX
if git cat-file -e HEAD 2>/dev/null
then
	head=HEAD
else
	head=$(git hash-object -t tree --stdin </dev/null)
fi

if ! git diff-index --quiet --cached --ignore-submodules $head --
then
	die "Working directory has staged changes"
fi

if ! git read-tree -u -m "$commit"
then
	die "Could not update working tree to new HEAD"
fi

]


basic[basic/generated-java/.git/hooks/update.sample]=[
#!/bin/sh
#
# An example hook script to block unannotated tags from entering.
# Called by "git receive-pack" with arguments: refname sha1-old sha1-new
#
# To enable this hook, rename this file to "update".
#
# Config
# ------
# hooks.allowunannotated
#   This boolean sets whether unannotated tags will be allowed into the
#   repository.  By default they won't be.
# hooks.allowdeletetag
#   This boolean sets whether deleting tags will be allowed in the
#   repository.  By default they won't be.
# hooks.allowmodifytag
#   This boolean sets whether a tag may be modified after creation. By default
#   it won't be.
# hooks.allowdeletebranch
#   This boolean sets whether deleting branches will be allowed in the
#   repository.  By default they won't be.
# hooks.denycreatebranch
#   This boolean sets whether remotely creating branches will be denied
#   in the repository.  By default this is allowed.
#

# --- Command line
refname="$1"
oldrev="$2"
newrev="$3"

# --- Safety check
if [ -z "$GIT_DIR" ]; then
	echo "Don't run this script from the command line." >&2
	echo " (if you want, you could supply GIT_DIR then run" >&2
	echo "  $0 <ref> <oldrev> <newrev>)" >&2
	exit 1
fi

if [ -z "$refname" -o -z "$oldrev" -o -z "$newrev" ]; then
	echo "usage: $0 <ref> <oldrev> <newrev>" >&2
	exit 1
fi

# --- Config
allowunannotated=$(git config --type=bool hooks.allowunannotated)
allowdeletebranch=$(git config --type=bool hooks.allowdeletebranch)
denycreatebranch=$(git config --type=bool hooks.denycreatebranch)
allowdeletetag=$(git config --type=bool hooks.allowdeletetag)
allowmodifytag=$(git config --type=bool hooks.allowmodifytag)

# check for no description
projectdesc=$(sed -e '1q' "$GIT_DIR/description")
case "$projectdesc" in
"Unnamed repository"* | "")
	echo "*** Project description file hasn't been set" >&2
	exit 1
	;;
esac

# --- Check types
# if $newrev is 0000...0000, it's a commit to delete a ref.
zero=$(git hash-object --stdin </dev/null | tr '[0-9a-f]' '0')
if [ "$newrev" = "$zero" ]; then
	newrev_type=delete
else
	newrev_type=$(git cat-file -t $newrev)
fi

case "$refname","$newrev_type" in
	refs/tags/*,commit)
		# un-annotated tag
		short_refname=${refname##refs/tags/}
		if [ "$allowunannotated" != "true" ]; then
			echo "*** The un-annotated tag, $short_refname, is not allowed in this repository" >&2
			echo "*** Use 'git tag [ -a | -s ]' for tags you want to propagate." >&2
			exit 1
		fi
		;;
	refs/tags/*,delete)
		# delete tag
		if [ "$allowdeletetag" != "true" ]; then
			echo "*** Deleting a tag is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/tags/*,tag)
		# annotated tag
		if [ "$allowmodifytag" != "true" ] && git rev-parse $refname > /dev/null 2>&1
		then
			echo "*** Tag '$refname' already exists." >&2
			echo "*** Modifying a tag is not allowed in this repository." >&2
			exit 1
		fi
		;;
	refs/heads/*,commit)
		# branch
		if [ "$oldrev" = "$zero" -a "$denycreatebranch" = "true" ]; then
			echo "*** Creating a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/heads/*,delete)
		# delete branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	refs/remotes/*,commit)
		# tracking branch
		;;
	refs/remotes/*,delete)
		# delete tracking branch
		if [ "$allowdeletebranch" != "true" ]; then
			echo "*** Deleting a tracking branch is not allowed in this repository" >&2
			exit 1
		fi
		;;
	*)
		# Anything else (is there anything else?)
		echo "*** Update hook: unknown type of update to ref $refname of type $newrev_type" >&2
		exit 1
		;;
esac

# --- Finished
exit 0

]


basic[basic/generated-java/.git/index]=[
basic/generated-java/.git/index
]


basic[basic/generated-java/.git/info/exclude]=[
# git ls-files --others --exclude-from=.git/info/exclude
# Lines that start with '#' are comments.
# For a project mostly in C, the following would be a good set of
# exclude patterns (uncomment them if you want to use them):
# *.[oa]
# *~

]


basic[basic/generated-java/.git/logs/HEAD]=[
0000000000000000000000000000000000000000 0efd519138414bccb1d57cc8917ef63a72683924 dsinghvi <deep@usebirch.com> 1666133247 -0700	commit (initial): generate

]


basic[basic/generated-java/.git/logs/refs/heads/main]=[
0000000000000000000000000000000000000000 0efd519138414bccb1d57cc8917ef63a72683924 dsinghvi <deep@usebirch.com> 1666133247 -0700	commit (initial): generate

]


basic[basic/generated-java/.git/objects/03/479717227ba09f82ca1559d0912016e4648b27]=[
basic/generated-java/.git/objects/03/479717227ba09f82ca1559d0912016e4648b27
]


basic[basic/generated-java/.git/objects/0e/fd519138414bccb1d57cc8917ef63a72683924]=[
basic/generated-java/.git/objects/0e/fd519138414bccb1d57cc8917ef63a72683924
]


basic[basic/generated-java/.git/objects/0f/71d715b35eb0a2713991ce1773746485943a19]=[
basic/generated-java/.git/objects/0f/71d715b35eb0a2713991ce1773746485943a19
]


basic[basic/generated-java/.git/objects/12/459ffe095cf58844e03089d909eb8d19ea2f65]=[
basic/generated-java/.git/objects/12/459ffe095cf58844e03089d909eb8d19ea2f65
]


basic[basic/generated-java/.git/objects/12/509576435dc6a8c6a76f541b15cd1a5a9bc6ae]=[
basic/generated-java/.git/objects/12/509576435dc6a8c6a76f541b15cd1a5a9bc6ae
]


basic[basic/generated-java/.git/objects/15/0c983b229bd5f071af93c659db4dbb7dd08b97]=[
basic/generated-java/.git/objects/15/0c983b229bd5f071af93c659db4dbb7dd08b97
]


basic[basic/generated-java/.git/objects/19/4bb92c9e20f17e87f7dea5d798a7d850e4549b]=[
basic/generated-java/.git/objects/19/4bb92c9e20f17e87f7dea5d798a7d850e4549b
]


basic[basic/generated-java/.git/objects/1b/6c787337ffb79f0e3cf8b1e9f00f680a959de1]=[
basic/generated-java/.git/objects/1b/6c787337ffb79f0e3cf8b1e9f00f680a959de1
]


basic[basic/generated-java/.git/objects/21/38a96cba9ccdb4c1ea11d4358b4666437bcace]=[
basic/generated-java/.git/objects/21/38a96cba9ccdb4c1ea11d4358b4666437bcace
]


basic[basic/generated-java/.git/objects/25/5a2433b47bef8a64417feb16e7fe5b84aa80f3]=[
basic/generated-java/.git/objects/25/5a2433b47bef8a64417feb16e7fe5b84aa80f3
]


basic[basic/generated-java/.git/objects/37/556c558fdb9195a9f494b5922c092078b9fd8d]=[
basic/generated-java/.git/objects/37/556c558fdb9195a9f494b5922c092078b9fd8d
]


basic[basic/generated-java/.git/objects/41/d9927a4d4fb3f96a785543079b8df6723c946b]=[
basic/generated-java/.git/objects/41/d9927a4d4fb3f96a785543079b8df6723c946b
]


basic[basic/generated-java/.git/objects/4e/063a615ab8c0f7dec301a9f92e0a7525278f0d]=[
basic/generated-java/.git/objects/4e/063a615ab8c0f7dec301a9f92e0a7525278f0d
]


basic[basic/generated-java/.git/objects/6b/b2f4ce8a7d13eaf8f3dec4b1ced699be8a3b58]=[
basic/generated-java/.git/objects/6b/b2f4ce8a7d13eaf8f3dec4b1ced699be8a3b58
]


basic[basic/generated-java/.git/objects/7a/b27e96d7c4c79428b634b198c61c63d308bdf6]=[
basic/generated-java/.git/objects/7a/b27e96d7c4c79428b634b198c61c63d308bdf6
]


basic[basic/generated-java/.git/objects/7b/cf89f6d813abb3144fe0e5ee6f926d919c5f68]=[
basic/generated-java/.git/objects/7b/cf89f6d813abb3144fe0e5ee6f926d919c5f68
]


basic[basic/generated-java/.git/objects/84/714a9ac344a3db6eb28c6fdfd0dc250f412d3c]=[
basic/generated-java/.git/objects/84/714a9ac344a3db6eb28c6fdfd0dc250f412d3c
]


basic[basic/generated-java/.git/objects/8a/a0484f57ec72161392cae28f724805834be67b]=[
basic/generated-java/.git/objects/8a/a0484f57ec72161392cae28f724805834be67b
]


basic[basic/generated-java/.git/objects/8c/70cf57683ab7dc14d8286b126216a86fe9a711]=[
basic/generated-java/.git/objects/8c/70cf57683ab7dc14d8286b126216a86fe9a711
]


basic[basic/generated-java/.git/objects/8e/a389e3a726c9b68bbc960ef124d8784272aece]=[
basic/generated-java/.git/objects/8e/a389e3a726c9b68bbc960ef124d8784272aece
]


basic[basic/generated-java/.git/objects/a2/fa2242bcbd778c1cb9567ec6cfccf2363678a1]=[
basic/generated-java/.git/objects/a2/fa2242bcbd778c1cb9567ec6cfccf2363678a1
]


basic[basic/generated-java/.git/objects/a7/3b916c2b80fdf710cd2588975e0565b086df83]=[
basic/generated-java/.git/objects/a7/3b916c2b80fdf710cd2588975e0565b086df83
]


basic[basic/generated-java/.git/objects/a7/518c1976dc966d31cc9c042ebf3e2e6d910860]=[
basic/generated-java/.git/objects/a7/518c1976dc966d31cc9c042ebf3e2e6d910860
]


basic[basic/generated-java/.git/objects/aa/991fceae6e464c320a107e4b337daf48c0d7ab]=[
basic/generated-java/.git/objects/aa/991fceae6e464c320a107e4b337daf48c0d7ab
]


basic[basic/generated-java/.git/objects/aa/b561f6a3b5c75e20dc8921ee86b1af7b9a55b9]=[
basic/generated-java/.git/objects/aa/b561f6a3b5c75e20dc8921ee86b1af7b9a55b9
]


basic[basic/generated-java/.git/objects/ac/1b06f93825db68fb0c0b5150917f340eaa5d02]=[
basic/generated-java/.git/objects/ac/1b06f93825db68fb0c0b5150917f340eaa5d02
]


basic[basic/generated-java/.git/objects/b1/e923b54719f399d96d507e33b3c197f259a7b8]=[
basic/generated-java/.git/objects/b1/e923b54719f399d96d507e33b3c197f259a7b8
]


basic[basic/generated-java/.git/objects/b7/96f9035168ca067a4f62ab6539d99642a178e4]=[
basic/generated-java/.git/objects/b7/96f9035168ca067a4f62ab6539d99642a178e4
]


basic[basic/generated-java/.git/objects/c7/178997f59634ab15e77a68e009f2e351e33724]=[
basic/generated-java/.git/objects/c7/178997f59634ab15e77a68e009f2e351e33724
]


basic[basic/generated-java/.git/objects/cf/63a2e83ce68f5c3df9f103208ab8f9bfca3c70]=[
basic/generated-java/.git/objects/cf/63a2e83ce68f5c3df9f103208ab8f9bfca3c70
]


basic[basic/generated-java/.git/objects/d4/199abc2cd4d9b96e645ba6b333d5bbd8318459]=[
basic/generated-java/.git/objects/d4/199abc2cd4d9b96e645ba6b333d5bbd8318459
]


basic[basic/generated-java/.git/objects/dc/b8266a979d41c4d6db5aefc53fff2744c2cdd2]=[
basic/generated-java/.git/objects/dc/b8266a979d41c4d6db5aefc53fff2744c2cdd2
]


basic[basic/generated-java/.git/objects/e0/5448d05b7143c4b79444518da8ea479c10ca1f]=[
basic/generated-java/.git/objects/e0/5448d05b7143c4b79444518da8ea479c10ca1f
]


basic[basic/generated-java/.git/objects/e2/f56f0d549349d7b078b0cf3ab03dfb1c4edb65]=[
basic/generated-java/.git/objects/e2/f56f0d549349d7b078b0cf3ab03dfb1c4edb65
]


basic[basic/generated-java/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391]=[
basic/generated-java/.git/objects/e6/9de29bb2d1d6434b8b29ae775ad8c2e48c5391
]


basic[basic/generated-java/.git/objects/ea/79934362299690373819f83286c60a25d9995f]=[
basic/generated-java/.git/objects/ea/79934362299690373819f83286c60a25d9995f
]


basic[basic/generated-java/.git/objects/f4/6c36323673141d9c9bd779ebd12a1d67780dca]=[
basic/generated-java/.git/objects/f4/6c36323673141d9c9bd779ebd12a1d67780dca
]


basic[basic/generated-java/.git/objects/f6/4ad5327ee4867f3e6870ad3f8264f7fd168165]=[
basic/generated-java/.git/objects/f6/4ad5327ee4867f3e6870ad3f8264f7fd168165
]


basic[basic/generated-java/.git/objects/f7/a394ad99bc652601cce69de69f3ac45129a652]=[
basic/generated-java/.git/objects/f7/a394ad99bc652601cce69de69f3ac45129a652
]


basic[basic/generated-java/.git/objects/f8/512656b750d30759eed5863c6e2edcc320a35a]=[
basic/generated-java/.git/objects/f8/512656b750d30759eed5863c6e2edcc320a35a
]


basic[basic/generated-java/.git/refs/heads/main]=[
0efd519138414bccb1d57cc8917ef63a72683924

]


basic[basic/generated-java/.gitignore]=[
*.class
.project
.gradle
?
.classpath
.checkstyle
.settings
.node
build

# IntelliJ
*.iml
*.ipr
*.iws
.idea/
out/

# Eclipse/IntelliJ APT
generated_src/
generated_testSrc/
generated/

bin
build
]


basic[basic/generated-java/build.gradle]=[
plugins {
    id 'java-library'
    id 'maven-publish'
}

java {
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/releases/"
    }
}

dependencies {
    api 'io.github.fern-api:jackson-utils:0.0.82'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.3'
}

]


basic[basic/generated-java/gradle/wrapper/gradle-wrapper.jar]=[
basic/generated-java/gradle/wrapper/gradle-wrapper.jar
]


basic[basic/generated-java/gradle/wrapper/gradle-wrapper.properties]=[
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

]


basic[basic/generated-java/gradlew.bat]=[
@rem
@rem Copyright 2015 the original author or authors.
@rem
@rem Licensed under the Apache License, Version 2.0 (the "License");
@rem you may not use this file except in compliance with the License.
@rem You may obtain a copy of the License at
@rem
@rem      https://www.apache.org/licenses/LICENSE-2.0
@rem
@rem Unless required by applicable law or agreed to in writing, software
@rem distributed under the License is distributed on an "AS IS" BASIS,
@rem WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@rem See the License for the specific language governing permissions and
@rem limitations under the License.
@rem

@if "%DEBUG%" == "" @echo off
@rem ##########################################################################
@rem
@rem  Gradle startup script for Windows
@rem
@rem ##########################################################################

@rem Set local scope for the variables with windows NT shell
if "%OS%"=="Windows_NT" setlocal

set DIRNAME=%~dp0
if "%DIRNAME%" == "" set DIRNAME=.
set APP_BASE_NAME=%~n0
set APP_HOME=%DIRNAME%

@rem Resolve any "." and ".." in APP_HOME to make it shorter.
for %%i in ("%APP_HOME%") do set APP_HOME=%%~fi

@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
set DEFAULT_JVM_OPTS="-Xmx64m" "-Xms64m"

@rem Find java.exe
if defined JAVA_HOME goto findJavaFromJavaHome

set JAVA_EXE=java.exe
%JAVA_EXE% -version >NUL 2>&1
if "%ERRORLEVEL%" == "0" goto execute

echo.
echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:findJavaFromJavaHome
set JAVA_HOME=%JAVA_HOME:"=%
set JAVA_EXE=%JAVA_HOME%/bin/java.exe

if exist "%JAVA_EXE%" goto execute

echo.
echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
echo.
echo Please set the JAVA_HOME variable in your environment to match the
echo location of your Java installation.

goto fail

:execute
@rem Setup the command line

set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar


@rem Execute Gradle
"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %*

:end
@rem End local scope for the variables with windows NT shell
if "%ERRORLEVEL%"=="0" goto mainEnd

:fail
rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
rem the _cmd.exe /c_ return code!
if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
exit /b 1

:mainEnd
if "%OS%"=="Windows_NT" endlocal

:omega

]


basic[basic/generated-java/gradlew]=[
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

APP_NAME="Gradle"
APP_BASE_NAME=${0##*/}

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
.
.
# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

]


basic[basic/generated-java/settings.gradle]=[

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/blog/types/Age.java]=[
package com.fern.basic.model.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class Age {
  private final int value;

  private Age(int value) {
    this.value = value;
  }

  @JsonValue
  public int get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof Age && this.value == ((Age) other).value);
  }

  @Override
  public int hashCode() {
    return Integer.hashCode(value);
  }

  @Override
  public String toString() {
    return Integer.toString(value);
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static Age of(int value) {
    return new Age(value);
  }

  public static Age valueOf(String value) {
    return of(Integer.parseInt(value));
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/blog/types/Author.java]=[
package com.fern.basic.model.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class Author {
  private final Value value;

  private Author(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static Author anonymous() {
    return new Author(new AnonymousValue());
  }

  public static Author name(String value) {
    return new Author(new NameValue(value));
  }

  public boolean isAnonymous() {
    return value instanceof AnonymousValue;
  }

  public boolean isName() {
    return value instanceof NameValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<String> getName() {
    if (isName()) {
      return Optional.of(((NameValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitAnonymous();

    T visitName(String name);

    T _visitUnknown(Object unknown);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(AnonymousValue.class),
      @JsonSubTypes.Type(NameValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("anonymous")
  private static final class AnonymousValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private AnonymousValue() {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitAnonymous();
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof AnonymousValue;
    }

    @Override
    public String toString() {
      return "Author{" + "}";
    }
  }

  @JsonTypeName("name")
  private static final class NameValue implements Value {
    private String value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private NameValue(@JsonProperty("value") String value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitName(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof NameValue && equalTo((NameValue) other);
    }

    private boolean equalTo(NameValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "type: " + type + ", value: " + value + "}";
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/blog/types/BlogPost.java]=[
package com.fern.basic.model.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = BlogPost.Builder.class
)
public final class BlogPost {
  private final PostId id;

  private final PostType type;

  private final String title;

  private final Author author;

  private final String content;

  private int _cachedHashCode;

  BlogPost(PostId id, PostType type, String title, Author author, String content) {
    this.id = id;
    this.type = type;
    this.title = title;
    this.author = author;
    this.content = content;
  }

  @JsonProperty("id")
  public PostId getId() {
    return id;
  }

  @JsonProperty("type")
  public PostType getType() {
    return type;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BlogPost && equalTo((BlogPost) other);
  }

  private boolean equalTo(BlogPost other) {
    return id.equals(other.id) && type.equals(other.type) && title.equals(other.title) && author.equals(other.author) && content.equals(other.content);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.type, this.title, this.author, this.content);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BlogPost{" + "id: " + id + ", type: " + type + ", title: " + title + ", author: " + author + ", content: " + content + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    TypeStage id(PostId id);

    Builder from(BlogPost other);
  }

  public interface TypeStage {
    TitleStage type(PostType type);
  }

  public interface TitleStage {
    AuthorStage title(String title);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    _FinalStage content(String content);
  }

  public interface _FinalStage {
    BlogPost build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements IdStage, TypeStage, TitleStage, AuthorStage, ContentStage, _FinalStage {
    private PostId id;

    private PostType type;

    private String title;

    private Author author;

    private String content;

    private Builder() {
    }

    @Override
    public Builder from(BlogPost other) {
      id(other.getId());
      type(other.getType());
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      return this;
    }

    @Override
    @JsonSetter("id")
    public TypeStage id(PostId id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("type")
    public TitleStage type(PostType type) {
      this.type = type;
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public _FinalStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    public BlogPost build() {
      return new BlogPost(id, type, title, author, content);
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/blog/types/CreatePostRequest.java]=[
package com.fern.basic.model.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = CreatePostRequest.Builder.class
)
public final class CreatePostRequest {
  private final String title;

  private final Author author;

  private final String content;

  private final PostType postType;

  private final int _switch;

  private int _cachedHashCode;

  CreatePostRequest(String title, Author author, String content, PostType postType, int _switch) {
    this.title = title;
    this.author = author;
    this.content = content;
    this.postType = postType;
    this._switch = _switch;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @JsonProperty("postType")
  public PostType getPostType() {
    return postType;
  }

  @JsonProperty("switch")
  public int getSwitch() {
    return _switch;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreatePostRequest && equalTo((CreatePostRequest) other);
  }

  private boolean equalTo(CreatePostRequest other) {
    return title.equals(other.title) && author.equals(other.author) && content.equals(other.content) && postType.equals(other.postType) && _switch == other._switch;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.title, this.author, this.content, this.postType, this._switch);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "CreatePostRequest{" + "title: " + title + ", author: " + author + ", content: " + content + ", postType: " + postType + ", _switch: " + _switch + "}";
  }

  public static TitleStage builder() {
    return new Builder();
  }

  public interface TitleStage {
    AuthorStage title(String title);

    Builder from(CreatePostRequest other);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    PostTypeStage content(String content);
  }

  public interface PostTypeStage {
    SwitchStage postType(PostType postType);
  }

  public interface SwitchStage {
    _FinalStage _switch(int _switch);
  }

  public interface _FinalStage {
    CreatePostRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements TitleStage, AuthorStage, ContentStage, PostTypeStage, SwitchStage, _FinalStage {
    private String title;

    private Author author;

    private String content;

    private PostType postType;

    private int _switch;

    private Builder() {
    }

    @Override
    public Builder from(CreatePostRequest other) {
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      postType(other.getPostType());
      _switch(other.getSwitch());
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public PostTypeStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    @JsonSetter("postType")
    public SwitchStage postType(PostType postType) {
      this.postType = postType;
      return this;
    }

    @Override
    @JsonSetter("switch")
    public _FinalStage _switch(int _switch) {
      this._switch = _switch;
      return this;
    }

    @Override
    public CreatePostRequest build() {
      return new CreatePostRequest(title, author, content, postType, _switch);
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/blog/types/GeneratorIdAndVersion.java]=[
package com.fern.basic.model.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = GeneratorIdAndVersion.Builder.class
)
public final class GeneratorIdAndVersion {
  private final String id;

  private final String version;

  private int _cachedHashCode;

  GeneratorIdAndVersion(String id, String version) {
    this.id = id;
    this.version = version;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("version")
  public String getVersion() {
    return version;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GeneratorIdAndVersion && equalTo((GeneratorIdAndVersion) other);
  }

  private boolean equalTo(GeneratorIdAndVersion other) {
    return id.equals(other.id) && version.equals(other.version);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.version);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "GeneratorIdAndVersion{" + "id: " + id + ", version: " + version + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    VersionStage id(String id);

    Builder from(GeneratorIdAndVersion other);
  }

  public interface VersionStage {
    _FinalStage version(String version);
  }

  public interface _FinalStage {
    GeneratorIdAndVersion build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements IdStage, VersionStage, _FinalStage {
    private String id;

    private String version;

    private Builder() {
    }

    @Override
    public Builder from(GeneratorIdAndVersion other) {
      id(other.getId());
      version(other.getVersion());
      return this;
    }

    @Override
    @JsonSetter("id")
    public VersionStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("version")
    public _FinalStage version(String version) {
      this.version = version;
      return this;
    }

    @Override
    public GeneratorIdAndVersion build() {
      return new GeneratorIdAndVersion(id, version);
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/blog/types/PostId.java]=[
package com.fern.basic.model.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class PostId {
  private final String value;

  private PostId(String value) {
    this.value = value;
  }

  @JsonValue
  public String get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof PostId && this.value.equals(((PostId) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value;
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostId of(String value) {
    return new PostId(value);
  }

  public static PostId valueOf(String value) {
    return of(value);
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/blog/types/PostType.java]=[
package com.fern.basic.model.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;

public final class PostType {
  public static final PostType LONG = new PostType(Value.LONG, "LONG");

  public static final PostType SHORT = new PostType(Value.SHORT, "SHORT");

  public static final PostType MEDIUM = new PostType(Value.MEDIUM, "med.med");

  private final Value value;

  private final String string;

  PostType(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof PostType && this.string.equals(((PostType) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case LONG:
        return visitor.visitLong();
      case SHORT:
        return visitor.visitShort();
      case MEDIUM:
        return visitor.visitMedium();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostType valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "LONG":
        return LONG;
      case "SHORT":
        return SHORT;
      case "med.med":
        return MEDIUM;
      default:
        return new PostType(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    LONG,

    SHORT,

    MEDIUM,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitLong();

    T visitShort();

    T visitMedium();

    T visitUnknown(String unknownType);
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/dummy/service/types/DummyId.java]=[
package com.fern.basic.model.dummy.service.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class DummyId {
  private final String value;

  private DummyId(String value) {
    this.value = value;
  }

  @JsonValue
  public String get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof DummyId && this.value.equals(((DummyId) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value;
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static DummyId of(String value) {
    return new DummyId(value);
  }

  public static DummyId valueOf(String value) {
    return of(value);
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/ir/types/ContainerType.java]=[
package com.fern.basic.model.ir.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonUnwrapped;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class ContainerType {
  private final Value value;

  private ContainerType(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static ContainerType list(TypeReference value) {
    return new ContainerType(new ListValue(value));
  }

  public static ContainerType map(MapType value) {
    return new ContainerType(new MapValue(value));
  }

  public static ContainerType optional(TypeReference value) {
    return new ContainerType(new OptionalValue(value));
  }

  public static ContainerType set(TypeReference value) {
    return new ContainerType(new SetValue(value));
  }

  public boolean isList() {
    return value instanceof ListValue;
  }

  public boolean isMap() {
    return value instanceof MapValue;
  }

  public boolean isOptional() {
    return value instanceof OptionalValue;
  }

  public boolean isSet() {
    return value instanceof SetValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<TypeReference> getList() {
    if (isList()) {
      return Optional.of(((ListValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<MapType> getMap() {
    if (isMap()) {
      return Optional.of(((MapValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<TypeReference> getOptional() {
    if (isOptional()) {
      return Optional.of(((OptionalValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<TypeReference> getSet() {
    if (isSet()) {
      return Optional.of(((SetValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitList(TypeReference list);

    T visitMap(MapType map);

    T visitOptional(TypeReference optional);

    T visitSet(TypeReference set);

    T _visitUnknown(Object unknown);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(ListValue.class),
      @JsonSubTypes.Type(MapValue.class),
      @JsonSubTypes.Type(OptionalValue.class),
      @JsonSubTypes.Type(SetValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("list")
  private static final class ListValue implements Value {
    private TypeReference value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ListValue(@JsonProperty("value") TypeReference value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitList(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ListValue && equalTo((ListValue) other);
    }

    private boolean equalTo(ListValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "ContainerType{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("map")
  private static final class MapValue implements Value {
    @JsonUnwrapped
    private MapType value;

    private MapValue(MapType value) {
      this.value = value;
    }

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private MapValue() {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitMap(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof MapValue && equalTo((MapValue) other);
    }

    private boolean equalTo(MapValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "ContainerType{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("optional")
  private static final class OptionalValue implements Value {
    private TypeReference value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private OptionalValue(@JsonProperty("value") TypeReference value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitOptional(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof OptionalValue && equalTo((OptionalValue) other);
    }

    private boolean equalTo(OptionalValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "ContainerType{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("set")
  private static final class SetValue implements Value {
    private TypeReference value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private SetValue(@JsonProperty("value") TypeReference value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitSet(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof SetValue && equalTo((SetValue) other);
    }

    private boolean equalTo(SetValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "ContainerType{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "ContainerType{" + "type: " + type + ", value: " + value + "}";
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/ir/types/IStringWithAllCasings.java]=[
package com.fern.basic.model.ir.types;

import java.lang.String;

public interface IStringWithAllCasings {
  String getOriginalValue();

  String getCamelCase();

  String getPascalCase();

  String getSnakeCase();

  String getScreamingSnakeCase();
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/ir/types/MapType.java]=[
package com.fern.basic.model.ir.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = MapType.Builder.class
)
public final class MapType {
  private final TypeReference keyType;

  private final TypeReference valueType;

  private int _cachedHashCode;

  MapType(TypeReference keyType, TypeReference valueType) {
    this.keyType = keyType;
    this.valueType = valueType;
  }

  @JsonProperty("keyType")
  public TypeReference getKeyType() {
    return keyType;
  }

  @JsonProperty("valueType")
  public TypeReference getValueType() {
    return valueType;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof MapType && equalTo((MapType) other);
  }

  private boolean equalTo(MapType other) {
    return keyType.equals(other.keyType) && valueType.equals(other.valueType);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.keyType, this.valueType);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "MapType{" + "keyType: " + keyType + ", valueType: " + valueType + "}";
  }

  public static KeyTypeStage builder() {
    return new Builder();
  }

  public interface KeyTypeStage {
    ValueTypeStage keyType(TypeReference keyType);

    Builder from(MapType other);
  }

  public interface ValueTypeStage {
    _FinalStage valueType(TypeReference valueType);
  }

  public interface _FinalStage {
    MapType build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements KeyTypeStage, ValueTypeStage, _FinalStage {
    private TypeReference keyType;

    private TypeReference valueType;

    private Builder() {
    }

    @Override
    public Builder from(MapType other) {
      keyType(other.getKeyType());
      valueType(other.getValueType());
      return this;
    }

    @Override
    @JsonSetter("keyType")
    public ValueTypeStage keyType(TypeReference keyType) {
      this.keyType = keyType;
      return this;
    }

    @Override
    @JsonSetter("valueType")
    public _FinalStage valueType(TypeReference valueType) {
      this.valueType = valueType;
      return this;
    }

    @Override
    public MapType build() {
      return new MapType(keyType, valueType);
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/ir/types/PrimitiveType.java]=[
package com.fern.basic.model.ir.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;

public final class PrimitiveType {
  public static final PrimitiveType INTEGER = new PrimitiveType(Value.INTEGER, "INTEGER");

  public static final PrimitiveType BOOLEAN = new PrimitiveType(Value.BOOLEAN, "BOOLEAN");

  public static final PrimitiveType DATE_TIME = new PrimitiveType(Value.DATE_TIME, "DATE_TIME");

  public static final PrimitiveType LONG = new PrimitiveType(Value.LONG, "LONG");

  public static final PrimitiveType STRING = new PrimitiveType(Value.STRING, "STRING");

  public static final PrimitiveType DOUBLE = new PrimitiveType(Value.DOUBLE, "DOUBLE");

  public static final PrimitiveType UUID = new PrimitiveType(Value.UUID, "UUID");

  private final Value value;

  private final String string;

  PrimitiveType(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof PrimitiveType && this.string.equals(((PrimitiveType) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case INTEGER:
        return visitor.visitInteger();
      case BOOLEAN:
        return visitor.visitBoolean();
      case DATE_TIME:
        return visitor.visitDateTime();
      case LONG:
        return visitor.visitLong();
      case STRING:
        return visitor.visitString();
      case DOUBLE:
        return visitor.visitDouble();
      case UUID:
        return visitor.visitUuid();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PrimitiveType valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "INTEGER":
        return INTEGER;
      case "BOOLEAN":
        return BOOLEAN;
      case "DATE_TIME":
        return DATE_TIME;
      case "LONG":
        return LONG;
      case "STRING":
        return STRING;
      case "DOUBLE":
        return DOUBLE;
      case "UUID":
        return UUID;
      default:
        return new PrimitiveType(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    INTEGER,

    DOUBLE,

    STRING,

    BOOLEAN,

    LONG,

    DATE_TIME,

    UUID,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitInteger();

    T visitDouble();

    T visitString();

    T visitBoolean();

    T visitLong();

    T visitDateTime();

    T visitUuid();

    T visitUnknown(String unknownType);
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/ir/types/StringWithAllCasings.java]=[
package com.fern.basic.model.ir.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = StringWithAllCasings.Builder.class
)
public final class StringWithAllCasings implements IStringWithAllCasings {
  private final String originalValue;

  private final String camelCase;

  private final String pascalCase;

  private final String snakeCase;

  private final String screamingSnakeCase;

  private int _cachedHashCode;

  StringWithAllCasings(String originalValue, String camelCase, String pascalCase, String snakeCase,
      String screamingSnakeCase) {
    this.originalValue = originalValue;
    this.camelCase = camelCase;
    this.pascalCase = pascalCase;
    this.snakeCase = snakeCase;
    this.screamingSnakeCase = screamingSnakeCase;
  }

  @JsonProperty("originalValue")
  @Override
  public String getOriginalValue() {
    return originalValue;
  }

  @JsonProperty("camelCase")
  @Override
  public String getCamelCase() {
    return camelCase;
  }

  @JsonProperty("pascalCase")
  @Override
  public String getPascalCase() {
    return pascalCase;
  }

  @JsonProperty("snakeCase")
  @Override
  public String getSnakeCase() {
    return snakeCase;
  }

  @JsonProperty("screamingSnakeCase")
  @Override
  public String getScreamingSnakeCase() {
    return screamingSnakeCase;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof StringWithAllCasings && equalTo((StringWithAllCasings) other);
  }

  private boolean equalTo(StringWithAllCasings other) {
    return originalValue.equals(other.originalValue) && camelCase.equals(other.camelCase) && pascalCase.equals(other.pascalCase) && snakeCase.equals(other.snakeCase) && screamingSnakeCase.equals(other.screamingSnakeCase);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.originalValue, this.camelCase, this.pascalCase, this.snakeCase, this.screamingSnakeCase);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "StringWithAllCasings{" + "originalValue: " + originalValue + ", camelCase: " + camelCase + ", pascalCase: " + pascalCase + ", snakeCase: " + snakeCase + ", screamingSnakeCase: " + screamingSnakeCase + "}";
  }

  public static OriginalValueStage builder() {
    return new Builder();
  }

  public interface OriginalValueStage {
    CamelCaseStage originalValue(String originalValue);

    Builder from(StringWithAllCasings other);
  }

  public interface CamelCaseStage {
    PascalCaseStage camelCase(String camelCase);
  }

  public interface PascalCaseStage {
    SnakeCaseStage pascalCase(String pascalCase);
  }

  public interface SnakeCaseStage {
    ScreamingSnakeCaseStage snakeCase(String snakeCase);
  }

  public interface ScreamingSnakeCaseStage {
    _FinalStage screamingSnakeCase(String screamingSnakeCase);
  }

  public interface _FinalStage {
    StringWithAllCasings build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements OriginalValueStage, CamelCaseStage, PascalCaseStage, SnakeCaseStage, ScreamingSnakeCaseStage, _FinalStage {
    private String originalValue;

    private String camelCase;

    private String pascalCase;

    private String snakeCase;

    private String screamingSnakeCase;

    private Builder() {
    }

    @Override
    public Builder from(StringWithAllCasings other) {
      originalValue(other.getOriginalValue());
      camelCase(other.getCamelCase());
      pascalCase(other.getPascalCase());
      snakeCase(other.getSnakeCase());
      screamingSnakeCase(other.getScreamingSnakeCase());
      return this;
    }

    @Override
    @JsonSetter("originalValue")
    public CamelCaseStage originalValue(String originalValue) {
      this.originalValue = originalValue;
      return this;
    }

    @Override
    @JsonSetter("camelCase")
    public PascalCaseStage camelCase(String camelCase) {
      this.camelCase = camelCase;
      return this;
    }

    @Override
    @JsonSetter("pascalCase")
    public SnakeCaseStage pascalCase(String pascalCase) {
      this.pascalCase = pascalCase;
      return this;
    }

    @Override
    @JsonSetter("snakeCase")
    public ScreamingSnakeCaseStage snakeCase(String snakeCase) {
      this.snakeCase = snakeCase;
      return this;
    }

    @Override
    @JsonSetter("screamingSnakeCase")
    public _FinalStage screamingSnakeCase(String screamingSnakeCase) {
      this.screamingSnakeCase = screamingSnakeCase;
      return this;
    }

    @Override
    public StringWithAllCasings build() {
      return new StringWithAllCasings(originalValue, camelCase, pascalCase, snakeCase, screamingSnakeCase);
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/ir/types/TypeReference.java]=[
package com.fern.basic.model.ir.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class TypeReference {
  private final Value value;

  private TypeReference(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static TypeReference container(ContainerType value) {
    return new TypeReference(new ContainerValue(value));
  }

  public static TypeReference primitive(PrimitiveType value) {
    return new TypeReference(new PrimitiveValue(value));
  }

  public static TypeReference unknown() {
    return new TypeReference(new UnknownValue());
  }

  public static TypeReference _void() {
    return new TypeReference(new VoidValue());
  }

  public boolean isContainer() {
    return value instanceof ContainerValue;
  }

  public boolean isPrimitive() {
    return value instanceof PrimitiveValue;
  }

  public boolean isUnknown() {
    return value instanceof UnknownValue;
  }

  public boolean isVoid() {
    return value instanceof VoidValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<ContainerType> getContainer() {
    if (isContainer()) {
      return Optional.of(((ContainerValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<PrimitiveType> getPrimitive() {
    if (isPrimitive()) {
      return Optional.of(((PrimitiveValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitContainer(ContainerType container);

    T visitPrimitive(PrimitiveType primitive);

    T visitUnknown();

    T visitVoid();

    T _visitUnknown(Object unknown);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(ContainerValue.class),
      @JsonSubTypes.Type(PrimitiveValue.class),
      @JsonSubTypes.Type(UnknownValue.class),
      @JsonSubTypes.Type(VoidValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("container")
  private static final class ContainerValue implements Value {
    private ContainerType value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private ContainerValue(@JsonProperty("value") ContainerType value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitContainer(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof ContainerValue && equalTo((ContainerValue) other);
    }

    private boolean equalTo(ContainerValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "TypeReference{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("primitive")
  private static final class PrimitiveValue implements Value {
    private PrimitiveType value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PrimitiveValue(@JsonProperty("value") PrimitiveType value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPrimitive(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PrimitiveValue && equalTo((PrimitiveValue) other);
    }

    private boolean equalTo(PrimitiveValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "TypeReference{" + "value: " + value + "}";
    }
  }

  @JsonTypeName("unknown")
  private static final class UnknownValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private UnknownValue() {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitUnknown();
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UnknownValue;
    }

    @Override
    public String toString() {
      return "TypeReference{" + "}";
    }
  }

  @JsonTypeName("void")
  private static final class VoidValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private VoidValue() {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitVoid();
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof VoidValue;
    }

    @Override
    public String toString() {
      return "TypeReference{" + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "TypeReference{" + "type: " + type + ", value: " + value + "}";
    }
  }
}

]


basic[basic/generated-java/src/main/java/com/fern/basic/model/ir/types/WireStringWithAllCasings.java]=[
package com.fern.basic.model.ir.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = WireStringWithAllCasings.Builder.class
)
public final class WireStringWithAllCasings implements IStringWithAllCasings {
  private final String originalValue;

  private final String camelCase;

  private final String pascalCase;

  private final String snakeCase;

  private final String screamingSnakeCase;

  private final String wireValue;

  private int _cachedHashCode;

  WireStringWithAllCasings(String originalValue, String camelCase, String pascalCase,
      String snakeCase, String screamingSnakeCase, String wireValue) {
    this.originalValue = originalValue;
    this.camelCase = camelCase;
    this.pascalCase = pascalCase;
    this.snakeCase = snakeCase;
    this.screamingSnakeCase = screamingSnakeCase;
    this.wireValue = wireValue;
  }

  @JsonProperty("originalValue")
  @Override
  public String getOriginalValue() {
    return originalValue;
  }

  @JsonProperty("camelCase")
  @Override
  public String getCamelCase() {
    return camelCase;
  }

  @JsonProperty("pascalCase")
  @Override
  public String getPascalCase() {
    return pascalCase;
  }

  @JsonProperty("snakeCase")
  @Override
  public String getSnakeCase() {
    return snakeCase;
  }

  @JsonProperty("screamingSnakeCase")
  @Override
  public String getScreamingSnakeCase() {
    return screamingSnakeCase;
  }

  @JsonProperty("wireValue")
  public String getWireValue() {
    return wireValue;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WireStringWithAllCasings && equalTo((WireStringWithAllCasings) other);
  }

  private boolean equalTo(WireStringWithAllCasings other) {
    return originalValue.equals(other.originalValue) && camelCase.equals(other.camelCase) && pascalCase.equals(other.pascalCase) && snakeCase.equals(other.snakeCase) && screamingSnakeCase.equals(other.screamingSnakeCase) && wireValue.equals(other.wireValue);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.originalValue, this.camelCase, this.pascalCase, this.snakeCase, this.screamingSnakeCase, this.wireValue);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "WireStringWithAllCasings{" + "originalValue: " + originalValue + ", camelCase: " + camelCase + ", pascalCase: " + pascalCase + ", snakeCase: " + snakeCase + ", screamingSnakeCase: " + screamingSnakeCase + ", wireValue: " + wireValue + "}";
  }

  public static OriginalValueStage builder() {
    return new Builder();
  }

  public interface OriginalValueStage {
    CamelCaseStage originalValue(String originalValue);

    Builder from(WireStringWithAllCasings other);
  }

  public interface CamelCaseStage {
    PascalCaseStage camelCase(String camelCase);
  }

  public interface PascalCaseStage {
    SnakeCaseStage pascalCase(String pascalCase);
  }

  public interface SnakeCaseStage {
    ScreamingSnakeCaseStage snakeCase(String snakeCase);
  }

  public interface ScreamingSnakeCaseStage {
    WireValueStage screamingSnakeCase(String screamingSnakeCase);
  }

  public interface WireValueStage {
    _FinalStage wireValue(String wireValue);
  }

  public interface _FinalStage {
    WireStringWithAllCasings build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements OriginalValueStage, CamelCaseStage, PascalCaseStage, SnakeCaseStage, ScreamingSnakeCaseStage, WireValueStage, _FinalStage {
    private String originalValue;

    private String camelCase;

    private String pascalCase;

    private String snakeCase;

    private String screamingSnakeCase;

    private String wireValue;

    private Builder() {
    }

    @Override
    public Builder from(WireStringWithAllCasings other) {
      originalValue(other.getOriginalValue());
      camelCase(other.getCamelCase());
      pascalCase(other.getPascalCase());
      snakeCase(other.getSnakeCase());
      screamingSnakeCase(other.getScreamingSnakeCase());
      wireValue(other.getWireValue());
      return this;
    }

    @Override
    @JsonSetter("originalValue")
    public CamelCaseStage originalValue(String originalValue) {
      this.originalValue = originalValue;
      return this;
    }

    @Override
    @JsonSetter("camelCase")
    public PascalCaseStage camelCase(String camelCase) {
      this.camelCase = camelCase;
      return this;
    }

    @Override
    @JsonSetter("pascalCase")
    public SnakeCaseStage pascalCase(String pascalCase) {
      this.pascalCase = pascalCase;
      return this;
    }

    @Override
    @JsonSetter("snakeCase")
    public ScreamingSnakeCaseStage snakeCase(String snakeCase) {
      this.snakeCase = snakeCase;
      return this;
    }

    @Override
    @JsonSetter("screamingSnakeCase")
    public WireValueStage screamingSnakeCase(String screamingSnakeCase) {
      this.screamingSnakeCase = screamingSnakeCase;
      return this;
    }

    @Override
    @JsonSetter("wireValue")
    public _FinalStage wireValue(String wireValue) {
      this.wireValue = wireValue;
      return this;
    }

    @Override
    public WireStringWithAllCasings build() {
      return new WireStringWithAllCasings(originalValue, camelCase, pascalCase, snakeCase, screamingSnakeCase, wireValue);
    }
  }
}

]