version: 2.1
orbs:
  aws-cli: circleci/aws-cli@2.0.3
jobs:
  compile:
    docker: [{ image: 'cimg/openjdk:11.0.10-node' }]
    environment:
      CIRCLE_TEST_REPORTS: /home/circleci/junit
      CIRCLE_ARTIFACTS: /home/circleci/artifacts
      GRADLE_OPTS: -Dorg.gradle.jvmargs='-XX:MaxMetaspaceSize=256m' -Dorg.gradle.workers.max=4
      _JAVA_OPTIONS: -XX:ActiveProcessorCount=4 -Xmx1177m -XX:MaxMetaspaceSize=512m -XX:ErrorFile=/home/circleci/artifacts/hs_err_pid%p.log -XX:HeapDumpPath=/home/circleci/artifacts
      TERM: dumb
    steps:
      - checkout
      - restore_cache: { key: 'gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}' }
      - restore_cache: { key: 'compile-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}' }
      - run: ./gradlew --parallel --stacktrace classes testClasses
      - save_cache:
          key: 'gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}'
          paths: [ ~/.gradle/wrapper ]
      - save_cache:
          key: 'compile-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}'
          paths: [ ~/.gradle/caches ]
      - persist_to_workspace:
          root: /home/circleci
          paths: [ project, .gradle/init.gradle ]

  check:
    docker: [ { image: 'cimg/openjdk:11.0.10-node' } ]
    environment:
      CIRCLE_TEST_REPORTS: /home/circleci/junit
      CIRCLE_ARTIFACTS: /home/circleci/artifacts
      GRADLE_OPTS: -Dorg.gradle.jvmargs='-XX:MaxMetaspaceSize=256m' -Dorg.gradle.workers.max=2
      _JAVA_OPTIONS: -XX:ActiveProcessorCount=2 -Xmx938m -XX:MaxMetaspaceSize=512m -XX:ErrorFile=/home/circleci/artifacts/hs_err_pid%p.log -XX:HeapDumpPath=/home/circleci/artifacts
      TERM: dumb
    steps:
      - attach_workspace: { at: /home/circleci }
      - restore_cache: { key: 'gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}' }
      - restore_cache: { key: 'check-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}' }
      - run: ./gradlew --parallel --stacktrace --continue check idea -x test
      - save_cache:
          key: 'check-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}'
          paths: [ ~/.gradle/caches ]
      - run:
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*TEST.*xml" -exec cp --parents {} ~/junit/ \;
          when: always
      - store_test_results: { path: ~/junit }
      - store_artifacts: { path: ~/artifacts }

  unit-test:
    docker: [ { image: 'cimg/openjdk:11.0.10-node' } ]
    environment:
      CIRCLE_TEST_REPORTS: /home/circleci/junit
      CIRCLE_ARTIFACTS: /home/circleci/artifacts
      GRADLE_OPTS: -Dorg.gradle.jvmargs='-XX:MaxMetaspaceSize=256m' -Dorg.gradle.workers.max=4
      _JAVA_OPTIONS: -XX:ActiveProcessorCount=4 -Xmx1177m -XX:MaxMetaspaceSize=512m -XX:ErrorFile=/home/circleci/artifacts/hs_err_pid%p.log -XX:HeapDumpPath=/home/circleci/artifacts
      TERM: dumb
    steps:
      - attach_workspace: { at: /home/circleci }
      - restore_cache: { key: 'gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}' }
      - restore_cache: { key: 'unit-test-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}' }
      - run: ./gradlew --parallel --stacktrace --continue --max-workers=2 test
      - save_cache:
          key: 'unit-test-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}'
          paths: [ ~/.gradle/caches ]
      - run:
          name: Install Fern Dev
          command: |
            npm install -g fern-api@0.0.215
      - run:
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*TEST.*xml" -exec cp --parents {} ~/junit/ \;
          when: always
      - store_test_results: { path: ~/junit }
      - store_artifacts: { path: ~/artifacts }

  build:
    machine:
      image: ubuntu-2004:current
    environment:
      CIRCLE_TEST_REPORTS: /home/circleci/junit
      CIRCLE_ARTIFACTS: /home/circleci/artifacts
      _JAVA_OPTIONS: -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false -Xmx8192m
      CI: true
      TERM: dumb
    steps:
      - attach_workspace: { at: /home/circleci }
      - restore_cache: { key: 'gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}' }
      - restore_cache: { key: 'unit-test-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}' }
      - run:
          name: Install Fern Dev
          command: |
            npm install -g fern-api@0.0.215
            npm config set @fern-api:registry https://registry.npmjs.org
            npm config set registry.npmjs.org/:_authToken ${YARN_NPM_AUTH_TOKEN}
            npm install -g @fern-api/fern-api-dev@0.0.184-12-gdba76681
      - run: docker network prune -f
      - run: ./gradlew --parallel --stacktrace build -x test -x check
      - run:
          command: mkdir -p ~/junit && find . -type f -regex ".*/build/.*TEST.*xml" -exec cp --parents {} ~/junit/ \; || true
          when: always
      - store_test_results: { path: ~/junit }
      - store_artifacts: { path: ~/artifacts }

  publish-jars:
    docker: [ { image: 'cimg/openjdk:11.0.10-node' } ]
    environment:
      GRADLE_OPTS: -Dorg.gradle.jvmargs='-XX:MaxMetaspaceSize=256m' -Dorg.gradle.workers.max=4
      _JAVA_OPTIONS: -XX:ActiveProcessorCount=4 -Xmx1177m -XX:MaxMetaspaceSize=512m -XX:ErrorFile=/home/circleci/artifacts/hs_err_pid%p.log -XX:HeapDumpPath=/home/circleci/artifacts
      TERM: dumb
    resource_class: small
    steps:
      - attach_workspace: { at: /home/circleci }
      - restore_cache: { key: 'gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}' }
      - restore_cache: { key: 'unit-test-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}' }
      - run:
          command: ./gradlew  publish
          name: Publish utils jars

  publish-docker:
    machine:
      image: ubuntu-2004:current
      docker_layer_caching: true
    environment:
      CIRCLE_TEST_REPORTS: /home/circleci/junit
      CIRCLE_ARTIFACTS: /home/circleci/artifacts
      _JAVA_OPTIONS: -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false -Xmx8192m
      TERM: dumb
    resource_class: medium
    steps:
      - attach_workspace: { at: /home/circleci }
      - restore_cache: { key: 'gradle-wrapper-v2-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}' }
      - restore_cache: { key: 'unit-test-gradle-cache-v2-{{ checksum "versions.props" }}-{{ checksum "build.gradle" }}' }
      - run:
          command: |
            projectVersion=$(./gradlew printVersion --quiet)
            ./gradlew :cli:dockerTag"$projectVersion"
            echo "$FERNAPI_DOCKER_HUB_PASSWORD" | docker login --username fernapi --password-stdin
            docker tag fern-java:"$projectVersion" fernapi/fern-java:"$projectVersion"
            docker push fernapi/fern-java:"$projectVersion"
          name: Publish fern-java docker
      - run:
          command: |
            projectVersion=$(./gradlew printVersion --quiet)
            ./gradlew :client-generator:dockerTag"$projectVersion"
            echo "$FERNAPI_DOCKER_HUB_PASSWORD" | docker login --username fernapi --password-stdin
            docker tag java-client:"$projectVersion" fernapi/fern-java-sdk:"$projectVersion"
            docker push fernapi/fern-java-sdk:"$projectVersion"
          name: Publish java-client docker
      - run:
          command: |
            projectVersion=$(./gradlew printVersion --quiet)
            ./gradlew :model-generator:dockerTag"$projectVersion"
            echo "$FERNAPI_DOCKER_HUB_PASSWORD" | docker login --username fernapi --password-stdin
            docker tag java-model:"$projectVersion" fernapi/java-model:"$projectVersion"
            docker push fernapi/java-model:"$projectVersion"
          name: Publish java-model docker

workflows:
  version: 2
  build:
    jobs:
      - compile:
          filters: { tags: { only: /.*/ } }
          context: jfrog

      - unit-test:
          requires: [ compile ]
          filters: { tags: { only: /.*/ } }
          context: jfrog

      - check:
          requires: [ compile ]
          filters: { tags: { only: /.*/ } }
          context: jfrog

      - build:
          requires: [ compile ]
          filters: { tags: { only: /.*/ } }
          context:
            - jfrog
            - npm

      - publish-docker:
          requires: [ check, unit-test, build ]
          filters:
            branches:
              only: main
            tags:
              only: /.*/
          context:
            - docker-hub

      - publish-jars:
          requires: [ check, unit-test, build]
          filters:
            branches:
              ignore: /.*/
            tags:
              only:
                - /.*/
          context:
            - fern-maven
            - docker-hub
