basic[.gitignore]=[
*.class
.project
.gradle
?
.classpath
.checkstyle
.settings
.node
build

# IntelliJ
*.iml
*.ipr
*.iws
.idea/
out/

# Eclipse/IntelliJ APT
generated_src/
generated_testSrc/
generated/

bin
build
]


basic[build.gradle]=[
plugins {
    id 'java-library'
    id 'maven-publish'
}

java {
    withSourcesJar()
    withJavadocJar()
}

repositories {
    mavenCentral()
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/releases/"
    }
}

dependencies {
    api 'io.github.fern-api:jackson-utils:0.0.82'
    implementation 'io.github.fern-api:jersey-utils:0.0.82'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.3'
    implementation 'io.github.openfeign:feign-jackson:11.8'
    implementation 'io.github.openfeign:feign-core:11.8'
    implementation 'io.github.openfeign:feign-jaxrs2:11.8'
}
publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'com.fern'
            artifactId = 'basic'
            version = '0.0.0'

            from components.java
        }
    }
    repositories {
        maven {
            url "$System.env.MAVEN_PUBLISH_REGISTRY_URL"
            credentials {
                username "$System.env.MAVEN_USERNAME"
                password "$System.env.MAVEN_PASSWORD"
            }
        }
    }
}


]


basic[gradle/wrapper/gradle-wrapper.jar]=[
gradle/wrapper/gradle-wrapper.jar
]


basic[gradle/wrapper/gradle-wrapper.properties]=[
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

]


basic[gradlew]=[
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

APP_NAME="Gradle"
APP_BASE_NAME=${0##*/}

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
.
.
# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

]


basic[settings.gradle]=[

]


basic[src/main/java/com/fern/basic/client/BearerAuth.java]=[
package com.fern.basic.client;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Override;
import java.lang.String;

public final class BearerAuth {
  private final String token;

  private BearerAuth(String token) {
    this.token = token;
  }

  @JsonValue
  public String getToken() {
    return token;
  }

  @Override
  public String toString() {
    return "Bearer " + getToken();
  }

  public static BearerAuth of(String token) {
    return new BearerAuth(token.startsWith("Bearer ") ? token.substring(7) : token);
  }
}

]


basic[src/main/java/com/fern/basic/client/FernClient.java]=[
package com.fern.basic.client;

import com.fern.basic.client.auth.AuthServiceClient;
import com.fern.basic.client.blog.PostsServiceClient;
import com.fern.basic.client.dummy.service.DummyServiceClient;
import java.lang.String;
import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Supplier;

public final class FernClient {
  private final Supplier<AuthServiceClient> authServiceClient;

  private final Supplier<PostsServiceClient> postsServiceClient;

  private final Supplier<DummyServiceClient> dummyServiceClient;

  public FernClient(String url) {
    this.postsServiceClient = memoize(() -> new PostsServiceClient(url));
    this.dummyServiceClient = memoize(() -> new DummyServiceClient(url));
    this.authServiceClient = memoize(() -> new AuthServiceClient(url));
  }

  public FernClient(String url, BearerAuth auth) {
    this.postsServiceClient = memoize(() -> new PostsServiceClient(url));
    this.dummyServiceClient = memoize(() -> new DummyServiceClient(url));
    this.authServiceClient = memoize(() -> new AuthServiceClient(url, auth));
  }

  public final AuthServiceClient auth() {
    return this.authServiceClient.get();
  }

  public final PostsServiceClient blog() {
    return this.postsServiceClient.get();
  }

  public final DummyServiceClient dummyService() {
    return this.dummyServiceClient.get();
  }

  private static <T> Supplier<T> memoize(Supplier<T> delegate) {
    AtomicReference<T> value = new AtomicReference<>();
    return () ->  {
      T val = value.get();
      if (val == null) {
        val = value.updateAndGet(cur -> cur == null ? Objects.requireNonNull(delegate.get()) : cur);
      }
      return val;
    } ;
  }
}

]


basic[src/main/java/com/fern/basic/client/auth/AuthService.java]=[
package com.fern.basic.client.auth;

import com.fern.basic.client.BearerAuth;
import com.fern.basic.client.auth.exceptions.GetAuthException;
import com.fern.java.jackson.ClientObjectMappers;
import com.fern.java.jersey.contracts.OptionalAwareContract;
import feign.Feign;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
import feign.jaxrs.JAXRSContract;
import java.lang.String;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.HeaderParam;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/auth")
interface AuthService {
  @GET
  @Path("/")
  void getAuth(@HeaderParam("Authorization") BearerAuth auth) throws GetAuthException;

  static AuthService getClient(String url) {
    return Feign.builder()
        .contract(new OptionalAwareContract(new JAXRSContract()))
        .decoder(new JacksonDecoder(ClientObjectMappers.JSON_MAPPER))
        .encoder(new JacksonEncoder(ClientObjectMappers.JSON_MAPPER))
        .errorDecoder(new AuthServiceErrorDecoder()).target(AuthService.class, url);
  }
}

]


basic[src/main/java/com/fern/basic/client/auth/AuthServiceClient.java]=[
package com.fern.basic.client.auth;

import com.fern.basic.client.BearerAuth;
import com.fern.basic.client.auth.endpoints.GetAuth;
import com.fern.basic.client.auth.exceptions.GetAuthException;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.Optional;

public final class AuthServiceClient {
  private final AuthService service;

  private final Optional<BearerAuth> auth;

  public AuthServiceClient(String url) {
    this.service = AuthService.getClient(url);
    this.auth = Optional.empty();
  }

  public AuthServiceClient(String url, BearerAuth auth) {
    this.service = AuthService.getClient(url);
    this.auth = Optional.of(auth);
  }

  public void getAuth(GetAuth.Request request) throws GetAuthException {
    BearerAuth authValue = request.getAuthOverride().orElseGet(() -> this.auth.orElseThrow(() -> new RuntimeException("Auth is required for getAuth")));
    this.service.getAuth(authValue);
  }
}

]


basic[src/main/java/com/fern/basic/client/auth/AuthServiceErrorDecoder.java]=[
package com.fern.basic.client.auth;

import com.fern.basic.client.auth.exceptions.GetAuthException;
import com.fern.java.jackson.ClientObjectMappers;
import feign.Response;
import feign.codec.ErrorDecoder;
import java.io.IOException;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;

final class AuthServiceErrorDecoder implements ErrorDecoder {
  @Override
  public Exception decode(String methodKey, Response response) {
    try {
      if (methodKey.contains("getAuth")) {
        return decodeException(response, GetAuthException.class);
      }
    }
    catch (IOException e) {
    }
    return new RuntimeException("Failed to read response body. Received status " + response.status() + " for method " + methodKey);
  }

  private static <T extends Exception> Exception decodeException(Response response, Class<T> clazz)
      throws IOException {
    return ClientObjectMappers.JSON_MAPPER.reader().withAttribute("statusCode", response.status()).readValue(response.body().asInputStream(), clazz);
  }
}

]


basic[src/main/java/com/fern/basic/client/auth/endpoints/GetAuth.java]=[
package com.fern.basic.client.auth.endpoints;

import com.fern.basic.client.BearerAuth;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class GetAuth {
  private GetAuth() {
  }

  public static final class Request {
    private final Optional<BearerAuth> authOverride;

    private int _cachedHashCode;

    Request(Optional<BearerAuth> authOverride) {
      this.authOverride = authOverride;
    }

    public Optional<BearerAuth> getAuthOverride() {
      return authOverride;
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof Request && equalTo((Request) other);
    }

    private boolean equalTo(Request other) {
      return authOverride.equals(other.authOverride);
    }

    @Override
    public int hashCode() {
      if (_cachedHashCode == 0) {
        _cachedHashCode = Objects.hash(this.authOverride);
      }
      return _cachedHashCode;
    }

    @Override
    public String toString() {
      return "GetAuth.Request{" + "authOverride: " + authOverride + "}";
    }

    public static Builder builder() {
      return new Builder();
    }

    public static final class Builder {
      private Optional<BearerAuth> authOverride = Optional.empty();

      private Builder() {
      }

      public Builder from(Request other) {
        authOverride(other.getAuthOverride());
        return this;
      }

      public Builder authOverride(Optional<BearerAuth> authOverride) {
        this.authOverride = authOverride;
        return this;
      }

      public Builder authOverride(BearerAuth authOverride) {
        this.authOverride = Optional.of(authOverride);
        return this;
      }

      public Request build() {
        return new Request(authOverride);
      }
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/auth/exceptions/GetAuthException.java]=[
package com.fern.basic.client.auth.exceptions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    using = GetAuthException.Deserializer.class
)
public final class GetAuthException extends Exception {
  private final Value value;

  private int statusCode;

  private GetAuthException(Value value, int statusCode) {
    this.value = value;
    this.statusCode = statusCode;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public static GetAuthException other(Object unknownValue, int statusCode) {
    return new GetAuthException(new UnknownErrorValue(unknownValue), statusCode);
  }

  public boolean isOther() {
    return value instanceof UnknownErrorValue;
  }

  public Optional<Object> getOther() {
    if (isOther()) {
      return Optional.of(((UnknownErrorValue) value).unknownValue);
    }
    return Optional.empty();
  }

  public interface Visitor<T> {
    T visitOther(Object other);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = UnknownErrorValue.class
  )
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  private static final class UnknownErrorValue implements Value {
    private Object unknownValue;

    @JsonCreator(
        mode = JsonCreator.Mode.DELEGATING
    )
    UnknownErrorValue(@JsonProperty("unknownValue") Object unknownValue) {
      this.unknownValue = unknownValue;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitOther(unknownValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UnknownErrorValue && equalTo((UnknownErrorValue) other);
    }

    private boolean equalTo(UnknownErrorValue other) {
      return unknownValue.equals(other.unknownValue);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.unknownValue);
    }

    @Override
    public String toString() {
      return "GetAuthException{" + "unknownValue: " + unknownValue + "}";
    }
  }

  static final class Deserializer extends JsonDeserializer<GetAuthException> {
    @Override
    public GetAuthException deserialize(JsonParser p, DeserializationContext ctx) throws
        IOException {
      Value value = ctx.readValue(p, Value.class);
      int statusCode = (int) ctx.getAttribute("statusCode");
      return new GetAuthException(value, statusCode);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/PostsService.java]=[
package com.fern.basic.client.blog;

import com.fern.basic.client.blog.exceptions.CreatePostException;
import com.fern.basic.client.blog.exceptions.GetPostException;
import com.fern.basic.client.blog.types.BlogPost;
import com.fern.basic.client.blog.types.CreatePostRequest;
import com.fern.basic.client.blog.types.PostId;
import com.fern.java.jackson.ClientObjectMappers;
import com.fern.java.jersey.contracts.OptionalAwareContract;
import feign.Feign;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
import feign.jaxrs.JAXRSContract;
import java.lang.String;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/posts")
interface PostsService {
  @POST
  @Path("/create")
  void createPost(CreatePostRequest body) throws CreatePostException;

  @GET
  @Path("/{postId}")
  BlogPost getPost(@PathParam("postId") PostId postId) throws GetPostException;

  static PostsService getClient(String url) {
    return Feign.builder()
        .contract(new OptionalAwareContract(new JAXRSContract()))
        .decoder(new JacksonDecoder(ClientObjectMappers.JSON_MAPPER))
        .encoder(new JacksonEncoder(ClientObjectMappers.JSON_MAPPER))
        .errorDecoder(new PostsServiceErrorDecoder()).target(PostsService.class, url);
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/PostsServiceClient.java]=[
package com.fern.basic.client.blog;

import com.fern.basic.client.blog.endpoints.CreatePost;
import com.fern.basic.client.blog.endpoints.GetPost;
import com.fern.basic.client.blog.exceptions.CreatePostException;
import com.fern.basic.client.blog.exceptions.GetPostException;
import com.fern.basic.client.blog.types.BlogPost;
import java.lang.String;

public final class PostsServiceClient {
  private final PostsService service;

  public PostsServiceClient(String url) {
    this.service = PostsService.getClient(url);
  }

  public void createPost(CreatePost.Request request) throws CreatePostException {
    this.service.createPost(request.getBody());
  }

  public BlogPost getPost(GetPost.Request request) throws GetPostException {
    return this.service.getPost(request.getPostId());
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/PostsServiceErrorDecoder.java]=[
package com.fern.basic.client.blog;

import com.fern.basic.client.blog.exceptions.CreatePostException;
import com.fern.basic.client.blog.exceptions.GetPostException;
import com.fern.java.jackson.ClientObjectMappers;
import feign.Response;
import feign.codec.ErrorDecoder;
import java.io.IOException;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;

final class PostsServiceErrorDecoder implements ErrorDecoder {
  @Override
  public Exception decode(String methodKey, Response response) {
    try {
      if (methodKey.contains("createPost")) {
        return decodeException(response, CreatePostException.class);
      }
      if (methodKey.contains("getPost")) {
        return decodeException(response, GetPostException.class);
      }
    }
    catch (IOException e) {
    }
    return new RuntimeException("Failed to read response body. Received status " + response.status() + " for method " + methodKey);
  }

  private static <T extends Exception> Exception decodeException(Response response, Class<T> clazz)
      throws IOException {
    return ClientObjectMappers.JSON_MAPPER.reader().withAttribute("statusCode", response.status()).readValue(response.body().asInputStream(), clazz);
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/endpoints/CreatePost.java]=[
package com.fern.basic.client.blog.endpoints;

import com.fern.basic.client.blog.types.CreatePostRequest;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public final class CreatePost {
  private CreatePost() {
  }

  public static final class Request {
    private final CreatePostRequest body;

    private int _cachedHashCode;

    Request(CreatePostRequest body) {
      this.body = body;
    }

    public CreatePostRequest getBody() {
      return body;
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof Request && equalTo((Request) other);
    }

    private boolean equalTo(Request other) {
      return body.equals(other.body);
    }

    @Override
    public int hashCode() {
      if (_cachedHashCode == 0) {
        _cachedHashCode = Objects.hash(this.body);
      }
      return _cachedHashCode;
    }

    @Override
    public String toString() {
      return "CreatePost.Request{" + "body: " + body + "}";
    }

    public static BodyStage builder() {
      return new Builder();
    }

    public interface BodyStage {
      _FinalStage body(CreatePostRequest body);

      Builder from(Request other);
    }

    public interface _FinalStage {
      Request build();
    }

    static final class Builder implements BodyStage, _FinalStage {
      private CreatePostRequest body;

      private Builder() {
      }

      @Override
      public Builder from(Request other) {
        body(other.getBody());
        return this;
      }

      @Override
      public _FinalStage body(CreatePostRequest body) {
        this.body = body;
        return this;
      }

      @Override
      public Request build() {
        return new Request(body);
      }
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/endpoints/GetPost.java]=[
package com.fern.basic.client.blog.endpoints;

import com.fern.basic.client.blog.types.PostId;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public final class GetPost {
  private GetPost() {
  }

  public static final class Request {
    private final PostId postId;

    private int _cachedHashCode;

    Request(PostId postId) {
      this.postId = postId;
    }

    public PostId getPostId() {
      return postId;
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof Request && equalTo((Request) other);
    }

    private boolean equalTo(Request other) {
      return postId.equals(other.postId);
    }

    @Override
    public int hashCode() {
      if (_cachedHashCode == 0) {
        _cachedHashCode = Objects.hash(this.postId);
      }
      return _cachedHashCode;
    }

    @Override
    public String toString() {
      return "GetPost.Request{" + "postId: " + postId + "}";
    }

    public static PostIdStage builder() {
      return new Builder();
    }

    public interface PostIdStage {
      _FinalStage postId(PostId postId);

      Builder from(Request other);
    }

    public interface _FinalStage {
      Request build();
    }

    static final class Builder implements PostIdStage, _FinalStage {
      private PostId postId;

      private Builder() {
      }

      @Override
      public Builder from(Request other) {
        postId(other.getPostId());
        return this;
      }

      @Override
      public _FinalStage postId(PostId postId) {
        this.postId = postId;
        return this;
      }

      @Override
      public Request build() {
        return new Request(postId);
      }
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/errors/GeneratorsDoNotExistError.java]=[
package com.fern.basic.client.blog.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fern.basic.client.blog.types.GeneratorIdAndVersion;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;

public final class GeneratorsDoNotExistError {
  private final List<GeneratorIdAndVersion> value;

  private GeneratorsDoNotExistError(List<GeneratorIdAndVersion> value) {
    this.value = value;
  }

  @JsonValue
  public List<GeneratorIdAndVersion> get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof GeneratorsDoNotExistError && this.value.equals(((GeneratorsDoNotExistError) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value.toString();
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static GeneratorsDoNotExistError of(List<GeneratorIdAndVersion> value) {
    return new GeneratorsDoNotExistError(value);
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/errors/PostNotFoundError.java]=[
package com.fern.basic.client.blog.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fern.basic.client.blog.types.PostNotFoundErrorBody;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class PostNotFoundError {
  private final PostNotFoundErrorBody value;

  private PostNotFoundError(PostNotFoundErrorBody value) {
    this.value = value;
  }

  @JsonValue
  public PostNotFoundErrorBody get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof PostNotFoundError && this.value.equals(((PostNotFoundError) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value.toString();
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostNotFoundError of(PostNotFoundErrorBody value) {
    return new PostNotFoundError(value);
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/errors/UnauthorizedError.java]=[
package com.fern.basic.client.blog.errors;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fern.basic.client.blog.types.UnauthorizedErrorBody;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class UnauthorizedError {
  private final UnauthorizedErrorBody value;

  private UnauthorizedError(UnauthorizedErrorBody value) {
    this.value = value;
  }

  @JsonValue
  public UnauthorizedErrorBody get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof UnauthorizedError && this.value.equals(((UnauthorizedError) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value.toString();
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static UnauthorizedError of(UnauthorizedErrorBody value) {
    return new UnauthorizedError(value);
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/exceptions/CreatePostException.java]=[
package com.fern.basic.client.blog.exceptions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    using = CreatePostException.Deserializer.class
)
public final class CreatePostException extends Exception {
  private final Value value;

  private int statusCode;

  private CreatePostException(Value value, int statusCode) {
    this.value = value;
    this.statusCode = statusCode;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public static CreatePostException other(Object unknownValue, int statusCode) {
    return new CreatePostException(new UnknownErrorValue(unknownValue), statusCode);
  }

  public boolean isOther() {
    return value instanceof UnknownErrorValue;
  }

  public Optional<Object> getOther() {
    if (isOther()) {
      return Optional.of(((UnknownErrorValue) value).unknownValue);
    }
    return Optional.empty();
  }

  public interface Visitor<T> {
    T visitOther(Object other);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = UnknownErrorValue.class
  )
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  private static final class UnknownErrorValue implements Value {
    private Object unknownValue;

    @JsonCreator(
        mode = JsonCreator.Mode.DELEGATING
    )
    UnknownErrorValue(@JsonProperty("unknownValue") Object unknownValue) {
      this.unknownValue = unknownValue;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitOther(unknownValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UnknownErrorValue && equalTo((UnknownErrorValue) other);
    }

    private boolean equalTo(UnknownErrorValue other) {
      return unknownValue.equals(other.unknownValue);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.unknownValue);
    }

    @Override
    public String toString() {
      return "CreatePostException{" + "unknownValue: " + unknownValue + "}";
    }
  }

  static final class Deserializer extends JsonDeserializer<CreatePostException> {
    @Override
    public CreatePostException deserialize(JsonParser p, DeserializationContext ctx) throws
        IOException {
      Value value = ctx.readValue(p, Value.class);
      int statusCode = (int) ctx.getAttribute("statusCode");
      return new CreatePostException(value, statusCode);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/exceptions/GetPostException.java]=[
package com.fern.basic.client.blog.exceptions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.basic.client.blog.errors.PostNotFoundError;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import java.util.UUID;

@JsonDeserialize(
    using = GetPostException.Deserializer.class
)
public final class GetPostException extends Exception {
  private final Value value;

  private int statusCode;

  private GetPostException(Value value, int statusCode) {
    this.value = value;
    this.statusCode = statusCode;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public static GetPostException postNotFoundError(PostNotFoundError value) {
    return new GetPostException(new PostNotFoundErrorValue(value), 400);
  }

  public static GetPostException other(Object unknownValue, int statusCode) {
    return new GetPostException(new UnknownErrorValue(unknownValue), statusCode);
  }

  public boolean isPostNotFoundError() {
    return value instanceof PostNotFoundErrorValue;
  }

  public boolean isOther() {
    return value instanceof UnknownErrorValue;
  }

  public Optional<PostNotFoundError> getPostNotFoundError() {
    if (isPostNotFoundError()) {
      return Optional.of(((PostNotFoundErrorValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> getOther() {
    if (isOther()) {
      return Optional.of(((UnknownErrorValue) value).unknownValue);
    }
    return Optional.empty();
  }

  public interface Visitor<T> {
    T visitPostNotFoundError(PostNotFoundError postNotFoundError);

    T visitOther(Object other);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = UnknownErrorValue.class
  )
  @JsonSubTypes(@JsonSubTypes.Type(PostNotFoundErrorValue.class))
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("PostNotFoundError")
  private static final class PostNotFoundErrorValue implements Value {
    private PostNotFoundError value;

    private String errorInstanceId;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private PostNotFoundErrorValue(@JsonProperty("value") PostNotFoundError value,
        @JsonProperty("_errorInstanceId") String errorInstanceId) {
      this.value = value;
      this.errorInstanceId = errorInstanceId;
    }

    private PostNotFoundErrorValue(PostNotFoundError value) {
      this.value = value;
      this.errorInstanceId = UUID.randomUUID().toString();
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitPostNotFoundError(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof PostNotFoundErrorValue && equalTo((PostNotFoundErrorValue) other);
    }

    private boolean equalTo(PostNotFoundErrorValue other) {
      return value.equals(other.value) && errorInstanceId.equals(other.errorInstanceId);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value, this.errorInstanceId);
    }

    @Override
    public String toString() {
      return "GetPostException{" + "value: " + value + ", errorInstanceId: " + errorInstanceId + "}";
    }
  }

  private static final class UnknownErrorValue implements Value {
    private Object unknownValue;

    @JsonCreator(
        mode = JsonCreator.Mode.DELEGATING
    )
    UnknownErrorValue(@JsonProperty("unknownValue") Object unknownValue) {
      this.unknownValue = unknownValue;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitOther(unknownValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UnknownErrorValue && equalTo((UnknownErrorValue) other);
    }

    private boolean equalTo(UnknownErrorValue other) {
      return unknownValue.equals(other.unknownValue);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.unknownValue);
    }

    @Override
    public String toString() {
      return "GetPostException{" + "unknownValue: " + unknownValue + "}";
    }
  }

  static final class Deserializer extends JsonDeserializer<GetPostException> {
    @Override
    public GetPostException deserialize(JsonParser p, DeserializationContext ctx) throws
        IOException {
      Value value = ctx.readValue(p, Value.class);
      int statusCode = (int) ctx.getAttribute("statusCode");
      return new GetPostException(value, statusCode);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/Age.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class Age {
  private final int value;

  private Age(int value) {
    this.value = value;
  }

  @JsonValue
  public int get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof Age && this.value == ((Age) other).value);
  }

  @Override
  public int hashCode() {
    return Integer.hashCode(value);
  }

  @Override
  public String toString() {
    return Integer.toString(value);
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static Age of(int value) {
    return new Age(value);
  }

  public static Age valueOf(String value) {
    return of(Integer.parseInt(value));
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/Author.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class Author {
  private final Value value;

  private Author(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static Author anonymous() {
    return new Author(new AnonymousValue());
  }

  public static Author name(String value) {
    return new Author(new NameValue(value));
  }

  public boolean isAnonymous() {
    return value instanceof AnonymousValue;
  }

  public boolean isName() {
    return value instanceof NameValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<String> getName() {
    if (isName()) {
      return Optional.of(((NameValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitAnonymous();

    T visitName(String name);

    T _visitUnknown(Object unknown);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(AnonymousValue.class),
      @JsonSubTypes.Type(NameValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("anonymous")
  private static final class AnonymousValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private AnonymousValue() {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitAnonymous();
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof AnonymousValue;
    }

    @Override
    public String toString() {
      return "Author{" + "}";
    }
  }

  @JsonTypeName("name")
  private static final class NameValue implements Value {
    private String value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private NameValue(@JsonProperty("value") String value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitName(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof NameValue && equalTo((NameValue) other);
    }

    private boolean equalTo(NameValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "type: " + type + ", value: " + value + "}";
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/BlogPost.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = BlogPost.Builder.class
)
public final class BlogPost {
  private final PostId id;

  private final PostType type;

  private final String title;

  private final Author author;

  private final String content;

  private int _cachedHashCode;

  BlogPost(PostId id, PostType type, String title, Author author, String content) {
    this.id = id;
    this.type = type;
    this.title = title;
    this.author = author;
    this.content = content;
  }

  @JsonProperty("id")
  public PostId getId() {
    return id;
  }

  @JsonProperty("type")
  public PostType getType() {
    return type;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BlogPost && equalTo((BlogPost) other);
  }

  private boolean equalTo(BlogPost other) {
    return id.equals(other.id) && type.equals(other.type) && title.equals(other.title) && author.equals(other.author) && content.equals(other.content);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.type, this.title, this.author, this.content);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BlogPost{" + "id: " + id + ", type: " + type + ", title: " + title + ", author: " + author + ", content: " + content + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    TypeStage id(PostId id);

    Builder from(BlogPost other);
  }

  public interface TypeStage {
    TitleStage type(PostType type);
  }

  public interface TitleStage {
    AuthorStage title(String title);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    _FinalStage content(String content);
  }

  public interface _FinalStage {
    BlogPost build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements IdStage, TypeStage, TitleStage, AuthorStage, ContentStage, _FinalStage {
    private PostId id;

    private PostType type;

    private String title;

    private Author author;

    private String content;

    private Builder() {
    }

    @Override
    public Builder from(BlogPost other) {
      id(other.getId());
      type(other.getType());
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      return this;
    }

    @Override
    @JsonSetter("id")
    public TypeStage id(PostId id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("type")
    public TitleStage type(PostType type) {
      this.type = type;
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public _FinalStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    public BlogPost build() {
      return new BlogPost(id, type, title, author, content);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/CreatePostRequest.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = CreatePostRequest.Builder.class
)
public final class CreatePostRequest {
  private final String title;

  private final Author author;

  private final String content;

  private final PostType postType;

  private final int _switch;

  private int _cachedHashCode;

  CreatePostRequest(String title, Author author, String content, PostType postType, int _switch) {
    this.title = title;
    this.author = author;
    this.content = content;
    this.postType = postType;
    this._switch = _switch;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @JsonProperty("postType")
  public PostType getPostType() {
    return postType;
  }

  @JsonProperty("switch")
  public int getSwitch() {
    return _switch;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreatePostRequest && equalTo((CreatePostRequest) other);
  }

  private boolean equalTo(CreatePostRequest other) {
    return title.equals(other.title) && author.equals(other.author) && content.equals(other.content) && postType.equals(other.postType) && _switch == other._switch;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.title, this.author, this.content, this.postType, this._switch);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "CreatePostRequest{" + "title: " + title + ", author: " + author + ", content: " + content + ", postType: " + postType + ", _switch: " + _switch + "}";
  }

  public static TitleStage builder() {
    return new Builder();
  }

  public interface TitleStage {
    AuthorStage title(String title);

    Builder from(CreatePostRequest other);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    PostTypeStage content(String content);
  }

  public interface PostTypeStage {
    SwitchStage postType(PostType postType);
  }

  public interface SwitchStage {
    _FinalStage _switch(int _switch);
  }

  public interface _FinalStage {
    CreatePostRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements TitleStage, AuthorStage, ContentStage, PostTypeStage, SwitchStage, _FinalStage {
    private String title;

    private Author author;

    private String content;

    private PostType postType;

    private int _switch;

    private Builder() {
    }

    @Override
    public Builder from(CreatePostRequest other) {
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      postType(other.getPostType());
      _switch(other.getSwitch());
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public PostTypeStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    @JsonSetter("postType")
    public SwitchStage postType(PostType postType) {
      this.postType = postType;
      return this;
    }

    @Override
    @JsonSetter("switch")
    public _FinalStage _switch(int _switch) {
      this._switch = _switch;
      return this;
    }

    @Override
    public CreatePostRequest build() {
      return new CreatePostRequest(title, author, content, postType, _switch);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/GeneratorIdAndVersion.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = GeneratorIdAndVersion.Builder.class
)
public final class GeneratorIdAndVersion {
  private final String id;

  private final String version;

  private int _cachedHashCode;

  GeneratorIdAndVersion(String id, String version) {
    this.id = id;
    this.version = version;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("version")
  public String getVersion() {
    return version;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GeneratorIdAndVersion && equalTo((GeneratorIdAndVersion) other);
  }

  private boolean equalTo(GeneratorIdAndVersion other) {
    return id.equals(other.id) && version.equals(other.version);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.version);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "GeneratorIdAndVersion{" + "id: " + id + ", version: " + version + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    VersionStage id(String id);

    Builder from(GeneratorIdAndVersion other);
  }

  public interface VersionStage {
    _FinalStage version(String version);
  }

  public interface _FinalStage {
    GeneratorIdAndVersion build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements IdStage, VersionStage, _FinalStage {
    private String id;

    private String version;

    private Builder() {
    }

    @Override
    public Builder from(GeneratorIdAndVersion other) {
      id(other.getId());
      version(other.getVersion());
      return this;
    }

    @Override
    @JsonSetter("id")
    public VersionStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("version")
    public _FinalStage version(String version) {
      this.version = version;
      return this;
    }

    @Override
    public GeneratorIdAndVersion build() {
      return new GeneratorIdAndVersion(id, version);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/PostId.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class PostId {
  private final String value;

  private PostId(String value) {
    this.value = value;
  }

  @JsonValue
  public String get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof PostId && this.value.equals(((PostId) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value;
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostId of(String value) {
    return new PostId(value);
  }

  public static PostId valueOf(String value) {
    return of(value);
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/PostNotFoundErrorBody.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = PostNotFoundErrorBody.Builder.class
)
public final class PostNotFoundErrorBody {
  private final PostId id;

  private int _cachedHashCode;

  PostNotFoundErrorBody(PostId id) {
    this.id = id;
  }

  @JsonProperty("id")
  public PostId getId() {
    return id;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PostNotFoundErrorBody && equalTo((PostNotFoundErrorBody) other);
  }

  private boolean equalTo(PostNotFoundErrorBody other) {
    return id.equals(other.id);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "PostNotFoundErrorBody{" + "id: " + id + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    _FinalStage id(PostId id);

    Builder from(PostNotFoundErrorBody other);
  }

  public interface _FinalStage {
    PostNotFoundErrorBody build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements IdStage, _FinalStage {
    private PostId id;

    private Builder() {
    }

    @Override
    public Builder from(PostNotFoundErrorBody other) {
      id(other.getId());
      return this;
    }

    @Override
    @JsonSetter("id")
    public _FinalStage id(PostId id) {
      this.id = id;
      return this;
    }

    @Override
    public PostNotFoundErrorBody build() {
      return new PostNotFoundErrorBody(id);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/PostType.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;

public final class PostType {
  public static final PostType LONG = new PostType(Value.LONG, "LONG");

  public static final PostType SHORT = new PostType(Value.SHORT, "SHORT");

  public static final PostType MEDIUM = new PostType(Value.MEDIUM, "med.med");

  private final Value value;

  private final String string;

  PostType(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof PostType && this.string.equals(((PostType) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case LONG:
        return visitor.visitLong();
      case SHORT:
        return visitor.visitShort();
      case MEDIUM:
        return visitor.visitMedium();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostType valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "LONG":
        return LONG;
      case "SHORT":
        return SHORT;
      case "med.med":
        return MEDIUM;
      default:
        return new PostType(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    LONG,

    SHORT,

    MEDIUM,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitLong();

    T visitShort();

    T visitMedium();

    T visitUnknown(String unknownType);
  }
}

]


basic[src/main/java/com/fern/basic/client/blog/types/UnauthorizedErrorBody.java]=[
package com.fern.basic.client.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = UnauthorizedErrorBody.Builder.class
)
public final class UnauthorizedErrorBody {
  private final String reason;

  private int _cachedHashCode;

  UnauthorizedErrorBody(String reason) {
    this.reason = reason;
  }

  @JsonProperty("reason")
  public String getReason() {
    return reason;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UnauthorizedErrorBody && equalTo((UnauthorizedErrorBody) other);
  }

  private boolean equalTo(UnauthorizedErrorBody other) {
    return reason.equals(other.reason);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.reason);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "UnauthorizedErrorBody{" + "reason: " + reason + "}";
  }

  public static ReasonStage builder() {
    return new Builder();
  }

  public interface ReasonStage {
    _FinalStage reason(String reason);

    Builder from(UnauthorizedErrorBody other);
  }

  public interface _FinalStage {
    UnauthorizedErrorBody build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  static final class Builder implements ReasonStage, _FinalStage {
    private String reason;

    private Builder() {
    }

    @Override
    public Builder from(UnauthorizedErrorBody other) {
      reason(other.getReason());
      return this;
    }

    @Override
    @JsonSetter("reason")
    public _FinalStage reason(String reason) {
      this.reason = reason;
      return this;
    }

    @Override
    public UnauthorizedErrorBody build() {
      return new UnauthorizedErrorBody(reason);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/dummy/service/DummyService.java]=[
package com.fern.basic.client.dummy.service;

import com.fern.basic.client.dummy.service.exceptions.GetDummyException;
import com.fern.basic.client.dummy.service.exceptions.HealthException;
import com.fern.basic.client.dummy.service.types.DummyId;
import com.fern.java.jackson.ClientObjectMappers;
import com.fern.java.jersey.contracts.OptionalAwareContract;
import feign.Feign;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
import feign.jaxrs.JAXRSContract;
import java.lang.String;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.Path;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/dummy")
interface DummyService {
  @GET
  @Path("/")
  void getDummy(DummyId body) throws GetDummyException;

  @GET
  @Path("/health")
  void health() throws HealthException;

  static DummyService getClient(String url) {
    return Feign.builder()
        .contract(new OptionalAwareContract(new JAXRSContract()))
        .decoder(new JacksonDecoder(ClientObjectMappers.JSON_MAPPER))
        .encoder(new JacksonEncoder(ClientObjectMappers.JSON_MAPPER))
        .errorDecoder(new DummyServiceErrorDecoder()).target(DummyService.class, url);
  }
}

]


basic[src/main/java/com/fern/basic/client/dummy/service/DummyServiceClient.java]=[
package com.fern.basic.client.dummy.service;

import com.fern.basic.client.dummy.service.endpoints.GetDummy;
import com.fern.basic.client.dummy.service.exceptions.GetDummyException;
import com.fern.basic.client.dummy.service.exceptions.HealthException;
import java.lang.String;

public final class DummyServiceClient {
  private final DummyService service;

  public DummyServiceClient(String url) {
    this.service = DummyService.getClient(url);
  }

  public void getDummy(GetDummy.Request request) throws GetDummyException {
    this.service.getDummy(request.getBody());
  }

  public void health() throws HealthException {
    this.service.health();
  }
}

]


basic[src/main/java/com/fern/basic/client/dummy/service/DummyServiceErrorDecoder.java]=[
package com.fern.basic.client.dummy.service;

import com.fern.basic.client.dummy.service.exceptions.GetDummyException;
import com.fern.basic.client.dummy.service.exceptions.HealthException;
import com.fern.java.jackson.ClientObjectMappers;
import feign.Response;
import feign.codec.ErrorDecoder;
import java.io.IOException;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;

final class DummyServiceErrorDecoder implements ErrorDecoder {
  @Override
  public Exception decode(String methodKey, Response response) {
    try {
      if (methodKey.contains("getDummy")) {
        return decodeException(response, GetDummyException.class);
      }
      if (methodKey.contains("health")) {
        return decodeException(response, HealthException.class);
      }
    }
    catch (IOException e) {
    }
    return new RuntimeException("Failed to read response body. Received status " + response.status() + " for method " + methodKey);
  }

  private static <T extends Exception> Exception decodeException(Response response, Class<T> clazz)
      throws IOException {
    return ClientObjectMappers.JSON_MAPPER.reader().withAttribute("statusCode", response.status()).readValue(response.body().asInputStream(), clazz);
  }
}

]


basic[src/main/java/com/fern/basic/client/dummy/service/endpoints/GetDummy.java]=[
package com.fern.basic.client.dummy.service.endpoints;

import com.fern.basic.client.dummy.service.types.DummyId;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

public final class GetDummy {
  private GetDummy() {
  }

  public static final class Request {
    private final DummyId body;

    private int _cachedHashCode;

    Request(DummyId body) {
      this.body = body;
    }

    public DummyId getBody() {
      return body;
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof Request && equalTo((Request) other);
    }

    private boolean equalTo(Request other) {
      return body.equals(other.body);
    }

    @Override
    public int hashCode() {
      if (_cachedHashCode == 0) {
        _cachedHashCode = Objects.hash(this.body);
      }
      return _cachedHashCode;
    }

    @Override
    public String toString() {
      return "GetDummy.Request{" + "body: " + body + "}";
    }

    public static BodyStage builder() {
      return new Builder();
    }

    public interface BodyStage {
      _FinalStage body(DummyId body);

      Builder from(Request other);
    }

    public interface _FinalStage {
      Request build();
    }

    static final class Builder implements BodyStage, _FinalStage {
      private DummyId body;

      private Builder() {
      }

      @Override
      public Builder from(Request other) {
        body(other.getBody());
        return this;
      }

      @Override
      public _FinalStage body(DummyId body) {
        this.body = body;
        return this;
      }

      @Override
      public Request build() {
        return new Request(body);
      }
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/dummy/service/exceptions/GetDummyException.java]=[
package com.fern.basic.client.dummy.service.exceptions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    using = GetDummyException.Deserializer.class
)
public final class GetDummyException extends Exception {
  private final Value value;

  private int statusCode;

  private GetDummyException(Value value, int statusCode) {
    this.value = value;
    this.statusCode = statusCode;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public static GetDummyException other(Object unknownValue, int statusCode) {
    return new GetDummyException(new UnknownErrorValue(unknownValue), statusCode);
  }

  public boolean isOther() {
    return value instanceof UnknownErrorValue;
  }

  public Optional<Object> getOther() {
    if (isOther()) {
      return Optional.of(((UnknownErrorValue) value).unknownValue);
    }
    return Optional.empty();
  }

  public interface Visitor<T> {
    T visitOther(Object other);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = UnknownErrorValue.class
  )
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  private static final class UnknownErrorValue implements Value {
    private Object unknownValue;

    @JsonCreator(
        mode = JsonCreator.Mode.DELEGATING
    )
    UnknownErrorValue(@JsonProperty("unknownValue") Object unknownValue) {
      this.unknownValue = unknownValue;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitOther(unknownValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UnknownErrorValue && equalTo((UnknownErrorValue) other);
    }

    private boolean equalTo(UnknownErrorValue other) {
      return unknownValue.equals(other.unknownValue);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.unknownValue);
    }

    @Override
    public String toString() {
      return "GetDummyException{" + "unknownValue: " + unknownValue + "}";
    }
  }

  static final class Deserializer extends JsonDeserializer<GetDummyException> {
    @Override
    public GetDummyException deserialize(JsonParser p, DeserializationContext ctx) throws
        IOException {
      Value value = ctx.readValue(p, Value.class);
      int statusCode = (int) ctx.getAttribute("statusCode");
      return new GetDummyException(value, statusCode);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/dummy/service/exceptions/HealthException.java]=[
package com.fern.basic.client.dummy.service.exceptions;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.JsonDeserializer;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.io.IOException;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    using = HealthException.Deserializer.class
)
public final class HealthException extends Exception {
  private final Value value;

  private int statusCode;

  private HealthException(Value value, int statusCode) {
    this.value = value;
    this.statusCode = statusCode;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public int getStatusCode() {
    return this.statusCode;
  }

  public static HealthException other(Object unknownValue, int statusCode) {
    return new HealthException(new UnknownErrorValue(unknownValue), statusCode);
  }

  public boolean isOther() {
    return value instanceof UnknownErrorValue;
  }

  public Optional<Object> getOther() {
    if (isOther()) {
      return Optional.of(((UnknownErrorValue) value).unknownValue);
    }
    return Optional.empty();
  }

  public interface Visitor<T> {
    T visitOther(Object other);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "_error",
      visible = true,
      defaultImpl = UnknownErrorValue.class
  )
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  private static final class UnknownErrorValue implements Value {
    private Object unknownValue;

    @JsonCreator(
        mode = JsonCreator.Mode.DELEGATING
    )
    UnknownErrorValue(@JsonProperty("unknownValue") Object unknownValue) {
      this.unknownValue = unknownValue;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitOther(unknownValue);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof UnknownErrorValue && equalTo((UnknownErrorValue) other);
    }

    private boolean equalTo(UnknownErrorValue other) {
      return unknownValue.equals(other.unknownValue);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.unknownValue);
    }

    @Override
    public String toString() {
      return "HealthException{" + "unknownValue: " + unknownValue + "}";
    }
  }

  static final class Deserializer extends JsonDeserializer<HealthException> {
    @Override
    public HealthException deserialize(JsonParser p, DeserializationContext ctx) throws
        IOException {
      Value value = ctx.readValue(p, Value.class);
      int statusCode = (int) ctx.getAttribute("statusCode");
      return new HealthException(value, statusCode);
    }
  }
}

]


basic[src/main/java/com/fern/basic/client/dummy/service/types/DummyId.java]=[
package com.fern.basic.client.dummy.service.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;

public final class DummyId {
  private final String value;

  private DummyId(String value) {
    this.value = value;
  }

  @JsonValue
  public String get() {
    return this.value;
  }

  @Override
  public boolean equals(Object other) {
    return this == other || (other instanceof DummyId && this.value.equals(((DummyId) other).value));
  }

  @Override
  public int hashCode() {
    return value.hashCode();
  }

  @Override
  public String toString() {
    return value;
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static DummyId of(String value) {
    return new DummyId(value);
  }

  public static DummyId valueOf(String value) {
    return of(value);
  }
}

]