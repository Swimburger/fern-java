basic[.gitignore]=[
*.class
.project
.gradle
?
.classpath
.checkstyle
.settings
.node
build

# IntelliJ
*.iml
*.ipr
*.iws
.idea/
out/

# Eclipse/IntelliJ APT
generated_src/
generated_testSrc/
generated/

bin
build
]


basic[gradle/wrapper/gradle-wrapper.jar]=[
gradle/wrapper/gradle-wrapper.jar
]


basic[gradle/wrapper/gradle-wrapper.properties]=[
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists

]


basic[gradlew]=[
#!/bin/sh

#
# Copyright © 2015-2021 the original authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
#
#   Gradle start up script for POSIX generated by Gradle.
#
#   Important for running:
#
#   (1) You need a POSIX-compliant shell to run this script. If your /bin/sh is
#       noncompliant, but you have some other compliant shell such as ksh or
#       bash, then to run this script, type that shell name before the whole
#       command line, like:
#
#           ksh Gradle
#
#       Busybox and similar reduced shells will NOT work, because this script
#       requires all of these POSIX shell features:
#         * functions;
#         * expansions «$var», «${var}», «${var:-default}», «${var+SET}»,
#           «${var#prefix}», «${var%suffix}», and «$( cmd )»;
#         * compound commands having a testable exit status, especially «case»;
#         * various built-in commands including «command», «set», and «ulimit».
#
#   Important for patching:
#
#   (2) This script targets any POSIX shell, so it avoids extensions provided
#       by Bash, Ksh, etc; in particular arrays are avoided.
#
#       The "traditional" practice of packing multiple parameters into a
#       space-separated string is a well documented source of bugs and security
#       problems, so this is (mostly) avoided, by progressively accumulating
#       options in "$@", and eventually passing that to Java.
#
#       Where the inherited environment variables (DEFAULT_JVM_OPTS, JAVA_OPTS,
#       and GRADLE_OPTS) rely on word-splitting, this is performed explicitly;
#       see the in-line comments for details.
#
#       There are tweaks for specific operating systems such as AIX, CygWin,
#       Darwin, MinGW, and NonStop.
#
#   (3) This script is generated from the Groovy template
#       https://github.com/gradle/gradle/blob/master/subprojects/plugins/src/main/resources/org/gradle/api/internal/plugins/unixStartScript.txt
#       within the Gradle project.
#
#       You can find Gradle at https://github.com/gradle/gradle/.
#
##############################################################################

# Attempt to set APP_HOME

# Resolve links: $0 may be a link
app_path=$0

# Need this for daisy-chained symlinks.
while
    APP_HOME=${app_path%"${app_path##*/}"}  # leaves a trailing /; empty if no leading path
    [ -h "$app_path" ]
do
    ls=$( ls -ld "$app_path" )
    link=${ls#*' -> '}
    case $link in             #(
      /*)   app_path=$link ;; #(
      *)    app_path=$APP_HOME$link ;;
    esac
done

APP_HOME=$( cd "${APP_HOME:-./}" && pwd -P ) || exit

APP_NAME="Gradle"
APP_BASE_NAME=${0##*/}

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD=maximum

warn () {
    echo "$*"
} >&2

die () {
    echo
    echo "$*"
    echo
    exit 1
} >&2

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "$( uname )" in                #(
  CYGWIN* )         cygwin=true  ;; #(
  Darwin* )         darwin=true  ;; #(
  MSYS* | MINGW* )  msys=true    ;; #(
  NONSTOP* )        nonstop=true ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
.
.
# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD=$JAVA_HOME/jre/sh/java
    else
        JAVACMD=$JAVA_HOME/bin/java
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD=java
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if ! "$cygwin" && ! "$darwin" && ! "$nonstop" ; then
    case $MAX_FD in #(
      max*)
        MAX_FD=$( ulimit -H -n ) ||
            warn "Could not query maximum file descriptor limit"
    esac
    case $MAX_FD in  #(
      '' | soft) :;; #(
      *)
        ulimit -n "$MAX_FD" ||
            warn "Could not set maximum file descriptor limit to $MAX_FD"
    esac
fi

# Collect all arguments for the java command, stacking in reverse order:
#   * args from the command line
#   * the main class name
#   * -classpath
#   * -D...appname settings
#   * --module-path (only if needed)
#   * DEFAULT_JVM_OPTS, JAVA_OPTS, and GRADLE_OPTS environment variables.

# For Cygwin or MSYS, switch paths to Windows format before running java
if "$cygwin" || "$msys" ; then
    APP_HOME=$( cygpath --path --mixed "$APP_HOME" )
    CLASSPATH=$( cygpath --path --mixed "$CLASSPATH" )

    JAVACMD=$( cygpath --unix "$JAVACMD" )

    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    for arg do
        if
            case $arg in                                #(
              -*)   false ;;                            # don't mess with options #(
              /?*)  t=${arg#/} t=/${t%%/*}              # looks like a POSIX filepath
                    [ -e "$t" ] ;;                      #(
              *)    false ;;
            esac
        then
            arg=$( cygpath --path --ignore --mixed "$arg" )
        fi
        # Roll the args list around exactly as many times as the number of
        # args, so each arg winds up back in the position where it started, but
        # possibly modified.
        #
        # NB: a `for` loop captures its iteration list before it begins, so
        # changing the positional parameters here affects neither the number of
        # iterations, nor the values presented in `arg`.
        shift                   # remove old arg
        set -- "$@" "$arg"      # push replacement arg
    done
fi

# Collect all arguments for the java command;
#   * $DEFAULT_JVM_OPTS, $JAVA_OPTS, and $GRADLE_OPTS can contain fragments of
#     shell script including quotes and variable substitutions, so put them in
#     double quotes to make sure that they get re-expanded; and
#   * put everything else in single quotes, so that it's not re-expanded.

set -- \
        "-Dorg.gradle.appname=$APP_BASE_NAME" \
        -classpath "$CLASSPATH" \
        org.gradle.wrapper.GradleWrapperMain \
        "$@"

# Use "xargs" to parse quoted args.
#
# With -n1 it outputs one arg per line, with the quotes and backslashes removed.
#
# In Bash we could simply go:
#
#   readarray ARGS < <( xargs -n1 <<<"$var" ) &&
#   set -- "${ARGS[@]}" "$@"
#
# but POSIX shell has neither arrays nor command substitution, so instead we
# post-process each arg (as a line of input to sed) to backslash-escape any
# character that might be a shell metacharacter, then use eval to reverse
# that process (while maintaining the separation between arguments), and wrap
# the whole thing up as a single "set" statement.
#
# This will of course break if any of these variables contains a newline or
# an unmatched quote.
#

eval "set -- $(
        printf '%s\n' "$DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS" |
        xargs -n1 |
        sed ' s~[^-[:alnum:]+,./:=@_]~\\&~g; ' |
        tr '\n' ' '
    )" '"$@"'

exec "$JAVACMD" "$@"

]


basic[src/main/java/com/fern/basic/FernFernClient.java]=[
package com.fern.basic;

import com.fern.basic.core.Environment;
import com.fern.basic.resources.auth.AuthClient;
import com.fern.basic.resources.blog.BlogClient;
import com.fern.basic.resources.dummyservice.DummyServiceClient;
import com.fern.basic.resources.raven.RavenClient;

public interface FernFernClient {
  AuthClient auth();

  BlogClient blog();

  DummyServiceClient dummyService();

  RavenClient raven();

  static Builder builder() {
    return new FernFernClientImpl.Builder();
  }

  interface Builder {
    Builder token(String token);

    Builder apiVersion(String apiVersion);

    Builder environment(Environment environment);

    Builder url(String url);

    FernFernClient build();
  }
}

]


basic[src/main/java/com/fern/basic/FernFernClientImpl.java]=[
package com.fern.basic;

import com.fern.basic.core.ClientOptions;
import com.fern.basic.core.Environment;
import com.fern.basic.core.Suppliers;
import com.fern.basic.resources.auth.AuthClient;
import com.fern.basic.resources.auth.AuthClientImpl;
import com.fern.basic.resources.blog.BlogClient;
import com.fern.basic.resources.blog.BlogClientImpl;
import com.fern.basic.resources.dummyservice.DummyServiceClient;
import com.fern.basic.resources.dummyservice.DummyServiceClientImpl;
import com.fern.basic.resources.raven.RavenClient;
import com.fern.basic.resources.raven.RavenClientImpl;
import java.util.function.Supplier;

public final class FernFernClientImpl implements FernFernClient {
  private final ClientOptions clientOptions;

  private final Supplier<AuthClient> authClient;

  private final Supplier<BlogClient> blogClient;

  private final Supplier<DummyServiceClient> dummyServiceClient;

  private final Supplier<RavenClient> ravenClient;

  public FernFernClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.authClient = Suppliers.memoize(() -> new AuthClientImpl(clientOptions));
    this.blogClient = Suppliers.memoize(() -> new BlogClientImpl(clientOptions));
    this.dummyServiceClient = Suppliers.memoize(() -> new DummyServiceClientImpl(clientOptions));
    this.ravenClient = Suppliers.memoize(() -> new RavenClientImpl(clientOptions));
  }

  @Override
  public AuthClient auth() {
    return this.authClient.get();
  }

  @Override
  public BlogClient blog() {
    return this.blogClient.get();
  }

  @Override
  public DummyServiceClient dummyService() {
    return this.dummyServiceClient.get();
  }

  @Override
  public RavenClient raven() {
    return this.ravenClient.get();
  }

  public static final class Builder implements FernFernClient.Builder {
    ClientOptions.Builder clientOptionsBuilder = ClientOptions.builder();

    Environment environment = Environment.PROD;

    @Override
    public FernFernClient.Builder token(String token) {
      this.clientOptionsBuilder.addHeader("Authorization", "Bearer " + token);
      return this;
    }

    @Override
    public FernFernClient.Builder apiVersion(String apiVersion) {
      this.clientOptionsBuilder.addHeader("API-VERSION", apiVersion);
      return this;
    }

    @Override
    public FernFernClient.Builder environment(Environment environment) {
      this.environment = environment;
      return this;
    }

    @Override
    public FernFernClient.Builder url(String url) {
      this.environment = Environment.custom(url);
      return this;
    }

    @Override
    public FernFernClient build() {
      clientOptionsBuilder.environment(this.environment);
      return new FernFernClientImpl(clientOptionsBuilder.build());
    }
  }
}

]


basic[src/main/java/com/fern/basic/core/ClientOptions.java]=[
package com.fern.basic.core;

import java.util.HashMap;
import java.util.Map;
import okhttp3.OkHttpClient;

public final class ClientOptions {
  private final Environment environment;

  private final Map<String, String> headers;

  private final OkHttpClient httpClient;

  private ClientOptions(
      Environment environment, Map<String, String> headers, OkHttpClient httpClient) {
    this.environment = environment;
    this.headers = headers;
    this.httpClient = httpClient;
  }

  public Environment environment() {
    return this.environment;
  }

  public Map<String, String> headers() {
    return this.headers;
  }

  public OkHttpClient httpClient() {
    return this.httpClient;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Environment environment;

    private final Map<String, String> headers = new HashMap<>();

    public Builder environment(Environment environment) {
      this.environment = environment;
      return this;
    }

    public Builder addHeader(String key, String value) {
      this.headers.put(key, value);
      return this;
    }

    public ClientOptions build() {
      return new ClientOptions(environment, headers, new OkHttpClient());
    }
  }
}

]


basic[src/main/java/com/fern/basic/core/Environment.java]=[
package com.fern.basic.core;

public final class Environment {
  public static final Environment PROD = new Environment("prod.com");

  public static final Environment STAGING = new Environment("staging.com");

  private final String url;

  private Environment(String url) {
    this.url = url;
  }

  public String getUrl() {
    return this.url;
  }

  public static Environment custom(String url) {
    return new Environment(url);
  }
}

]


basic[src/main/java/com/fern/basic/core/ObjectMappers.java]=[
package com.fern.basic.core;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;

public final class ObjectMappers {
  public static final ObjectMapper JSON_MAPPER =
      JsonMapper.builder()
          .addModule(new Jdk8Module())
          .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
          .build();

  private ObjectMappers() {}
}

]


basic[src/main/java/com/fern/basic/core/Suppliers.java]=[
package com.fern.basic.core;

import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Supplier;

public final class Suppliers {
  private Suppliers() {}

  public static <T> Supplier<T> memoize(Supplier<T> delegate) {
    AtomicReference<T> value = new AtomicReference<>();
    return () -> {
      T val = value.get();
      if (val == null) {
        val = value.updateAndGet(cur -> cur == null ? Objects.requireNonNull(delegate.get()) : cur);
      }
      return val;
    };
  }
}

]


basic[src/main/java/com/fern/basic/resources/auth/AuthClient.java]=[
package com.fern.basic.resources.auth;

public interface AuthClient {
  void getAuth();
}

]


basic[src/main/java/com/fern/basic/resources/auth/AuthClientImpl.java]=[
package com.fern.basic.resources.auth;

import com.fern.basic.core.ClientOptions;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;

public final class AuthClientImpl implements AuthClient {
  private final ClientOptions clientOptions;

  public AuthClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public void getAuth() {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("auth")
            .build();
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/auth/types/PropertyValue.java]=[
package com.fern.basic.resources.auth.types;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fern.basic.core.ObjectMappers;
import com.fern.basic.resources.blog.types.Author;
import java.io.IOException;
import java.util.List;
import java.util.Objects;

@JsonDeserialize(using = PropertyValue.Deserializer.class)
public final class PropertyValue {
  private final Object value;

  private final int type;

  private PropertyValue(Object value, int type) {
    this.value = value;
    this.type = type;
  }

  @JsonValue
  public Object get() {
    return this.value;
  }

  public <T> T visit(Visitor<T> visitor) {
    if (this.type == 0) {
      return visitor.visit((List<String>) this.value);
    } else if (this.type == 1) {
      return visitor.visit((String) this.value);
    } else if (this.type == 2) {
      return visitor.visit((Author) this.value);
    } else if (this.type == 3) {
      return visitor.visit((double) this.value);
    }
    throw new IllegalStateException("Failed to visit value. This should never happen.");
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PropertyValue && equalTo((PropertyValue) other);
  }

  private boolean equalTo(PropertyValue other) {
    return value.equals(other.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.value);
  }

  @Override
  public String toString() {
    return this.value.toString();
  }

  public static PropertyValue of(List<String> value) {
    return new PropertyValue(value, 0);
  }

  public static PropertyValue of(String value) {
    return new PropertyValue(value, 1);
  }

  public static PropertyValue of(Author value) {
    return new PropertyValue(value, 2);
  }

  public static PropertyValue of(double value) {
    return new PropertyValue(value, 3);
  }

  public interface Visitor<T> {
    T visit(List<String> value);

    T visit(String value);

    T visit(Author value);

    T visit(double value);
  }

  static final class Deserializer extends StdDeserializer<PropertyValue> {
    Deserializer() {
      super(PropertyValue.class);
    }

    @Override
    public PropertyValue deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
      Object value = p.readValueAs(Object.class);
      try {
        return of(
            ObjectMappers.JSON_MAPPER.convertValue(value, new TypeReference<List<String>>() {}));
      } catch (IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, String.class));
      } catch (IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, Author.class));
      } catch (IllegalArgumentException e) {
      }
      if (value instanceof Double) {
        return of((Double) value);
      }
      throw new JsonParseException(p, "Failed to deserialize");
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/BlogClient.java]=[
package com.fern.basic.resources.blog;

import com.fern.basic.resources.blog.requests.CreatePostRequest;
import com.fern.basic.resources.blog.requests.GetPostRequest;
import com.fern.basic.resources.blog.types.BlogPost;
import java.util.List;

public interface BlogClient {
  void createPost(CreatePostRequest request);

  BlogPost getPost(String postId, GetPostRequest request);

  List<BlogPost> getAll();
}

]


basic[src/main/java/com/fern/basic/resources/blog/BlogClientImpl.java]=[
package com.fern.basic.resources.blog;

import com.fasterxml.jackson.core.type.TypeReference;
import com.fern.basic.core.ClientOptions;
import com.fern.basic.core.ObjectMappers;
import com.fern.basic.resources.blog.requests.CreatePostRequest;
import com.fern.basic.resources.blog.requests.GetPostRequest;
import com.fern.basic.resources.blog.types.BlogPost;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public final class BlogClientImpl implements BlogClient {
  private final ClientOptions clientOptions;

  public BlogClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public void createPost(CreatePostRequest request) {
    HttpUrl.Builder _httpUrlBuilder =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("posts");
    HttpUrl _httpUrl = _httpUrlBuilder.build();
    Map<String, Object> _requestBodyProperties = new HashMap<>();
    _requestBodyProperties.put("title", request.getTitle());
    _requestBodyProperties.put("author", request.getAuthor());
    _requestBodyProperties.put("content", request.getContent());
    _requestBodyProperties.put("postType", request.getPostType());
    _requestBodyProperties.put("switch", request.getSwitch());
    _requestBodyProperties.put("ratings", request.getRatings());
    _requestBodyProperties.put("list", request.getList());
    RequestBody _requestBody;
    try {
      _requestBody =
          RequestBody.create(
              ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties),
              MediaType.parse("application/json"));
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder =
        new Request.Builder()
            .url(_httpUrl)
            .method("POST", _requestBody)
            .headers(Headers.of(clientOptions.headers()));
    Request _request = _requestBuilder.build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public BlogPost getPost(String postId, GetPostRequest request) {
    HttpUrl.Builder _httpUrlBuilder =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("posts")
            .addPathSegment(postId);
    _httpUrlBuilder.addQueryParameter("dummy", request.getDummy());
    HttpUrl _httpUrl = _httpUrlBuilder.build();
    RequestBody _requestBody = null;
    Request.Builder _requestBuilder =
        new Request.Builder()
            .url(_httpUrl)
            .method("GET", _requestBody)
            .headers(Headers.of(clientOptions.headers()));
    Request _request = _requestBuilder.build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), BlogPost.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public List<BlogPost> getAll() {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("posts")
            .build();
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(
            _response.body().string(), new TypeReference<List<BlogPost>>() {});
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/requests/CreatePostRequest.java]=[
package com.fern.basic.resources.blog.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.basic.resources.blog.types.Author;
import com.fern.basic.resources.blog.types.PostType;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;

@JsonDeserialize(builder = CreatePostRequest.Builder.class)
public final class CreatePostRequest {
  private final String title;

  private final Author author;

  private final String content;

  private final PostType postType;

  private final int switch_;

  private final Map<String, Integer> ratings;

  private final List<List<String>> list;

  private int _cachedHashCode;

  CreatePostRequest(
      String title,
      Author author,
      String content,
      PostType postType,
      int switch_,
      Map<String, Integer> ratings,
      List<List<String>> list) {
    this.title = title;
    this.author = author;
    this.content = content;
    this.postType = postType;
    this.switch_ = switch_;
    this.ratings = ratings;
    this.list = list;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @JsonProperty("postType")
  public PostType getPostType() {
    return postType;
  }

  @JsonProperty("switch")
  public int getSwitch() {
    return switch_;
  }

  @JsonProperty("ratings")
  public Map<String, Integer> getRatings() {
    return ratings;
  }

  @JsonProperty("list")
  public List<List<String>> getList() {
    return list;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreatePostRequest && equalTo((CreatePostRequest) other);
  }

  private boolean equalTo(CreatePostRequest other) {
    return title.equals(other.title)
        && author.equals(other.author)
        && content.equals(other.content)
        && postType.equals(other.postType)
        && switch_ == other.switch_
        && ratings.equals(other.ratings)
        && list.equals(other.list);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.title,
              this.author,
              this.content,
              this.postType,
              this.switch_,
              this.ratings,
              this.list);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "CreatePostRequest{"
        + "title: "
        + title
        + ", author: "
        + author
        + ", content: "
        + content
        + ", postType: "
        + postType
        + ", switch_: "
        + switch_
        + ", ratings: "
        + ratings
        + ", list: "
        + list
        + "}";
  }

  public static TitleStage builder() {
    return new Builder();
  }

  public interface TitleStage {
    AuthorStage title(String title);

    Builder from(CreatePostRequest other);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    PostTypeStage content(String content);
  }

  public interface PostTypeStage {
    SwitchStage postType(PostType postType);
  }

  public interface SwitchStage {
    _FinalStage switch_(int switch_);
  }

  public interface _FinalStage {
    CreatePostRequest build();

    _FinalStage ratings(Map<String, Integer> ratings);

    _FinalStage putAllRatings(Map<String, Integer> ratings);

    _FinalStage ratings(String key, Integer value);

    _FinalStage list(List<List<String>> list);

    _FinalStage addList(List<String> list);

    _FinalStage addAllList(List<List<String>> list);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder
      implements TitleStage, AuthorStage, ContentStage, PostTypeStage, SwitchStage, _FinalStage {
    private String title;

    private Author author;

    private String content;

    private PostType postType;

    private int switch_;

    private List<List<String>> list = new ArrayList<>();

    private Map<String, Integer> ratings = new LinkedHashMap<>();

    private Builder() {}

    @Override
    public Builder from(CreatePostRequest other) {
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      postType(other.getPostType());
      switch_(other.getSwitch());
      ratings(other.getRatings());
      list(other.getList());
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public PostTypeStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    @JsonSetter("postType")
    public SwitchStage postType(PostType postType) {
      this.postType = postType;
      return this;
    }

    @Override
    @JsonSetter("switch")
    public _FinalStage switch_(int switch_) {
      this.switch_ = switch_;
      return this;
    }

    @Override
    public _FinalStage addAllList(List<List<String>> list) {
      this.list.addAll(list);
      return this;
    }

    @Override
    public _FinalStage addList(List<String> list) {
      this.list.add(list);
      return this;
    }

    @Override
    @JsonSetter(value = "list", nulls = Nulls.SKIP)
    public _FinalStage list(List<List<String>> list) {
      this.list.clear();
      this.list.addAll(list);
      return this;
    }

    @Override
    public _FinalStage ratings(String key, Integer value) {
      this.ratings.put(key, value);
      return this;
    }

    @Override
    public _FinalStage putAllRatings(Map<String, Integer> ratings) {
      this.ratings.putAll(ratings);
      return this;
    }

    @Override
    @JsonSetter(value = "ratings", nulls = Nulls.SKIP)
    public _FinalStage ratings(Map<String, Integer> ratings) {
      this.ratings.clear();
      this.ratings.putAll(ratings);
      return this;
    }

    @Override
    public CreatePostRequest build() {
      return new CreatePostRequest(title, author, content, postType, switch_, ratings, list);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/requests/GetPostRequest.java]=[
package com.fern.basic.resources.blog.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = GetPostRequest.Builder.class)
public final class GetPostRequest {
  private final String dummy;

  private int _cachedHashCode;

  GetPostRequest(String dummy) {
    this.dummy = dummy;
  }

  /**
   * @return Dummy query param
   */
  @JsonProperty("dummy")
  public String getDummy() {
    return dummy;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetPostRequest && equalTo((GetPostRequest) other);
  }

  private boolean equalTo(GetPostRequest other) {
    return dummy.equals(other.dummy);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.dummy);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "GetPostRequest{" + "dummy: " + dummy + "}";
  }

  public static DummyStage builder() {
    return new Builder();
  }

  public interface DummyStage {
    _FinalStage dummy(String dummy);

    Builder from(GetPostRequest other);
  }

  public interface _FinalStage {
    GetPostRequest build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements DummyStage, _FinalStage {
    private String dummy;

    private Builder() {}

    @Override
    public Builder from(GetPostRequest other) {
      dummy(other.getDummy());
      return this;
    }

    /**
     * Dummy query param
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("dummy")
    public _FinalStage dummy(String dummy) {
      this.dummy = dummy;
      return this;
    }

    @Override
    public GetPostRequest build() {
      return new GetPostRequest(dummy);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/types/Author.java]=[
package com.fern.basic.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Objects;
import java.util.Optional;

public final class Author {
  private final Value value;

  @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
  private Author(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static Author anonymous() {
    return new Author(new AnonymousValue());
  }

  public static Author name(String value) {
    return new Author(new NameValue(value));
  }

  public boolean isAnonymous() {
    return value instanceof AnonymousValue;
  }

  public boolean isName() {
    return value instanceof NameValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<String> getName() {
    if (isName()) {
      return Optional.of(((NameValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitAnonymous();

    T visitName(String name);

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "type",
      visible = true,
      defaultImpl = _UnknownValue.class)
  @JsonSubTypes({@JsonSubTypes.Type(AnonymousValue.class), @JsonSubTypes.Type(NameValue.class)})
  @JsonIgnoreProperties(ignoreUnknown = true)
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("anonymous")
  private static final class AnonymousValue implements Value {
    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
    private AnonymousValue() {}

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitAnonymous();
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof AnonymousValue;
    }

    @Override
    public String toString() {
      return "Author{" + "}";
    }
  }

  @JsonTypeName("name")
  private static final class NameValue implements Value {
    @JsonProperty("value")
    private String value;

    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
    private NameValue(@JsonProperty("value") String value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitName(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof NameValue && equalTo((NameValue) other);
    }

    private boolean equalTo(NameValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue private Object value;

    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)
    private _UnknownValue(@JsonProperty("value") Object value) {}

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "type: " + type + ", value: " + value + "}";
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/types/BlogPost.java]=[
package com.fern.basic.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = BlogPost.Builder.class)
public final class BlogPost {
  private final String id;

  private final PostType type;

  private final String title;

  private final Author author;

  private final String content;

  private int _cachedHashCode;

  BlogPost(String id, PostType type, String title, Author author, String content) {
    this.id = id;
    this.type = type;
    this.title = title;
    this.author = author;
    this.content = content;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("type")
  public PostType getType() {
    return type;
  }

  /**
   * @return The title of the blog post.
   */
  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BlogPost && equalTo((BlogPost) other);
  }

  private boolean equalTo(BlogPost other) {
    return id.equals(other.id)
        && type.equals(other.type)
        && title.equals(other.title)
        && author.equals(other.author)
        && content.equals(other.content);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.type, this.title, this.author, this.content);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BlogPost{"
        + "id: "
        + id
        + ", type: "
        + type
        + ", title: "
        + title
        + ", author: "
        + author
        + ", content: "
        + content
        + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    TypeStage id(String id);

    Builder from(BlogPost other);
  }

  public interface TypeStage {
    TitleStage type(PostType type);
  }

  public interface TitleStage {
    AuthorStage title(String title);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    _FinalStage content(String content);
  }

  public interface _FinalStage {
    BlogPost build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder
      implements IdStage, TypeStage, TitleStage, AuthorStage, ContentStage, _FinalStage {
    private String id;

    private PostType type;

    private String title;

    private Author author;

    private String content;

    private Builder() {}

    @Override
    public Builder from(BlogPost other) {
      id(other.getId());
      type(other.getType());
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      return this;
    }

    @Override
    @JsonSetter("id")
    public TypeStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("type")
    public TitleStage type(PostType type) {
      this.type = type;
      return this;
    }

    /**
     * The title of the blog post.
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public _FinalStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    public BlogPost build() {
      return new BlogPost(id, type, title, author, content);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/types/GeneratorIdAndVersion.java]=[
package com.fern.basic.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = GeneratorIdAndVersion.Builder.class)
public final class GeneratorIdAndVersion {
  private final String id;

  private final String version;

  private int _cachedHashCode;

  GeneratorIdAndVersion(String id, String version) {
    this.id = id;
    this.version = version;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("version")
  public String getVersion() {
    return version;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GeneratorIdAndVersion && equalTo((GeneratorIdAndVersion) other);
  }

  private boolean equalTo(GeneratorIdAndVersion other) {
    return id.equals(other.id) && version.equals(other.version);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.version);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "GeneratorIdAndVersion{" + "id: " + id + ", version: " + version + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    VersionStage id(String id);

    Builder from(GeneratorIdAndVersion other);
  }

  public interface VersionStage {
    _FinalStage version(String version);
  }

  public interface _FinalStage {
    GeneratorIdAndVersion build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements IdStage, VersionStage, _FinalStage {
    private String id;

    private String version;

    private Builder() {}

    @Override
    public Builder from(GeneratorIdAndVersion other) {
      id(other.getId());
      version(other.getVersion());
      return this;
    }

    @Override
    @JsonSetter("id")
    public VersionStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("version")
    public _FinalStage version(String version) {
      this.version = version;
      return this;
    }

    @Override
    public GeneratorIdAndVersion build() {
      return new GeneratorIdAndVersion(id, version);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/types/PostNotFoundErrorBody.java]=[
package com.fern.basic.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = PostNotFoundErrorBody.Builder.class)
public final class PostNotFoundErrorBody {
  private final String id;

  private int _cachedHashCode;

  PostNotFoundErrorBody(String id) {
    this.id = id;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PostNotFoundErrorBody && equalTo((PostNotFoundErrorBody) other);
  }

  private boolean equalTo(PostNotFoundErrorBody other) {
    return id.equals(other.id);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "PostNotFoundErrorBody{" + "id: " + id + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    _FinalStage id(String id);

    Builder from(PostNotFoundErrorBody other);
  }

  public interface _FinalStage {
    PostNotFoundErrorBody build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements IdStage, _FinalStage {
    private String id;

    private Builder() {}

    @Override
    public Builder from(PostNotFoundErrorBody other) {
      id(other.getId());
      return this;
    }

    @Override
    @JsonSetter("id")
    public _FinalStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    public PostNotFoundErrorBody build() {
      return new PostNotFoundErrorBody(id);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/types/PostType.java]=[
package com.fern.basic.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Locale;

public final class PostType {
  public static final PostType LONG = new PostType(Value.LONG, "LONG");

  public static final PostType SHORT = new PostType(Value.SHORT, "SHORT");

  public static final PostType MEDIUM = new PostType(Value.MEDIUM, "med.med");

  private final Value value;

  private final String string;

  PostType(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other)
        || (other instanceof PostType && this.string.equals(((PostType) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case LONG:
        return visitor.visitLong();
      case SHORT:
        return visitor.visitShort();
      case MEDIUM:
        return visitor.visitMedium();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
  public static PostType valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "LONG":
        return LONG;
      case "SHORT":
        return SHORT;
      case "med.med":
        return MEDIUM;
      default:
        return new PostType(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    LONG,

    SHORT,

    MEDIUM,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitLong();

    T visitShort();

    T visitMedium();

    T visitUnknown(String unknownType);
  }
}

]


basic[src/main/java/com/fern/basic/resources/blog/types/UnauthorizedErrorBody.java]=[
package com.fern.basic.resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = UnauthorizedErrorBody.Builder.class)
public final class UnauthorizedErrorBody {
  private final String reason;

  private int _cachedHashCode;

  UnauthorizedErrorBody(String reason) {
    this.reason = reason;
  }

  @JsonProperty("reason")
  public String getReason() {
    return reason;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UnauthorizedErrorBody && equalTo((UnauthorizedErrorBody) other);
  }

  private boolean equalTo(UnauthorizedErrorBody other) {
    return reason.equals(other.reason);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.reason);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "UnauthorizedErrorBody{" + "reason: " + reason + "}";
  }

  public static ReasonStage builder() {
    return new Builder();
  }

  public interface ReasonStage {
    _FinalStage reason(String reason);

    Builder from(UnauthorizedErrorBody other);
  }

  public interface _FinalStage {
    UnauthorizedErrorBody build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ReasonStage, _FinalStage {
    private String reason;

    private Builder() {}

    @Override
    public Builder from(UnauthorizedErrorBody other) {
      reason(other.getReason());
      return this;
    }

    @Override
    @JsonSetter("reason")
    public _FinalStage reason(String reason) {
      this.reason = reason;
      return this;
    }

    @Override
    public UnauthorizedErrorBody build() {
      return new UnauthorizedErrorBody(reason);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/dummyservice/DummyServiceClient.java]=[
package com.fern.basic.resources.dummyservice;

public interface DummyServiceClient {
  void getDummy(String request);

  void health();
}

]


basic[src/main/java/com/fern/basic/resources/dummyservice/DummyServiceClientImpl.java]=[
package com.fern.basic.resources.dummyservice;

import com.fern.basic.core.ClientOptions;
import com.fern.basic.core.ObjectMappers;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public final class DummyServiceClientImpl implements DummyServiceClient {
  private final ClientOptions clientOptions;

  public DummyServiceClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public void getDummy(String request) {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("dummy")
            .build();
    RequestBody _requestBody;
    try {
      _requestBody =
          RequestBody.create(
              ObjectMappers.JSON_MAPPER.writeValueAsBytes(request),
              MediaType.parse("application/json"));
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("POST", _requestBody)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public void health() {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("dummy")
            .build();
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/RavenClient.java]=[
package com.fern.basic.resources.raven;

import com.fern.basic.resources.raven.device.DeviceClient;
import com.fern.basic.resources.raven.event.EventClient;
import com.fern.basic.resources.raven.user.UserClient;

public interface RavenClient {
  DeviceClient device();

  EventClient event();

  UserClient user();
}

]


basic[src/main/java/com/fern/basic/resources/raven/RavenClientImpl.java]=[
package com.fern.basic.resources.raven;

import com.fern.basic.core.ClientOptions;
import com.fern.basic.core.Suppliers;
import com.fern.basic.resources.raven.device.DeviceClient;
import com.fern.basic.resources.raven.device.DeviceClientImpl;
import com.fern.basic.resources.raven.event.EventClient;
import com.fern.basic.resources.raven.event.EventClientImpl;
import com.fern.basic.resources.raven.user.UserClient;
import com.fern.basic.resources.raven.user.UserClientImpl;
import java.util.function.Supplier;

public final class RavenClientImpl implements RavenClient {
  private final ClientOptions clientOptions;

  private final Supplier<DeviceClient> deviceClient;

  private final Supplier<EventClient> eventClient;

  private final Supplier<UserClient> userClient;

  public RavenClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.deviceClient = Suppliers.memoize(() -> new DeviceClientImpl(clientOptions));
    this.eventClient = Suppliers.memoize(() -> new EventClientImpl(clientOptions));
    this.userClient = Suppliers.memoize(() -> new UserClientImpl(clientOptions));
  }

  @Override
  public DeviceClient device() {
    return this.deviceClient.get();
  }

  @Override
  public EventClient event() {
    return this.eventClient.get();
  }

  @Override
  public UserClient user() {
    return this.userClient.get();
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/device/DeviceClient.java]=[
package com.fern.basic.resources.raven.device;

import com.fern.basic.resources.raven.device.types.Device;

public interface DeviceClient {
  Device add(String appId, String userId, Device request);

  Device update(String appId, String userId, String deviceId, Device request);

  void delete(String appId, String userId, String deviceId);

  Device getDevice(String appId, String userId, String deviceId);
}

]


basic[src/main/java/com/fern/basic/resources/raven/device/DeviceClientImpl.java]=[
package com.fern.basic.resources.raven.device;

import com.fern.basic.core.ClientOptions;
import com.fern.basic.core.ObjectMappers;
import com.fern.basic.resources.raven.device.types.Device;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public final class DeviceClientImpl implements DeviceClient {
  private final ClientOptions clientOptions;

  public DeviceClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public Device add(String appId, String userId, Device request) {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("users/")
            .addPathSegment(userId)
            .addPathSegments("devices")
            .build();
    RequestBody _requestBody;
    try {
      _requestBody =
          RequestBody.create(
              ObjectMappers.JSON_MAPPER.writeValueAsBytes(request),
              MediaType.parse("application/json"));
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("POST", _requestBody)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), Device.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public Device update(String appId, String userId, String deviceId, Device request) {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("users/")
            .addPathSegment(userId)
            .addPathSegments("devices/")
            .addPathSegment(deviceId)
            .build();
    RequestBody _requestBody;
    try {
      _requestBody =
          RequestBody.create(
              ObjectMappers.JSON_MAPPER.writeValueAsBytes(request),
              MediaType.parse("application/json"));
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("PUT", _requestBody)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), Device.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public void delete(String appId, String userId, String deviceId) {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("users/")
            .addPathSegment(userId)
            .addPathSegments("devices/")
            .addPathSegment(deviceId)
            .build();
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("DELETE", null)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public Device getDevice(String appId, String userId, String deviceId) {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("users/")
            .addPathSegment(userId)
            .addPathSegments("devices/")
            .addPathSegment(deviceId)
            .build();
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), Device.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/device/types/Device.java]=[
package com.fern.basic.resources.raven.device.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = Device.Builder.class)
public final class Device {
  private final Optional<String> id;

  private final Optional<Platform> platform;

  private final Optional<String> onesignalPlayerId;

  private final Optional<String> xiaomiToken;

  private final Optional<String> oppoToken;

  private final Optional<String> vivoToken;

  private final Optional<String> huaweiToken;

  private final Optional<String> fcmToken;

  private final Optional<String> ravenId;

  private final Optional<String> deviceSid;

  private final Optional<Boolean> notificationsDisabled;

  private final Optional<Long> createdAt;

  private final Optional<Long> updatedAt;

  private int _cachedHashCode;

  Device(
      Optional<String> id,
      Optional<Platform> platform,
      Optional<String> onesignalPlayerId,
      Optional<String> xiaomiToken,
      Optional<String> oppoToken,
      Optional<String> vivoToken,
      Optional<String> huaweiToken,
      Optional<String> fcmToken,
      Optional<String> ravenId,
      Optional<String> deviceSid,
      Optional<Boolean> notificationsDisabled,
      Optional<Long> createdAt,
      Optional<Long> updatedAt) {
    this.id = id;
    this.platform = platform;
    this.onesignalPlayerId = onesignalPlayerId;
    this.xiaomiToken = xiaomiToken;
    this.oppoToken = oppoToken;
    this.vivoToken = vivoToken;
    this.huaweiToken = huaweiToken;
    this.fcmToken = fcmToken;
    this.ravenId = ravenId;
    this.deviceSid = deviceSid;
    this.notificationsDisabled = notificationsDisabled;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  @JsonProperty("id")
  public Optional<String> getId() {
    return id;
  }

  @JsonProperty("platform")
  public Optional<Platform> getPlatform() {
    return platform;
  }

  @JsonProperty("onesignal_player_id")
  public Optional<String> getOnesignalPlayerId() {
    return onesignalPlayerId;
  }

  @JsonProperty("xiaomi_token")
  public Optional<String> getXiaomiToken() {
    return xiaomiToken;
  }

  @JsonProperty("oppo_token")
  public Optional<String> getOppoToken() {
    return oppoToken;
  }

  @JsonProperty("vivo_token")
  public Optional<String> getVivoToken() {
    return vivoToken;
  }

  @JsonProperty("huaweiToken")
  public Optional<String> getHuaweiToken() {
    return huaweiToken;
  }

  /**
   * @return firebase device token
   */
  @JsonProperty("fcm_token")
  public Optional<String> getFcmToken() {
    return fcmToken;
  }

  /**
   * @return user id affiliated with device
   */
  @JsonProperty("raven_id")
  public Optional<String> getRavenId() {
    return ravenId;
  }

  @JsonProperty("device_sid")
  public Optional<String> getDeviceSid() {
    return deviceSid;
  }

  @JsonProperty("notifications_disabled")
  public Optional<Boolean> getNotificationsDisabled() {
    return notificationsDisabled;
  }

  @JsonProperty("created_at")
  public Optional<Long> getCreatedAt() {
    return createdAt;
  }

  @JsonProperty("updated_at")
  public Optional<Long> getUpdatedAt() {
    return updatedAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Device && equalTo((Device) other);
  }

  private boolean equalTo(Device other) {
    return id.equals(other.id)
        && platform.equals(other.platform)
        && onesignalPlayerId.equals(other.onesignalPlayerId)
        && xiaomiToken.equals(other.xiaomiToken)
        && oppoToken.equals(other.oppoToken)
        && vivoToken.equals(other.vivoToken)
        && huaweiToken.equals(other.huaweiToken)
        && fcmToken.equals(other.fcmToken)
        && ravenId.equals(other.ravenId)
        && deviceSid.equals(other.deviceSid)
        && notificationsDisabled.equals(other.notificationsDisabled)
        && createdAt.equals(other.createdAt)
        && updatedAt.equals(other.updatedAt);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.id,
              this.platform,
              this.onesignalPlayerId,
              this.xiaomiToken,
              this.oppoToken,
              this.vivoToken,
              this.huaweiToken,
              this.fcmToken,
              this.ravenId,
              this.deviceSid,
              this.notificationsDisabled,
              this.createdAt,
              this.updatedAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "Device{"
        + "id: "
        + id
        + ", platform: "
        + platform
        + ", onesignalPlayerId: "
        + onesignalPlayerId
        + ", xiaomiToken: "
        + xiaomiToken
        + ", oppoToken: "
        + oppoToken
        + ", vivoToken: "
        + vivoToken
        + ", huaweiToken: "
        + huaweiToken
        + ", fcmToken: "
        + fcmToken
        + ", ravenId: "
        + ravenId
        + ", deviceSid: "
        + deviceSid
        + ", notificationsDisabled: "
        + notificationsDisabled
        + ", createdAt: "
        + createdAt
        + ", updatedAt: "
        + updatedAt
        + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder {
    private Optional<String> id = Optional.empty();

    private Optional<Platform> platform = Optional.empty();

    private Optional<String> onesignalPlayerId = Optional.empty();

    private Optional<String> xiaomiToken = Optional.empty();

    private Optional<String> oppoToken = Optional.empty();

    private Optional<String> vivoToken = Optional.empty();

    private Optional<String> huaweiToken = Optional.empty();

    private Optional<String> fcmToken = Optional.empty();

    private Optional<String> ravenId = Optional.empty();

    private Optional<String> deviceSid = Optional.empty();

    private Optional<Boolean> notificationsDisabled = Optional.empty();

    private Optional<Long> createdAt = Optional.empty();

    private Optional<Long> updatedAt = Optional.empty();

    private Builder() {}

    public Builder from(Device other) {
      id(other.getId());
      platform(other.getPlatform());
      onesignalPlayerId(other.getOnesignalPlayerId());
      xiaomiToken(other.getXiaomiToken());
      oppoToken(other.getOppoToken());
      vivoToken(other.getVivoToken());
      huaweiToken(other.getHuaweiToken());
      fcmToken(other.getFcmToken());
      ravenId(other.getRavenId());
      deviceSid(other.getDeviceSid());
      notificationsDisabled(other.getNotificationsDisabled());
      createdAt(other.getCreatedAt());
      updatedAt(other.getUpdatedAt());
      return this;
    }

    @JsonSetter(value = "id", nulls = Nulls.SKIP)
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.of(id);
      return this;
    }

    @JsonSetter(value = "platform", nulls = Nulls.SKIP)
    public Builder platform(Optional<Platform> platform) {
      this.platform = platform;
      return this;
    }

    public Builder platform(Platform platform) {
      this.platform = Optional.of(platform);
      return this;
    }

    @JsonSetter(value = "onesignal_player_id", nulls = Nulls.SKIP)
    public Builder onesignalPlayerId(Optional<String> onesignalPlayerId) {
      this.onesignalPlayerId = onesignalPlayerId;
      return this;
    }

    public Builder onesignalPlayerId(String onesignalPlayerId) {
      this.onesignalPlayerId = Optional.of(onesignalPlayerId);
      return this;
    }

    @JsonSetter(value = "xiaomi_token", nulls = Nulls.SKIP)
    public Builder xiaomiToken(Optional<String> xiaomiToken) {
      this.xiaomiToken = xiaomiToken;
      return this;
    }

    public Builder xiaomiToken(String xiaomiToken) {
      this.xiaomiToken = Optional.of(xiaomiToken);
      return this;
    }

    @JsonSetter(value = "oppo_token", nulls = Nulls.SKIP)
    public Builder oppoToken(Optional<String> oppoToken) {
      this.oppoToken = oppoToken;
      return this;
    }

    public Builder oppoToken(String oppoToken) {
      this.oppoToken = Optional.of(oppoToken);
      return this;
    }

    @JsonSetter(value = "vivo_token", nulls = Nulls.SKIP)
    public Builder vivoToken(Optional<String> vivoToken) {
      this.vivoToken = vivoToken;
      return this;
    }

    public Builder vivoToken(String vivoToken) {
      this.vivoToken = Optional.of(vivoToken);
      return this;
    }

    @JsonSetter(value = "huaweiToken", nulls = Nulls.SKIP)
    public Builder huaweiToken(Optional<String> huaweiToken) {
      this.huaweiToken = huaweiToken;
      return this;
    }

    public Builder huaweiToken(String huaweiToken) {
      this.huaweiToken = Optional.of(huaweiToken);
      return this;
    }

    @JsonSetter(value = "fcm_token", nulls = Nulls.SKIP)
    public Builder fcmToken(Optional<String> fcmToken) {
      this.fcmToken = fcmToken;
      return this;
    }

    public Builder fcmToken(String fcmToken) {
      this.fcmToken = Optional.of(fcmToken);
      return this;
    }

    @JsonSetter(value = "raven_id", nulls = Nulls.SKIP)
    public Builder ravenId(Optional<String> ravenId) {
      this.ravenId = ravenId;
      return this;
    }

    public Builder ravenId(String ravenId) {
      this.ravenId = Optional.of(ravenId);
      return this;
    }

    @JsonSetter(value = "device_sid", nulls = Nulls.SKIP)
    public Builder deviceSid(Optional<String> deviceSid) {
      this.deviceSid = deviceSid;
      return this;
    }

    public Builder deviceSid(String deviceSid) {
      this.deviceSid = Optional.of(deviceSid);
      return this;
    }

    @JsonSetter(value = "notifications_disabled", nulls = Nulls.SKIP)
    public Builder notificationsDisabled(Optional<Boolean> notificationsDisabled) {
      this.notificationsDisabled = notificationsDisabled;
      return this;
    }

    public Builder notificationsDisabled(Boolean notificationsDisabled) {
      this.notificationsDisabled = Optional.of(notificationsDisabled);
      return this;
    }

    @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
    public Builder createdAt(Optional<Long> createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    public Builder createdAt(Long createdAt) {
      this.createdAt = Optional.of(createdAt);
      return this;
    }

    @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
    public Builder updatedAt(Optional<Long> updatedAt) {
      this.updatedAt = updatedAt;
      return this;
    }

    public Builder updatedAt(Long updatedAt) {
      this.updatedAt = Optional.of(updatedAt);
      return this;
    }

    public Device build() {
      return new Device(
          id,
          platform,
          onesignalPlayerId,
          xiaomiToken,
          oppoToken,
          vivoToken,
          huaweiToken,
          fcmToken,
          ravenId,
          deviceSid,
          notificationsDisabled,
          createdAt,
          updatedAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/device/types/Platform.java]=[
package com.fern.basic.resources.raven.device.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Locale;

public final class Platform {
  public static final Platform WEB = new Platform(Value.WEB, "web");

  public static final Platform IOS = new Platform(Value.IOS, "ios");

  public static final Platform ANDROID = new Platform(Value.ANDROID, "android");

  private final Value value;

  private final String string;

  Platform(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other)
        || (other instanceof Platform && this.string.equals(((Platform) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case WEB:
        return visitor.visitWeb();
      case IOS:
        return visitor.visitIos();
      case ANDROID:
        return visitor.visitAndroid();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
  public static Platform valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "web":
        return WEB;
      case "ios":
        return IOS;
      case "android":
        return ANDROID;
      default:
        return new Platform(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    ANDROID,

    WEB,

    IOS,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitAndroid();

    T visitWeb();

    T visitIos();

    T visitUnknown(String unknownType);
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/EventClient.java]=[
package com.fern.basic.resources.raven.event;

import com.fern.basic.resources.raven.event.requests.BulkSendEventRequest;
import com.fern.basic.resources.raven.event.requests.SendEventRequest;
import com.fern.basic.resources.raven.event.types.SendEventResponse;

public interface EventClient {
  SendEventResponse send(String appId, SendEventRequest request);

  SendEventResponse sendBulk(String appId, BulkSendEventRequest request);
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/EventClientImpl.java]=[
package com.fern.basic.resources.raven.event;

import com.fern.basic.core.ClientOptions;
import com.fern.basic.core.ObjectMappers;
import com.fern.basic.resources.raven.event.requests.BulkSendEventRequest;
import com.fern.basic.resources.raven.event.requests.SendEventRequest;
import com.fern.basic.resources.raven.event.types.SendEventResponse;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public final class EventClientImpl implements EventClient {
  private final ClientOptions clientOptions;

  public EventClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public SendEventResponse send(String appId, SendEventRequest request) {
    HttpUrl.Builder _httpUrlBuilder =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("events/send");
    HttpUrl _httpUrl = _httpUrlBuilder.build();
    Map<String, Object> _requestBodyProperties = new HashMap<>();
    _requestBodyProperties.put("event", request.getEvent());
    _requestBodyProperties.put("data", request.getData());
    _requestBodyProperties.put("user", request.getUser());
    _requestBodyProperties.put("scheduleAt", request.getScheduleAt());
    _requestBodyProperties.put("override", request.getOverride());
    RequestBody _requestBody;
    try {
      _requestBody =
          RequestBody.create(
              ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties),
              MediaType.parse("application/json"));
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder =
        new Request.Builder()
            .url(_httpUrl)
            .method("POST", _requestBody)
            .headers(Headers.of(clientOptions.headers()));
    if (request.getIdempotencyKey().isPresent()) {
      _requestBuilder.addHeader("Idempotency-Key", request.getIdempotencyKey().get());
    }
    Request _request = _requestBuilder.build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(
            _response.body().string(), SendEventResponse.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public SendEventResponse sendBulk(String appId, BulkSendEventRequest request) {
    HttpUrl.Builder _httpUrlBuilder =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("events/bulk_send");
    HttpUrl _httpUrl = _httpUrlBuilder.build();
    Map<String, Object> _requestBodyProperties = new HashMap<>();
    _requestBodyProperties.put("event", request.getEvent());
    _requestBodyProperties.put("batch", request.getBatch());
    RequestBody _requestBody;
    try {
      _requestBody =
          RequestBody.create(
              ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties),
              MediaType.parse("application/json"));
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder =
        new Request.Builder()
            .url(_httpUrl)
            .method("POST", _requestBody)
            .headers(Headers.of(clientOptions.headers()));
    if (request.getIdempotencyKey().isPresent()) {
      _requestBuilder.addHeader("Idempotency-Key", request.getIdempotencyKey().get());
    }
    Request _request = _requestBuilder.build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(
            _response.body().string(), SendEventResponse.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/requests/BulkSendEventRequest.java]=[
package com.fern.basic.resources.raven.event.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.basic.resources.raven.event.types.BatchEvent;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = BulkSendEventRequest.Builder.class)
public final class BulkSendEventRequest {
  private final Optional<String> idempotencyKey;

  private final String event;

  private final List<BatchEvent> batch;

  private int _cachedHashCode;

  BulkSendEventRequest(Optional<String> idempotencyKey, String event, List<BatchEvent> batch) {
    this.idempotencyKey = idempotencyKey;
    this.event = event;
    this.batch = batch;
  }

  /**
   * @return The API supports idempotency for safely retrying requests without accidentally
   *     performing the same operation twice. This is useful when an API call is disrupted in
   *     transit and you do not receive a response. For example, if a request to send event does not
   *     respond due to a network connection error, you can retry the request with the same
   *     idempotency key to guarantee that no more than one event is sent. An idempotency key is a
   *     unique value generated by the client which the server uses to recognize subsequent retries
   *     of the same request. How you create unique keys is up to you, but we suggest using V4
   *     UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys
   *     can be up to 255 characters long.
   */
  @JsonProperty("Idempotency-Key")
  public Optional<String> getIdempotencyKey() {
    return idempotencyKey;
  }

  @JsonProperty("event")
  public String getEvent() {
    return event;
  }

  /**
   * @return List of events
   */
  @JsonProperty("batch")
  public List<BatchEvent> getBatch() {
    return batch;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BulkSendEventRequest && equalTo((BulkSendEventRequest) other);
  }

  private boolean equalTo(BulkSendEventRequest other) {
    return idempotencyKey.equals(other.idempotencyKey)
        && event.equals(other.event)
        && batch.equals(other.batch);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.idempotencyKey, this.event, this.batch);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BulkSendEventRequest{"
        + "idempotencyKey: "
        + idempotencyKey
        + ", event: "
        + event
        + ", batch: "
        + batch
        + "}";
  }

  public static EventStage builder() {
    return new Builder();
  }

  public interface EventStage {
    _FinalStage event(String event);

    Builder from(BulkSendEventRequest other);
  }

  public interface _FinalStage {
    BulkSendEventRequest build();

    _FinalStage idempotencyKey(Optional<String> idempotencyKey);

    _FinalStage idempotencyKey(String idempotencyKey);

    _FinalStage batch(List<BatchEvent> batch);

    _FinalStage addBatch(BatchEvent batch);

    _FinalStage addAllBatch(List<BatchEvent> batch);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements EventStage, _FinalStage {
    private String event;

    private List<BatchEvent> batch = new ArrayList<>();

    private Optional<String> idempotencyKey = Optional.empty();

    private Builder() {}

    @Override
    public Builder from(BulkSendEventRequest other) {
      idempotencyKey(other.getIdempotencyKey());
      event(other.getEvent());
      batch(other.getBatch());
      return this;
    }

    @Override
    @JsonSetter("event")
    public _FinalStage event(String event) {
      this.event = event;
      return this;
    }

    /**
     * List of events
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage addAllBatch(List<BatchEvent> batch) {
      this.batch.addAll(batch);
      return this;
    }

    /**
     * List of events
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage addBatch(BatchEvent batch) {
      this.batch.add(batch);
      return this;
    }

    @Override
    @JsonSetter(value = "batch", nulls = Nulls.SKIP)
    public _FinalStage batch(List<BatchEvent> batch) {
      this.batch.clear();
      this.batch.addAll(batch);
      return this;
    }

    /**
     * The API supports idempotency for safely retrying requests without accidentally performing the
     * same operation twice. This is useful when an API call is disrupted in transit and you do not
     * receive a response. For example, if a request to send event does not respond due to a network
     * connection error, you can retry the request with the same idempotency key to guarantee that
     * no more than one event is sent. An idempotency key is a unique value generated by the client
     * which the server uses to recognize subsequent retries of the same request. How you create
     * unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough
     * entropy to avoid collisions. Idempotency keys can be up to 255 characters long.
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = Optional.of(idempotencyKey);
      return this;
    }

    @Override
    @JsonSetter(value = "Idempotency-Key", nulls = Nulls.SKIP)
    public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    @Override
    public BulkSendEventRequest build() {
      return new BulkSendEventRequest(idempotencyKey, event, batch);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/requests/SendEventRequest.java]=[
package com.fern.basic.resources.raven.event.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.basic.resources.raven.event.types.EventOverride;
import com.fern.basic.resources.raven.event.types.User;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = SendEventRequest.Builder.class)
public final class SendEventRequest {
  private final Optional<String> idempotencyKey;

  private final String event;

  private final Map<String, Optional<Object>> data;

  private final Optional<User> user;

  private final Optional<Long> scheduleAt;

  private final Optional<EventOverride> override;

  private int _cachedHashCode;

  SendEventRequest(
      Optional<String> idempotencyKey,
      String event,
      Map<String, Optional<Object>> data,
      Optional<User> user,
      Optional<Long> scheduleAt,
      Optional<EventOverride> override) {
    this.idempotencyKey = idempotencyKey;
    this.event = event;
    this.data = data;
    this.user = user;
    this.scheduleAt = scheduleAt;
    this.override = override;
  }

  /**
   * @return The API supports idempotency for safely retrying requests without accidentally
   *     performing the same operation twice. This is useful when an API call is disrupted in
   *     transit and you do not receive a response. For example, if a request to send event does not
   *     respond due to a network connection error, you can retry the request with the same
   *     idempotency key to guarantee that no more than one event is sent. An idempotency key is a
   *     unique value generated by the client which the server uses to recognize subsequent retries
   *     of the same request. How you create unique keys is up to you, but we suggest using V4
   *     UUIDs, or another random string with enough entropy to avoid collisions. Idempotency keys
   *     can be up to 255 characters long.
   */
  @JsonProperty("Idempotency-Key")
  public Optional<String> getIdempotencyKey() {
    return idempotencyKey;
  }

  /**
   * @return event name
   */
  @JsonProperty("event")
  public String getEvent() {
    return event;
  }

  /**
   * @return { &quot;param1&quot; : &quot;&lt;value1&gt;&quot;, &quot;param2&quot; :
   *     &quot;&lt;value2&gt;&quot;, &quot;param3&quot; : object/array&quot; }
   */
  @JsonProperty("data")
  public Map<String, Optional<Object>> getData() {
    return data;
  }

  @JsonProperty("user")
  public Optional<User> getUser() {
    return user;
  }

  /**
   * @return Time to send message expressed as UTC milliseconds. If not present, message will be
   *     sent immediately.
   */
  @JsonProperty("scheduleAt")
  public Optional<Long> getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("override")
  public Optional<EventOverride> getOverride() {
    return override;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SendEventRequest && equalTo((SendEventRequest) other);
  }

  private boolean equalTo(SendEventRequest other) {
    return idempotencyKey.equals(other.idempotencyKey)
        && event.equals(other.event)
        && data.equals(other.data)
        && user.equals(other.user)
        && scheduleAt.equals(other.scheduleAt)
        && override.equals(other.override);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.idempotencyKey,
              this.event,
              this.data,
              this.user,
              this.scheduleAt,
              this.override);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SendEventRequest{"
        + "idempotencyKey: "
        + idempotencyKey
        + ", event: "
        + event
        + ", data: "
        + data
        + ", user: "
        + user
        + ", scheduleAt: "
        + scheduleAt
        + ", override: "
        + override
        + "}";
  }

  public static EventStage builder() {
    return new Builder();
  }

  public interface EventStage {
    _FinalStage event(String event);

    Builder from(SendEventRequest other);
  }

  public interface _FinalStage {
    SendEventRequest build();

    _FinalStage idempotencyKey(Optional<String> idempotencyKey);

    _FinalStage idempotencyKey(String idempotencyKey);

    _FinalStage data(Map<String, Optional<Object>> data);

    _FinalStage putAllData(Map<String, Optional<Object>> data);

    _FinalStage data(String key, Optional<Object> value);

    _FinalStage user(Optional<User> user);

    _FinalStage user(User user);

    _FinalStage scheduleAt(Optional<Long> scheduleAt);

    _FinalStage scheduleAt(Long scheduleAt);

    _FinalStage override(Optional<EventOverride> override);

    _FinalStage override(EventOverride override);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements EventStage, _FinalStage {
    private String event;

    private Optional<EventOverride> override = Optional.empty();

    private Optional<Long> scheduleAt = Optional.empty();

    private Optional<User> user = Optional.empty();

    private Map<String, Optional<Object>> data = new LinkedHashMap<>();

    private Optional<String> idempotencyKey = Optional.empty();

    private Builder() {}

    @Override
    public Builder from(SendEventRequest other) {
      idempotencyKey(other.getIdempotencyKey());
      event(other.getEvent());
      data(other.getData());
      user(other.getUser());
      scheduleAt(other.getScheduleAt());
      override(other.getOverride());
      return this;
    }

    /**
     * event name
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("event")
    public _FinalStage event(String event) {
      this.event = event;
      return this;
    }

    @Override
    public _FinalStage override(EventOverride override) {
      this.override = Optional.of(override);
      return this;
    }

    @Override
    @JsonSetter(value = "override", nulls = Nulls.SKIP)
    public _FinalStage override(Optional<EventOverride> override) {
      this.override = override;
      return this;
    }

    /**
     * Time to send message expressed as UTC milliseconds. If not present, message will be sent
     * immediately.
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage scheduleAt(Long scheduleAt) {
      this.scheduleAt = Optional.of(scheduleAt);
      return this;
    }

    @Override
    @JsonSetter(value = "scheduleAt", nulls = Nulls.SKIP)
    public _FinalStage scheduleAt(Optional<Long> scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public _FinalStage user(User user) {
      this.user = Optional.of(user);
      return this;
    }

    @Override
    @JsonSetter(value = "user", nulls = Nulls.SKIP)
    public _FinalStage user(Optional<User> user) {
      this.user = user;
      return this;
    }

    /**
     * { &quot;param1&quot; : &quot;&lt;value1&gt;&quot;, &quot;param2&quot; :
     * &quot;&lt;value2&gt;&quot;, &quot;param3&quot; : object/array&quot; }
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage data(String key, Optional<Object> value) {
      this.data.put(key, value);
      return this;
    }

    /**
     * { &quot;param1&quot; : &quot;&lt;value1&gt;&quot;, &quot;param2&quot; :
     * &quot;&lt;value2&gt;&quot;, &quot;param3&quot; : object/array&quot; }
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage putAllData(Map<String, Optional<Object>> data) {
      this.data.putAll(data);
      return this;
    }

    @Override
    @JsonSetter(value = "data", nulls = Nulls.SKIP)
    public _FinalStage data(Map<String, Optional<Object>> data) {
      this.data.clear();
      this.data.putAll(data);
      return this;
    }

    /**
     * The API supports idempotency for safely retrying requests without accidentally performing the
     * same operation twice. This is useful when an API call is disrupted in transit and you do not
     * receive a response. For example, if a request to send event does not respond due to a network
     * connection error, you can retry the request with the same idempotency key to guarantee that
     * no more than one event is sent. An idempotency key is a unique value generated by the client
     * which the server uses to recognize subsequent retries of the same request. How you create
     * unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough
     * entropy to avoid collisions. Idempotency keys can be up to 255 characters long.
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = Optional.of(idempotencyKey);
      return this;
    }

    @Override
    @JsonSetter(value = "Idempotency-Key", nulls = Nulls.SKIP)
    public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    @Override
    public SendEventRequest build() {
      return new SendEventRequest(idempotencyKey, event, data, user, scheduleAt, override);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/Attachment.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = Attachment.Builder.class)
public final class Attachment {
  private final String fileName;

  private final String content;

  private final String url;

  private int _cachedHashCode;

  Attachment(String fileName, String content, String url) {
    this.fileName = fileName;
    this.content = content;
    this.url = url;
  }

  @JsonProperty("file_name")
  public String getFileName() {
    return fileName;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @JsonProperty("url")
  public String getUrl() {
    return url;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Attachment && equalTo((Attachment) other);
  }

  private boolean equalTo(Attachment other) {
    return fileName.equals(other.fileName)
        && content.equals(other.content)
        && url.equals(other.url);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.fileName, this.content, this.url);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "Attachment{"
        + "fileName: "
        + fileName
        + ", content: "
        + content
        + ", url: "
        + url
        + "}";
  }

  public static FileNameStage builder() {
    return new Builder();
  }

  public interface FileNameStage {
    ContentStage fileName(String fileName);

    Builder from(Attachment other);
  }

  public interface ContentStage {
    UrlStage content(String content);
  }

  public interface UrlStage {
    _FinalStage url(String url);
  }

  public interface _FinalStage {
    Attachment build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements FileNameStage, ContentStage, UrlStage, _FinalStage {
    private String fileName;

    private String content;

    private String url;

    private Builder() {}

    @Override
    public Builder from(Attachment other) {
      fileName(other.getFileName());
      content(other.getContent());
      url(other.getUrl());
      return this;
    }

    @Override
    @JsonSetter("file_name")
    public ContentStage fileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    @Override
    @JsonSetter("content")
    public UrlStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    @JsonSetter("url")
    public _FinalStage url(String url) {
      this.url = url;
      return this;
    }

    @Override
    public Attachment build() {
      return new Attachment(fileName, content, url);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/BatchEvent.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = BatchEvent.Builder.class)
public final class BatchEvent {
  private final Map<String, Optional<Object>> data;

  private final Optional<User> user;

  private final Optional<EventOverride> override;

  private int _cachedHashCode;

  BatchEvent(
      Map<String, Optional<Object>> data, Optional<User> user, Optional<EventOverride> override) {
    this.data = data;
    this.user = user;
    this.override = override;
  }

  /**
   * @return { &quot;param1&quot; : &quot;&lt;value1&gt;&quot;, &quot;param2&quot; :
   *     &quot;&lt;value2&gt;&quot;, &quot;param3&quot; : object/array&quot; }
   */
  @JsonProperty("data")
  public Map<String, Optional<Object>> getData() {
    return data;
  }

  @JsonProperty("user")
  public Optional<User> getUser() {
    return user;
  }

  @JsonProperty("override")
  public Optional<EventOverride> getOverride() {
    return override;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BatchEvent && equalTo((BatchEvent) other);
  }

  private boolean equalTo(BatchEvent other) {
    return data.equals(other.data) && user.equals(other.user) && override.equals(other.override);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.data, this.user, this.override);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BatchEvent{" + "data: " + data + ", user: " + user + ", override: " + override + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder {
    private Map<String, Optional<Object>> data = new LinkedHashMap<>();

    private Optional<User> user = Optional.empty();

    private Optional<EventOverride> override = Optional.empty();

    private Builder() {}

    public Builder from(BatchEvent other) {
      data(other.getData());
      user(other.getUser());
      override(other.getOverride());
      return this;
    }

    @JsonSetter(value = "data", nulls = Nulls.SKIP)
    public Builder data(Map<String, Optional<Object>> data) {
      this.data.clear();
      this.data.putAll(data);
      return this;
    }

    public Builder putAllData(Map<String, Optional<Object>> data) {
      this.data.putAll(data);
      return this;
    }

    public Builder data(String key, Optional<Object> value) {
      this.data.put(key, value);
      return this;
    }

    @JsonSetter(value = "user", nulls = Nulls.SKIP)
    public Builder user(Optional<User> user) {
      this.user = user;
      return this;
    }

    public Builder user(User user) {
      this.user = Optional.of(user);
      return this;
    }

    @JsonSetter(value = "override", nulls = Nulls.SKIP)
    public Builder override(Optional<EventOverride> override) {
      this.override = override;
      return this;
    }

    public Builder override(EventOverride override) {
      this.override = Optional.of(override);
      return this;
    }

    public BatchEvent build() {
      return new BatchEvent(data, user, override);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/ChannelOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = ChannelOverride.Builder.class)
public final class ChannelOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  ChannelOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ChannelOverride && equalTo((ChannelOverride) other);
  }

  private boolean equalTo(ChannelOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ChannelOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(ChannelOverride other);
  }

  public interface _FinalStage {
    ChannelOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {}

    @Override
    public Builder from(ChannelOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public ChannelOverride build() {
      return new ChannelOverride(scheduleAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/EmailMessage.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = EmailMessage.Builder.class)
public final class EmailMessage {
  private final String text;

  private final String htmlBody;

  private final String subject;

  private int _cachedHashCode;

  EmailMessage(String text, String htmlBody, String subject) {
    this.text = text;
    this.htmlBody = htmlBody;
    this.subject = subject;
  }

  @JsonProperty("text")
  public String getText() {
    return text;
  }

  @JsonProperty("html_body")
  public String getHtmlBody() {
    return htmlBody;
  }

  @JsonProperty("subject")
  public String getSubject() {
    return subject;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EmailMessage && equalTo((EmailMessage) other);
  }

  private boolean equalTo(EmailMessage other) {
    return text.equals(other.text)
        && htmlBody.equals(other.htmlBody)
        && subject.equals(other.subject);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.text, this.htmlBody, this.subject);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EmailMessage{"
        + "text: "
        + text
        + ", htmlBody: "
        + htmlBody
        + ", subject: "
        + subject
        + "}";
  }

  public static TextStage builder() {
    return new Builder();
  }

  public interface TextStage {
    HtmlBodyStage text(String text);

    Builder from(EmailMessage other);
  }

  public interface HtmlBodyStage {
    SubjectStage htmlBody(String htmlBody);
  }

  public interface SubjectStage {
    _FinalStage subject(String subject);
  }

  public interface _FinalStage {
    EmailMessage build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements TextStage, HtmlBodyStage, SubjectStage, _FinalStage {
    private String text;

    private String htmlBody;

    private String subject;

    private Builder() {}

    @Override
    public Builder from(EmailMessage other) {
      text(other.getText());
      htmlBody(other.getHtmlBody());
      subject(other.getSubject());
      return this;
    }

    @Override
    @JsonSetter("text")
    public HtmlBodyStage text(String text) {
      this.text = text;
      return this;
    }

    @Override
    @JsonSetter("html_body")
    public SubjectStage htmlBody(String htmlBody) {
      this.htmlBody = htmlBody;
      return this;
    }

    @Override
    @JsonSetter("subject")
    public _FinalStage subject(String subject) {
      this.subject = subject;
      return this;
    }

    @Override
    public EmailMessage build() {
      return new EmailMessage(text, htmlBody, subject);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/EmailOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonDeserialize(builder = EmailOverride.Builder.class)
public final class EmailOverride implements IChannelOverride {
  private final long scheduleAt;

  private final EmailRecipient from;

  private final List<EmailRecipient> cc;

  private final List<EmailRecipient> bcc;

  private final List<Attachment> attachments;

  private final EmailMessage message;

  private int _cachedHashCode;

  EmailOverride(
      long scheduleAt,
      EmailRecipient from,
      List<EmailRecipient> cc,
      List<EmailRecipient> bcc,
      List<Attachment> attachments,
      EmailMessage message) {
    this.scheduleAt = scheduleAt;
    this.from = from;
    this.cc = cc;
    this.bcc = bcc;
    this.attachments = attachments;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("from")
  public EmailRecipient getFrom() {
    return from;
  }

  @JsonProperty("cc")
  public List<EmailRecipient> getCc() {
    return cc;
  }

  @JsonProperty("bcc")
  public List<EmailRecipient> getBcc() {
    return bcc;
  }

  @JsonProperty("attachments")
  public List<Attachment> getAttachments() {
    return attachments;
  }

  @JsonProperty("message")
  public EmailMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EmailOverride && equalTo((EmailOverride) other);
  }

  private boolean equalTo(EmailOverride other) {
    return scheduleAt == other.scheduleAt
        && from.equals(other.from)
        && cc.equals(other.cc)
        && bcc.equals(other.bcc)
        && attachments.equals(other.attachments)
        && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.scheduleAt, this.from, this.cc, this.bcc, this.attachments, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EmailOverride{"
        + "scheduleAt: "
        + scheduleAt
        + ", from: "
        + from
        + ", cc: "
        + cc
        + ", bcc: "
        + bcc
        + ", attachments: "
        + attachments
        + ", message: "
        + message
        + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    FromStage scheduleAt(long scheduleAt);

    Builder from(EmailOverride other);
  }

  public interface FromStage {
    MessageStage from(EmailRecipient from);
  }

  public interface MessageStage {
    _FinalStage message(EmailMessage message);
  }

  public interface _FinalStage {
    EmailOverride build();

    _FinalStage cc(List<EmailRecipient> cc);

    _FinalStage addCc(EmailRecipient cc);

    _FinalStage addAllCc(List<EmailRecipient> cc);

    _FinalStage bcc(List<EmailRecipient> bcc);

    _FinalStage addBcc(EmailRecipient bcc);

    _FinalStage addAllBcc(List<EmailRecipient> bcc);

    _FinalStage attachments(List<Attachment> attachments);

    _FinalStage addAttachments(Attachment attachments);

    _FinalStage addAllAttachments(List<Attachment> attachments);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder
      implements ScheduleAtStage, FromStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private EmailRecipient from;

    private EmailMessage message;

    private List<Attachment> attachments = new ArrayList<>();

    private List<EmailRecipient> bcc = new ArrayList<>();

    private List<EmailRecipient> cc = new ArrayList<>();

    private Builder() {}

    @Override
    public Builder from(EmailOverride other) {
      scheduleAt(other.getScheduleAt());
      from(other.getFrom());
      cc(other.getCc());
      bcc(other.getBcc());
      attachments(other.getAttachments());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public FromStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("from")
    public MessageStage from(EmailRecipient from) {
      this.from = from;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(EmailMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public _FinalStage addAllAttachments(List<Attachment> attachments) {
      this.attachments.addAll(attachments);
      return this;
    }

    @Override
    public _FinalStage addAttachments(Attachment attachments) {
      this.attachments.add(attachments);
      return this;
    }

    @Override
    @JsonSetter(value = "attachments", nulls = Nulls.SKIP)
    public _FinalStage attachments(List<Attachment> attachments) {
      this.attachments.clear();
      this.attachments.addAll(attachments);
      return this;
    }

    @Override
    public _FinalStage addAllBcc(List<EmailRecipient> bcc) {
      this.bcc.addAll(bcc);
      return this;
    }

    @Override
    public _FinalStage addBcc(EmailRecipient bcc) {
      this.bcc.add(bcc);
      return this;
    }

    @Override
    @JsonSetter(value = "bcc", nulls = Nulls.SKIP)
    public _FinalStage bcc(List<EmailRecipient> bcc) {
      this.bcc.clear();
      this.bcc.addAll(bcc);
      return this;
    }

    @Override
    public _FinalStage addAllCc(List<EmailRecipient> cc) {
      this.cc.addAll(cc);
      return this;
    }

    @Override
    public _FinalStage addCc(EmailRecipient cc) {
      this.cc.add(cc);
      return this;
    }

    @Override
    @JsonSetter(value = "cc", nulls = Nulls.SKIP)
    public _FinalStage cc(List<EmailRecipient> cc) {
      this.cc.clear();
      this.cc.addAll(cc);
      return this;
    }

    @Override
    public EmailOverride build() {
      return new EmailOverride(scheduleAt, from, cc, bcc, attachments, message);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/EmailRecipient.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = EmailRecipient.Builder.class)
public final class EmailRecipient {
  private final String name;

  private final String address;

  private int _cachedHashCode;

  EmailRecipient(String name, String address) {
    this.name = name;
    this.address = address;
  }

  @JsonProperty("name")
  public String getName() {
    return name;
  }

  @JsonProperty("address")
  public String getAddress() {
    return address;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EmailRecipient && equalTo((EmailRecipient) other);
  }

  private boolean equalTo(EmailRecipient other) {
    return name.equals(other.name) && address.equals(other.address);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.name, this.address);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EmailRecipient{" + "name: " + name + ", address: " + address + "}";
  }

  public static NameStage builder() {
    return new Builder();
  }

  public interface NameStage {
    AddressStage name(String name);

    Builder from(EmailRecipient other);
  }

  public interface AddressStage {
    _FinalStage address(String address);
  }

  public interface _FinalStage {
    EmailRecipient build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements NameStage, AddressStage, _FinalStage {
    private String name;

    private String address;

    private Builder() {}

    @Override
    public Builder from(EmailRecipient other) {
      name(other.getName());
      address(other.getAddress());
      return this;
    }

    @Override
    @JsonSetter("name")
    public AddressStage name(String name) {
      this.name = name;
      return this;
    }

    @Override
    @JsonSetter("address")
    public _FinalStage address(String address) {
      this.address = address;
      return this;
    }

    @Override
    public EmailRecipient build() {
      return new EmailRecipient(name, address);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/EventOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = EventOverride.Builder.class)
public final class EventOverride {
  private final Optional<EmailOverride> email;

  private final Optional<SmsOverride> sms;

  private final Optional<WhatsappOverride> whatsapp;

  private final Optional<PushOverride> push;

  private final Optional<WebhookOverride> webhook;

  private final Optional<VoiceOverride> voice;

  private final Optional<SlackOverride> slack;

  private final Optional<InAppOverride> inApp;

  private final Optional<TelegramOverride> telegram;

  private final Map<String, ProviderOverride> providers;

  private int _cachedHashCode;

  EventOverride(
      Optional<EmailOverride> email,
      Optional<SmsOverride> sms,
      Optional<WhatsappOverride> whatsapp,
      Optional<PushOverride> push,
      Optional<WebhookOverride> webhook,
      Optional<VoiceOverride> voice,
      Optional<SlackOverride> slack,
      Optional<InAppOverride> inApp,
      Optional<TelegramOverride> telegram,
      Map<String, ProviderOverride> providers) {
    this.email = email;
    this.sms = sms;
    this.whatsapp = whatsapp;
    this.push = push;
    this.webhook = webhook;
    this.voice = voice;
    this.slack = slack;
    this.inApp = inApp;
    this.telegram = telegram;
    this.providers = providers;
  }

  @JsonProperty("email")
  public Optional<EmailOverride> getEmail() {
    return email;
  }

  @JsonProperty("sms")
  public Optional<SmsOverride> getSms() {
    return sms;
  }

  @JsonProperty("whatsapp")
  public Optional<WhatsappOverride> getWhatsapp() {
    return whatsapp;
  }

  @JsonProperty("push")
  public Optional<PushOverride> getPush() {
    return push;
  }

  @JsonProperty("webhook")
  public Optional<WebhookOverride> getWebhook() {
    return webhook;
  }

  @JsonProperty("voice")
  public Optional<VoiceOverride> getVoice() {
    return voice;
  }

  @JsonProperty("slack")
  public Optional<SlackOverride> getSlack() {
    return slack;
  }

  @JsonProperty("in_app")
  public Optional<InAppOverride> getInApp() {
    return inApp;
  }

  @JsonProperty("telegram")
  public Optional<TelegramOverride> getTelegram() {
    return telegram;
  }

  @JsonProperty("providers")
  public Map<String, ProviderOverride> getProviders() {
    return providers;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EventOverride && equalTo((EventOverride) other);
  }

  private boolean equalTo(EventOverride other) {
    return email.equals(other.email)
        && sms.equals(other.sms)
        && whatsapp.equals(other.whatsapp)
        && push.equals(other.push)
        && webhook.equals(other.webhook)
        && voice.equals(other.voice)
        && slack.equals(other.slack)
        && inApp.equals(other.inApp)
        && telegram.equals(other.telegram)
        && providers.equals(other.providers);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.email,
              this.sms,
              this.whatsapp,
              this.push,
              this.webhook,
              this.voice,
              this.slack,
              this.inApp,
              this.telegram,
              this.providers);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EventOverride{"
        + "email: "
        + email
        + ", sms: "
        + sms
        + ", whatsapp: "
        + whatsapp
        + ", push: "
        + push
        + ", webhook: "
        + webhook
        + ", voice: "
        + voice
        + ", slack: "
        + slack
        + ", inApp: "
        + inApp
        + ", telegram: "
        + telegram
        + ", providers: "
        + providers
        + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder {
    private Optional<EmailOverride> email = Optional.empty();

    private Optional<SmsOverride> sms = Optional.empty();

    private Optional<WhatsappOverride> whatsapp = Optional.empty();

    private Optional<PushOverride> push = Optional.empty();

    private Optional<WebhookOverride> webhook = Optional.empty();

    private Optional<VoiceOverride> voice = Optional.empty();

    private Optional<SlackOverride> slack = Optional.empty();

    private Optional<InAppOverride> inApp = Optional.empty();

    private Optional<TelegramOverride> telegram = Optional.empty();

    private Map<String, ProviderOverride> providers = new LinkedHashMap<>();

    private Builder() {}

    public Builder from(EventOverride other) {
      email(other.getEmail());
      sms(other.getSms());
      whatsapp(other.getWhatsapp());
      push(other.getPush());
      webhook(other.getWebhook());
      voice(other.getVoice());
      slack(other.getSlack());
      inApp(other.getInApp());
      telegram(other.getTelegram());
      providers(other.getProviders());
      return this;
    }

    @JsonSetter(value = "email", nulls = Nulls.SKIP)
    public Builder email(Optional<EmailOverride> email) {
      this.email = email;
      return this;
    }

    public Builder email(EmailOverride email) {
      this.email = Optional.of(email);
      return this;
    }

    @JsonSetter(value = "sms", nulls = Nulls.SKIP)
    public Builder sms(Optional<SmsOverride> sms) {
      this.sms = sms;
      return this;
    }

    public Builder sms(SmsOverride sms) {
      this.sms = Optional.of(sms);
      return this;
    }

    @JsonSetter(value = "whatsapp", nulls = Nulls.SKIP)
    public Builder whatsapp(Optional<WhatsappOverride> whatsapp) {
      this.whatsapp = whatsapp;
      return this;
    }

    public Builder whatsapp(WhatsappOverride whatsapp) {
      this.whatsapp = Optional.of(whatsapp);
      return this;
    }

    @JsonSetter(value = "push", nulls = Nulls.SKIP)
    public Builder push(Optional<PushOverride> push) {
      this.push = push;
      return this;
    }

    public Builder push(PushOverride push) {
      this.push = Optional.of(push);
      return this;
    }

    @JsonSetter(value = "webhook", nulls = Nulls.SKIP)
    public Builder webhook(Optional<WebhookOverride> webhook) {
      this.webhook = webhook;
      return this;
    }

    public Builder webhook(WebhookOverride webhook) {
      this.webhook = Optional.of(webhook);
      return this;
    }

    @JsonSetter(value = "voice", nulls = Nulls.SKIP)
    public Builder voice(Optional<VoiceOverride> voice) {
      this.voice = voice;
      return this;
    }

    public Builder voice(VoiceOverride voice) {
      this.voice = Optional.of(voice);
      return this;
    }

    @JsonSetter(value = "slack", nulls = Nulls.SKIP)
    public Builder slack(Optional<SlackOverride> slack) {
      this.slack = slack;
      return this;
    }

    public Builder slack(SlackOverride slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @JsonSetter(value = "in_app", nulls = Nulls.SKIP)
    public Builder inApp(Optional<InAppOverride> inApp) {
      this.inApp = inApp;
      return this;
    }

    public Builder inApp(InAppOverride inApp) {
      this.inApp = Optional.of(inApp);
      return this;
    }

    @JsonSetter(value = "telegram", nulls = Nulls.SKIP)
    public Builder telegram(Optional<TelegramOverride> telegram) {
      this.telegram = telegram;
      return this;
    }

    public Builder telegram(TelegramOverride telegram) {
      this.telegram = Optional.of(telegram);
      return this;
    }

    @JsonSetter(value = "providers", nulls = Nulls.SKIP)
    public Builder providers(Map<String, ProviderOverride> providers) {
      this.providers.clear();
      this.providers.putAll(providers);
      return this;
    }

    public Builder putAllProviders(Map<String, ProviderOverride> providers) {
      this.providers.putAll(providers);
      return this;
    }

    public Builder providers(String key, ProviderOverride value) {
      this.providers.put(key, value);
      return this;
    }

    public EventOverride build() {
      return new EventOverride(
          email, sms, whatsapp, push, webhook, voice, slack, inApp, telegram, providers);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/IChannelOverride.java]=[
package com.fern.basic.resources.raven.event.types;

public interface IChannelOverride {
  long getScheduleAt();
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/InAppOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = InAppOverride.Builder.class)
public final class InAppOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  InAppOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof InAppOverride && equalTo((InAppOverride) other);
  }

  private boolean equalTo(InAppOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "InAppOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(InAppOverride other);
  }

  public interface _FinalStage {
    InAppOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {}

    @Override
    public Builder from(InAppOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public InAppOverride build() {
      return new InAppOverride(scheduleAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/Param.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = Param.Builder.class)
public final class Param {
  private final String name;

  private final String value;

  private int _cachedHashCode;

  Param(String name, String value) {
    this.name = name;
    this.value = value;
  }

  @JsonProperty("name")
  public String getName() {
    return name;
  }

  @JsonProperty("value")
  public String getValue() {
    return value;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Param && equalTo((Param) other);
  }

  private boolean equalTo(Param other) {
    return name.equals(other.name) && value.equals(other.value);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.name, this.value);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "Param{" + "name: " + name + ", value: " + value + "}";
  }

  public static NameStage builder() {
    return new Builder();
  }

  public interface NameStage {
    ValueStage name(String name);

    Builder from(Param other);
  }

  public interface ValueStage {
    _FinalStage value(String value);
  }

  public interface _FinalStage {
    Param build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements NameStage, ValueStage, _FinalStage {
    private String name;

    private String value;

    private Builder() {}

    @Override
    public Builder from(Param other) {
      name(other.getName());
      value(other.getValue());
      return this;
    }

    @Override
    @JsonSetter("name")
    public ValueStage name(String name) {
      this.name = name;
      return this;
    }

    @Override
    @JsonSetter("value")
    public _FinalStage value(String value) {
      this.value = value;
      return this;
    }

    @Override
    public Param build() {
      return new Param(name, value);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/ProviderOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = ProviderOverride.Builder.class)
public final class ProviderOverride {
  private final Map<String, Optional<Object>> payload;

  private final List<Param> formParams;

  private final List<Param> queryParams;

  private final List<Param> pathParams;

  private final List<Param> headers;

  private int _cachedHashCode;

  ProviderOverride(
      Map<String, Optional<Object>> payload,
      List<Param> formParams,
      List<Param> queryParams,
      List<Param> pathParams,
      List<Param> headers) {
    this.payload = payload;
    this.formParams = formParams;
    this.queryParams = queryParams;
    this.pathParams = pathParams;
    this.headers = headers;
  }

  @JsonProperty("payload")
  public Map<String, Optional<Object>> getPayload() {
    return payload;
  }

  @JsonProperty("form_params")
  public List<Param> getFormParams() {
    return formParams;
  }

  @JsonProperty("query_params")
  public List<Param> getQueryParams() {
    return queryParams;
  }

  @JsonProperty("path_params")
  public List<Param> getPathParams() {
    return pathParams;
  }

  @JsonProperty("headers")
  public List<Param> getHeaders() {
    return headers;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ProviderOverride && equalTo((ProviderOverride) other);
  }

  private boolean equalTo(ProviderOverride other) {
    return payload.equals(other.payload)
        && formParams.equals(other.formParams)
        && queryParams.equals(other.queryParams)
        && pathParams.equals(other.pathParams)
        && headers.equals(other.headers);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.payload, this.formParams, this.queryParams, this.pathParams, this.headers);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ProviderOverride{"
        + "payload: "
        + payload
        + ", formParams: "
        + formParams
        + ", queryParams: "
        + queryParams
        + ", pathParams: "
        + pathParams
        + ", headers: "
        + headers
        + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder {
    private Map<String, Optional<Object>> payload = new LinkedHashMap<>();

    private List<Param> formParams = new ArrayList<>();

    private List<Param> queryParams = new ArrayList<>();

    private List<Param> pathParams = new ArrayList<>();

    private List<Param> headers = new ArrayList<>();

    private Builder() {}

    public Builder from(ProviderOverride other) {
      payload(other.getPayload());
      formParams(other.getFormParams());
      queryParams(other.getQueryParams());
      pathParams(other.getPathParams());
      headers(other.getHeaders());
      return this;
    }

    @JsonSetter(value = "payload", nulls = Nulls.SKIP)
    public Builder payload(Map<String, Optional<Object>> payload) {
      this.payload.clear();
      this.payload.putAll(payload);
      return this;
    }

    public Builder putAllPayload(Map<String, Optional<Object>> payload) {
      this.payload.putAll(payload);
      return this;
    }

    public Builder payload(String key, Optional<Object> value) {
      this.payload.put(key, value);
      return this;
    }

    @JsonSetter(value = "form_params", nulls = Nulls.SKIP)
    public Builder formParams(List<Param> formParams) {
      this.formParams.clear();
      this.formParams.addAll(formParams);
      return this;
    }

    public Builder addFormParams(Param formParams) {
      this.formParams.add(formParams);
      return this;
    }

    public Builder addAllFormParams(List<Param> formParams) {
      this.formParams.addAll(formParams);
      return this;
    }

    @JsonSetter(value = "query_params", nulls = Nulls.SKIP)
    public Builder queryParams(List<Param> queryParams) {
      this.queryParams.clear();
      this.queryParams.addAll(queryParams);
      return this;
    }

    public Builder addQueryParams(Param queryParams) {
      this.queryParams.add(queryParams);
      return this;
    }

    public Builder addAllQueryParams(List<Param> queryParams) {
      this.queryParams.addAll(queryParams);
      return this;
    }

    @JsonSetter(value = "path_params", nulls = Nulls.SKIP)
    public Builder pathParams(List<Param> pathParams) {
      this.pathParams.clear();
      this.pathParams.addAll(pathParams);
      return this;
    }

    public Builder addPathParams(Param pathParams) {
      this.pathParams.add(pathParams);
      return this;
    }

    public Builder addAllPathParams(List<Param> pathParams) {
      this.pathParams.addAll(pathParams);
      return this;
    }

    @JsonSetter(value = "headers", nulls = Nulls.SKIP)
    public Builder headers(List<Param> headers) {
      this.headers.clear();
      this.headers.addAll(headers);
      return this;
    }

    public Builder addHeaders(Param headers) {
      this.headers.add(headers);
      return this;
    }

    public Builder addAllHeaders(List<Param> headers) {
      this.headers.addAll(headers);
      return this;
    }

    public ProviderOverride build() {
      return new ProviderOverride(payload, formParams, queryParams, pathParams, headers);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/PushOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = PushOverride.Builder.class)
public final class PushOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  PushOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PushOverride && equalTo((PushOverride) other);
  }

  private boolean equalTo(PushOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "PushOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(PushOverride other);
  }

  public interface _FinalStage {
    PushOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {}

    @Override
    public Builder from(PushOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public PushOverride build() {
      return new PushOverride(scheduleAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/SendEventResponse.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = SendEventResponse.Builder.class)
public final class SendEventResponse {
  private final String id;

  private final boolean success;

  private int _cachedHashCode;

  SendEventResponse(String id, boolean success) {
    this.id = id;
    this.success = success;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("success")
  public boolean getSuccess() {
    return success;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SendEventResponse && equalTo((SendEventResponse) other);
  }

  private boolean equalTo(SendEventResponse other) {
    return id.equals(other.id) && success == other.success;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.success);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SendEventResponse{" + "id: " + id + ", success: " + success + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    SuccessStage id(String id);

    Builder from(SendEventResponse other);
  }

  public interface SuccessStage {
    _FinalStage success(boolean success);
  }

  public interface _FinalStage {
    SendEventResponse build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements IdStage, SuccessStage, _FinalStage {
    private String id;

    private boolean success;

    private Builder() {}

    @Override
    public Builder from(SendEventResponse other) {
      id(other.getId());
      success(other.getSuccess());
      return this;
    }

    @Override
    @JsonSetter("id")
    public SuccessStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("success")
    public _FinalStage success(boolean success) {
      this.success = success;
      return this;
    }

    @Override
    public SendEventResponse build() {
      return new SendEventResponse(id, success);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/SlackMessage.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = SlackMessage.Builder.class)
public final class SlackMessage {
  private final String text;

  private final Optional<Object> blocks;

  private int _cachedHashCode;

  SlackMessage(String text, Optional<Object> blocks) {
    this.text = text;
    this.blocks = blocks;
  }

  @JsonProperty("text")
  public String getText() {
    return text;
  }

  @JsonProperty("blocks")
  public Optional<Object> getBlocks() {
    return blocks;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SlackMessage && equalTo((SlackMessage) other);
  }

  private boolean equalTo(SlackMessage other) {
    return text.equals(other.text) && blocks.equals(other.blocks);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.text, this.blocks);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SlackMessage{" + "text: " + text + ", blocks: " + blocks + "}";
  }

  public static TextStage builder() {
    return new Builder();
  }

  public interface TextStage {
    _FinalStage text(String text);

    Builder from(SlackMessage other);
  }

  public interface _FinalStage {
    SlackMessage build();

    _FinalStage blocks(Optional<Object> blocks);

    _FinalStage blocks(Object blocks);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements TextStage, _FinalStage {
    private String text;

    private Optional<Object> blocks = Optional.empty();

    private Builder() {}

    @Override
    public Builder from(SlackMessage other) {
      text(other.getText());
      blocks(other.getBlocks());
      return this;
    }

    @Override
    @JsonSetter("text")
    public _FinalStage text(String text) {
      this.text = text;
      return this;
    }

    @Override
    public _FinalStage blocks(Object blocks) {
      this.blocks = Optional.of(blocks);
      return this;
    }

    @Override
    @JsonSetter(value = "blocks", nulls = Nulls.SKIP)
    public _FinalStage blocks(Optional<Object> blocks) {
      this.blocks = blocks;
      return this;
    }

    @Override
    public SlackMessage build() {
      return new SlackMessage(text, blocks);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/SlackOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = SlackOverride.Builder.class)
public final class SlackOverride implements IChannelOverride {
  private final long scheduleAt;

  private final SlackMessage message;

  private int _cachedHashCode;

  SlackOverride(long scheduleAt, SlackMessage message) {
    this.scheduleAt = scheduleAt;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("message")
  public SlackMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SlackOverride && equalTo((SlackOverride) other);
  }

  private boolean equalTo(SlackOverride other) {
    return scheduleAt == other.scheduleAt && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SlackOverride{" + "scheduleAt: " + scheduleAt + ", message: " + message + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    MessageStage scheduleAt(long scheduleAt);

    Builder from(SlackOverride other);
  }

  public interface MessageStage {
    _FinalStage message(SlackMessage message);
  }

  public interface _FinalStage {
    SlackOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private SlackMessage message;

    private Builder() {}

    @Override
    public Builder from(SlackOverride other) {
      scheduleAt(other.getScheduleAt());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public MessageStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(SlackMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public SlackOverride build() {
      return new SlackOverride(scheduleAt, message);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/SmsMessage.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = SmsMessage.Builder.class)
public final class SmsMessage {
  private final String text;

  private int _cachedHashCode;

  SmsMessage(String text) {
    this.text = text;
  }

  @JsonProperty("text")
  public String getText() {
    return text;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SmsMessage && equalTo((SmsMessage) other);
  }

  private boolean equalTo(SmsMessage other) {
    return text.equals(other.text);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.text);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SmsMessage{" + "text: " + text + "}";
  }

  public static TextStage builder() {
    return new Builder();
  }

  public interface TextStage {
    _FinalStage text(String text);

    Builder from(SmsMessage other);
  }

  public interface _FinalStage {
    SmsMessage build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements TextStage, _FinalStage {
    private String text;

    private Builder() {}

    @Override
    public Builder from(SmsMessage other) {
      text(other.getText());
      return this;
    }

    @Override
    @JsonSetter("text")
    public _FinalStage text(String text) {
      this.text = text;
      return this;
    }

    @Override
    public SmsMessage build() {
      return new SmsMessage(text);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/SmsOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = SmsOverride.Builder.class)
public final class SmsOverride implements IChannelOverride {
  private final long scheduleAt;

  private final String sender;

  private final SmsMessage message;

  private int _cachedHashCode;

  SmsOverride(long scheduleAt, String sender, SmsMessage message) {
    this.scheduleAt = scheduleAt;
    this.sender = sender;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("sender")
  public String getSender() {
    return sender;
  }

  @JsonProperty("message")
  public SmsMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SmsOverride && equalTo((SmsOverride) other);
  }

  private boolean equalTo(SmsOverride other) {
    return scheduleAt == other.scheduleAt
        && sender.equals(other.sender)
        && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt, this.sender, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SmsOverride{"
        + "scheduleAt: "
        + scheduleAt
        + ", sender: "
        + sender
        + ", message: "
        + message
        + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    SenderStage scheduleAt(long scheduleAt);

    Builder from(SmsOverride other);
  }

  public interface SenderStage {
    MessageStage sender(String sender);
  }

  public interface MessageStage {
    _FinalStage message(SmsMessage message);
  }

  public interface _FinalStage {
    SmsOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder
      implements ScheduleAtStage, SenderStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private String sender;

    private SmsMessage message;

    private Builder() {}

    @Override
    public Builder from(SmsOverride other) {
      scheduleAt(other.getScheduleAt());
      sender(other.getSender());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public SenderStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("sender")
    public MessageStage sender(String sender) {
      this.sender = sender;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(SmsMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public SmsOverride build() {
      return new SmsOverride(scheduleAt, sender, message);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/TelegramOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = TelegramOverride.Builder.class)
public final class TelegramOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  TelegramOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TelegramOverride && equalTo((TelegramOverride) other);
  }

  private boolean equalTo(TelegramOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "TelegramOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(TelegramOverride other);
  }

  public interface _FinalStage {
    TelegramOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {}

    @Override
    public Builder from(TelegramOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public TelegramOverride build() {
      return new TelegramOverride(scheduleAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/User.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.basic.resources.raven.user.types.SlackProfile;
import com.fern.basic.resources.raven.user.types.TelegramProfile;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = User.Builder.class)
public final class User {
  private final Optional<String> userId;

  private final Optional<String> email;

  private final Optional<String> mobile;

  private final Optional<String> whatsappMobile;

  private final Optional<String> onesignalExternalId;

  private final Optional<List<String>> onesignalPlayerIds;

  private final Optional<List<String>> fcmTokens;

  private final Optional<List<String>> iosTokens;

  private final Optional<SlackProfile> slack;

  private final Optional<TelegramProfile> telegram;

  private final Optional<String> fcmTopic;

  private final Optional<String> fcmDeviceGroup;

  private int _cachedHashCode;

  User(
      Optional<String> userId,
      Optional<String> email,
      Optional<String> mobile,
      Optional<String> whatsappMobile,
      Optional<String> onesignalExternalId,
      Optional<List<String>> onesignalPlayerIds,
      Optional<List<String>> fcmTokens,
      Optional<List<String>> iosTokens,
      Optional<SlackProfile> slack,
      Optional<TelegramProfile> telegram,
      Optional<String> fcmTopic,
      Optional<String> fcmDeviceGroup) {
    this.userId = userId;
    this.email = email;
    this.mobile = mobile;
    this.whatsappMobile = whatsappMobile;
    this.onesignalExternalId = onesignalExternalId;
    this.onesignalPlayerIds = onesignalPlayerIds;
    this.fcmTokens = fcmTokens;
    this.iosTokens = iosTokens;
    this.slack = slack;
    this.telegram = telegram;
    this.fcmTopic = fcmTopic;
    this.fcmDeviceGroup = fcmDeviceGroup;
  }

  /**
   * @return userId to send the notifications to. This is your own user identifier which you have
   *     used to create user on Raven
   */
  @JsonProperty("user_id")
  public Optional<String> getUserId() {
    return userId;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return mobile with country code prefix (e.g +91)
   */
  @JsonProperty("mobile")
  public Optional<String> getMobile() {
    return mobile;
  }

  /**
   * @return mobile with country code prefix (e.g. +91). if empty, <code>mobile</code> is considered
   *     for whatsapp
   */
  @JsonProperty("whatsapp_mobile")
  public Optional<String> getWhatsappMobile() {
    return whatsappMobile;
  }

  /**
   * @return <a href="https://documentation.onesignal.com/docs/external-user-ids">OneSignal external
   *     user IDs</a>
   */
  @JsonProperty("onesignal_external_id")
  public Optional<String> getOnesignalExternalId() {
    return onesignalExternalId;
  }

  @JsonProperty("onesignal_player_ids")
  public Optional<List<String>> getOnesignalPlayerIds() {
    return onesignalPlayerIds;
  }

  /**
   * @return List of fcm tokens. eg. [&quot;&lt;fcmtoken1&quot;, &quot;&lt;fcmtoken2&gt;&quot;]
   */
  @JsonProperty("fcm_tokens")
  public Optional<List<String>> getFcmTokens() {
    return fcmTokens;
  }

  @JsonProperty("ios_tokens")
  public Optional<List<String>> getIosTokens() {
    return iosTokens;
  }

  @JsonProperty("slack")
  public Optional<SlackProfile> getSlack() {
    return slack;
  }

  @JsonProperty("telegram")
  public Optional<TelegramProfile> getTelegram() {
    return telegram;
  }

  @JsonProperty("fcm_topic")
  public Optional<String> getFcmTopic() {
    return fcmTopic;
  }

  @JsonProperty("fcm_device_group")
  public Optional<String> getFcmDeviceGroup() {
    return fcmDeviceGroup;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof User && equalTo((User) other);
  }

  private boolean equalTo(User other) {
    return userId.equals(other.userId)
        && email.equals(other.email)
        && mobile.equals(other.mobile)
        && whatsappMobile.equals(other.whatsappMobile)
        && onesignalExternalId.equals(other.onesignalExternalId)
        && onesignalPlayerIds.equals(other.onesignalPlayerIds)
        && fcmTokens.equals(other.fcmTokens)
        && iosTokens.equals(other.iosTokens)
        && slack.equals(other.slack)
        && telegram.equals(other.telegram)
        && fcmTopic.equals(other.fcmTopic)
        && fcmDeviceGroup.equals(other.fcmDeviceGroup);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.userId,
              this.email,
              this.mobile,
              this.whatsappMobile,
              this.onesignalExternalId,
              this.onesignalPlayerIds,
              this.fcmTokens,
              this.iosTokens,
              this.slack,
              this.telegram,
              this.fcmTopic,
              this.fcmDeviceGroup);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "User{"
        + "userId: "
        + userId
        + ", email: "
        + email
        + ", mobile: "
        + mobile
        + ", whatsappMobile: "
        + whatsappMobile
        + ", onesignalExternalId: "
        + onesignalExternalId
        + ", onesignalPlayerIds: "
        + onesignalPlayerIds
        + ", fcmTokens: "
        + fcmTokens
        + ", iosTokens: "
        + iosTokens
        + ", slack: "
        + slack
        + ", telegram: "
        + telegram
        + ", fcmTopic: "
        + fcmTopic
        + ", fcmDeviceGroup: "
        + fcmDeviceGroup
        + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder {
    private Optional<String> userId = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Optional<String> mobile = Optional.empty();

    private Optional<String> whatsappMobile = Optional.empty();

    private Optional<String> onesignalExternalId = Optional.empty();

    private Optional<List<String>> onesignalPlayerIds = Optional.empty();

    private Optional<List<String>> fcmTokens = Optional.empty();

    private Optional<List<String>> iosTokens = Optional.empty();

    private Optional<SlackProfile> slack = Optional.empty();

    private Optional<TelegramProfile> telegram = Optional.empty();

    private Optional<String> fcmTopic = Optional.empty();

    private Optional<String> fcmDeviceGroup = Optional.empty();

    private Builder() {}

    public Builder from(User other) {
      userId(other.getUserId());
      email(other.getEmail());
      mobile(other.getMobile());
      whatsappMobile(other.getWhatsappMobile());
      onesignalExternalId(other.getOnesignalExternalId());
      onesignalPlayerIds(other.getOnesignalPlayerIds());
      fcmTokens(other.getFcmTokens());
      iosTokens(other.getIosTokens());
      slack(other.getSlack());
      telegram(other.getTelegram());
      fcmTopic(other.getFcmTopic());
      fcmDeviceGroup(other.getFcmDeviceGroup());
      return this;
    }

    @JsonSetter(value = "user_id", nulls = Nulls.SKIP)
    public Builder userId(Optional<String> userId) {
      this.userId = userId;
      return this;
    }

    public Builder userId(String userId) {
      this.userId = Optional.of(userId);
      return this;
    }

    @JsonSetter(value = "email", nulls = Nulls.SKIP)
    public Builder email(Optional<String> email) {
      this.email = email;
      return this;
    }

    public Builder email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @JsonSetter(value = "mobile", nulls = Nulls.SKIP)
    public Builder mobile(Optional<String> mobile) {
      this.mobile = mobile;
      return this;
    }

    public Builder mobile(String mobile) {
      this.mobile = Optional.of(mobile);
      return this;
    }

    @JsonSetter(value = "whatsapp_mobile", nulls = Nulls.SKIP)
    public Builder whatsappMobile(Optional<String> whatsappMobile) {
      this.whatsappMobile = whatsappMobile;
      return this;
    }

    public Builder whatsappMobile(String whatsappMobile) {
      this.whatsappMobile = Optional.of(whatsappMobile);
      return this;
    }

    @JsonSetter(value = "onesignal_external_id", nulls = Nulls.SKIP)
    public Builder onesignalExternalId(Optional<String> onesignalExternalId) {
      this.onesignalExternalId = onesignalExternalId;
      return this;
    }

    public Builder onesignalExternalId(String onesignalExternalId) {
      this.onesignalExternalId = Optional.of(onesignalExternalId);
      return this;
    }

    @JsonSetter(value = "onesignal_player_ids", nulls = Nulls.SKIP)
    public Builder onesignalPlayerIds(Optional<List<String>> onesignalPlayerIds) {
      this.onesignalPlayerIds = onesignalPlayerIds;
      return this;
    }

    public Builder onesignalPlayerIds(List<String> onesignalPlayerIds) {
      this.onesignalPlayerIds = Optional.of(onesignalPlayerIds);
      return this;
    }

    @JsonSetter(value = "fcm_tokens", nulls = Nulls.SKIP)
    public Builder fcmTokens(Optional<List<String>> fcmTokens) {
      this.fcmTokens = fcmTokens;
      return this;
    }

    public Builder fcmTokens(List<String> fcmTokens) {
      this.fcmTokens = Optional.of(fcmTokens);
      return this;
    }

    @JsonSetter(value = "ios_tokens", nulls = Nulls.SKIP)
    public Builder iosTokens(Optional<List<String>> iosTokens) {
      this.iosTokens = iosTokens;
      return this;
    }

    public Builder iosTokens(List<String> iosTokens) {
      this.iosTokens = Optional.of(iosTokens);
      return this;
    }

    @JsonSetter(value = "slack", nulls = Nulls.SKIP)
    public Builder slack(Optional<SlackProfile> slack) {
      this.slack = slack;
      return this;
    }

    public Builder slack(SlackProfile slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @JsonSetter(value = "telegram", nulls = Nulls.SKIP)
    public Builder telegram(Optional<TelegramProfile> telegram) {
      this.telegram = telegram;
      return this;
    }

    public Builder telegram(TelegramProfile telegram) {
      this.telegram = Optional.of(telegram);
      return this;
    }

    @JsonSetter(value = "fcm_topic", nulls = Nulls.SKIP)
    public Builder fcmTopic(Optional<String> fcmTopic) {
      this.fcmTopic = fcmTopic;
      return this;
    }

    public Builder fcmTopic(String fcmTopic) {
      this.fcmTopic = Optional.of(fcmTopic);
      return this;
    }

    @JsonSetter(value = "fcm_device_group", nulls = Nulls.SKIP)
    public Builder fcmDeviceGroup(Optional<String> fcmDeviceGroup) {
      this.fcmDeviceGroup = fcmDeviceGroup;
      return this;
    }

    public Builder fcmDeviceGroup(String fcmDeviceGroup) {
      this.fcmDeviceGroup = Optional.of(fcmDeviceGroup);
      return this;
    }

    public User build() {
      return new User(
          userId,
          email,
          mobile,
          whatsappMobile,
          onesignalExternalId,
          onesignalPlayerIds,
          fcmTokens,
          iosTokens,
          slack,
          telegram,
          fcmTopic,
          fcmDeviceGroup);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/VoiceOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = VoiceOverride.Builder.class)
public final class VoiceOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  VoiceOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof VoiceOverride && equalTo((VoiceOverride) other);
  }

  private boolean equalTo(VoiceOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "VoiceOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(VoiceOverride other);
  }

  public interface _FinalStage {
    VoiceOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {}

    @Override
    public Builder from(VoiceOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public VoiceOverride build() {
      return new VoiceOverride(scheduleAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/WebhookOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = WebhookOverride.Builder.class)
public final class WebhookOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  WebhookOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WebhookOverride && equalTo((WebhookOverride) other);
  }

  private boolean equalTo(WebhookOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "WebhookOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(WebhookOverride other);
  }

  public interface _FinalStage {
    WebhookOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {}

    @Override
    public Builder from(WebhookOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public WebhookOverride build() {
      return new WebhookOverride(scheduleAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/event/types/WhatsappOverride.java]=[
package com.fern.basic.resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = WhatsappOverride.Builder.class)
public final class WhatsappOverride implements IChannelOverride {
  private final long scheduleAt;

  private final SmsMessage message;

  private int _cachedHashCode;

  WhatsappOverride(long scheduleAt, SmsMessage message) {
    this.scheduleAt = scheduleAt;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("message")
  public SmsMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WhatsappOverride && equalTo((WhatsappOverride) other);
  }

  private boolean equalTo(WhatsappOverride other) {
    return scheduleAt == other.scheduleAt && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "WhatsappOverride{" + "scheduleAt: " + scheduleAt + ", message: " + message + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    MessageStage scheduleAt(long scheduleAt);

    Builder from(WhatsappOverride other);
  }

  public interface MessageStage {
    _FinalStage message(SmsMessage message);
  }

  public interface _FinalStage {
    WhatsappOverride build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ScheduleAtStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private SmsMessage message;

    private Builder() {}

    @Override
    public Builder from(WhatsappOverride other) {
      scheduleAt(other.getScheduleAt());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public MessageStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(SmsMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public WhatsappOverride build() {
      return new WhatsappOverride(scheduleAt, message);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/UserClient.java]=[
package com.fern.basic.resources.raven.user;

import com.fern.basic.resources.raven.user.requests.CreateUserRequest;
import com.fern.basic.resources.raven.user.types.RavenUser;

public interface UserClient {
  RavenUser createOrUpdate(String appId, CreateUserRequest request);

  RavenUser get(String appId, String userId);
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/UserClientImpl.java]=[
package com.fern.basic.resources.raven.user;

import com.fern.basic.core.ClientOptions;
import com.fern.basic.core.ObjectMappers;
import com.fern.basic.resources.raven.user.requests.CreateUserRequest;
import com.fern.basic.resources.raven.user.types.RavenUser;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public final class UserClientImpl implements UserClient {
  private final ClientOptions clientOptions;

  public UserClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public RavenUser createOrUpdate(String appId, CreateUserRequest request) {
    HttpUrl.Builder _httpUrlBuilder =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("users");
    HttpUrl _httpUrl = _httpUrlBuilder.build();
    Map<String, Object> _requestBodyProperties = new HashMap<>();
    _requestBodyProperties.put("user_id", request.getUserId());
    _requestBodyProperties.put("mobile", request.getMobile());
    _requestBodyProperties.put("email", request.getEmail());
    _requestBodyProperties.put("whats_app", request.getWhatsApp());
    RequestBody _requestBody;
    try {
      _requestBody =
          RequestBody.create(
              ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties),
              MediaType.parse("application/json"));
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
    Request.Builder _requestBuilder =
        new Request.Builder()
            .url(_httpUrl)
            .method("POST", _requestBody)
            .headers(Headers.of(clientOptions.headers()));
    Request _request = _requestBuilder.build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), RavenUser.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public RavenUser get(String appId, String userId) {
    HttpUrl _httpUrl =
        HttpUrl.parse(this.clientOptions.environment().getUrl())
            .newBuilder()
            .addPathSegments("v1/apps")
            .addPathSegment(appId)
            .addPathSegments("users/")
            .addPathSegment(userId)
            .build();
    Request _request =
        new Request.Builder()
            .url(_httpUrl)
            .method("GET", null)
            .headers(Headers.of(clientOptions.headers()))
            .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), RavenUser.class);
      }
      throw new RuntimeException();
    } catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/requests/CreateUserRequest.java]=[
package com.fern.basic.resources.raven.user.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = CreateUserRequest.Builder.class)
public final class CreateUserRequest {
  private final String userId;

  private final Optional<String> mobile;

  private final Optional<String> email;

  private final Optional<String> whatsApp;

  private int _cachedHashCode;

  CreateUserRequest(
      String userId, Optional<String> mobile, Optional<String> email, Optional<String> whatsApp) {
    this.userId = userId;
    this.mobile = mobile;
    this.email = email;
    this.whatsApp = whatsApp;
  }

  /**
   * @return Your user identifier. if user_id already exists, user properties will be updated else a
   *     new user will be created
   */
  @JsonProperty("user_id")
  public String getUserId() {
    return userId;
  }

  @JsonProperty("mobile")
  public Optional<String> getMobile() {
    return mobile;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return include this only when user's whatsapp mobile is different than primary mobile
   */
  @JsonProperty("whats_app")
  public Optional<String> getWhatsApp() {
    return whatsApp;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateUserRequest && equalTo((CreateUserRequest) other);
  }

  private boolean equalTo(CreateUserRequest other) {
    return userId.equals(other.userId)
        && mobile.equals(other.mobile)
        && email.equals(other.email)
        && whatsApp.equals(other.whatsApp);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.userId, this.mobile, this.email, this.whatsApp);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "CreateUserRequest{"
        + "userId: "
        + userId
        + ", mobile: "
        + mobile
        + ", email: "
        + email
        + ", whatsApp: "
        + whatsApp
        + "}";
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    _FinalStage userId(String userId);

    Builder from(CreateUserRequest other);
  }

  public interface _FinalStage {
    CreateUserRequest build();

    _FinalStage mobile(Optional<String> mobile);

    _FinalStage mobile(String mobile);

    _FinalStage email(Optional<String> email);

    _FinalStage email(String email);

    _FinalStage whatsApp(Optional<String> whatsApp);

    _FinalStage whatsApp(String whatsApp);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements UserIdStage, _FinalStage {
    private String userId;

    private Optional<String> whatsApp = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Optional<String> mobile = Optional.empty();

    private Builder() {}

    @Override
    public Builder from(CreateUserRequest other) {
      userId(other.getUserId());
      mobile(other.getMobile());
      email(other.getEmail());
      whatsApp(other.getWhatsApp());
      return this;
    }

    /**
     * Your user identifier. if user_id already exists, user properties will be updated else a new
     * user will be created
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("user_id")
    public _FinalStage userId(String userId) {
      this.userId = userId;
      return this;
    }

    /**
     * include this only when user's whatsapp mobile is different than primary mobile
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage whatsApp(String whatsApp) {
      this.whatsApp = Optional.of(whatsApp);
      return this;
    }

    @Override
    @JsonSetter(value = "whats_app", nulls = Nulls.SKIP)
    public _FinalStage whatsApp(Optional<String> whatsApp) {
      this.whatsApp = whatsApp;
      return this;
    }

    @Override
    public _FinalStage email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @Override
    @JsonSetter(value = "email", nulls = Nulls.SKIP)
    public _FinalStage email(Optional<String> email) {
      this.email = email;
      return this;
    }

    @Override
    public _FinalStage mobile(String mobile) {
      this.mobile = Optional.of(mobile);
      return this;
    }

    @Override
    @JsonSetter(value = "mobile", nulls = Nulls.SKIP)
    public _FinalStage mobile(Optional<String> mobile) {
      this.mobile = mobile;
      return this;
    }

    @Override
    public CreateUserRequest build() {
      return new CreateUserRequest(userId, mobile, email, whatsApp);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/types/Channel.java]=[
package com.fern.basic.resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.util.Locale;

public final class Channel {
  public static final Channel SMS = new Channel(Value.SMS, "SMS");

  public static final Channel IN_APP = new Channel(Value.IN_APP, "IN_APP");

  public static final Channel TELEGRAM = new Channel(Value.TELEGRAM, "TELEGRAM");

  public static final Channel PUSH = new Channel(Value.PUSH, "PUSH");

  public static final Channel WHATSAPP = new Channel(Value.WHATSAPP, "WHATSAPP");

  public static final Channel SLACK = new Channel(Value.SLACK, "SLACK");

  public static final Channel EMAIL = new Channel(Value.EMAIL, "EMAIL");

  public static final Channel WEBHOOK = new Channel(Value.WEBHOOK, "WEBHOOK");

  public static final Channel VOICE = new Channel(Value.VOICE, "VOICE");

  private final Value value;

  private final String string;

  Channel(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other)
        || (other instanceof Channel && this.string.equals(((Channel) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case SMS:
        return visitor.visitSms();
      case IN_APP:
        return visitor.visitInApp();
      case TELEGRAM:
        return visitor.visitTelegram();
      case PUSH:
        return visitor.visitPush();
      case WHATSAPP:
        return visitor.visitWhatsapp();
      case SLACK:
        return visitor.visitSlack();
      case EMAIL:
        return visitor.visitEmail();
      case WEBHOOK:
        return visitor.visitWebhook();
      case VOICE:
        return visitor.visitVoice();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(mode = JsonCreator.Mode.DELEGATING)
  public static Channel valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "SMS":
        return SMS;
      case "IN_APP":
        return IN_APP;
      case "TELEGRAM":
        return TELEGRAM;
      case "PUSH":
        return PUSH;
      case "WHATSAPP":
        return WHATSAPP;
      case "SLACK":
        return SLACK;
      case "EMAIL":
        return EMAIL;
      case "WEBHOOK":
        return WEBHOOK;
      case "VOICE":
        return VOICE;
      default:
        return new Channel(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    VOICE,

    PUSH,

    SMS,

    EMAIL,

    WHATSAPP,

    WEBHOOK,

    SLACK,

    IN_APP,

    TELEGRAM,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitVoice();

    T visitPush();

    T visitSms();

    T visitEmail();

    T visitWhatsapp();

    T visitWebhook();

    T visitSlack();

    T visitInApp();

    T visitTelegram();

    T visitUnknown(String unknownType);
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/types/ChannelPreference.java]=[
package com.fern.basic.resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = ChannelPreference.Builder.class)
public final class ChannelPreference {
  private final boolean disabled;

  private int _cachedHashCode;

  ChannelPreference(boolean disabled) {
    this.disabled = disabled;
  }

  @JsonProperty("disabled")
  public boolean getDisabled() {
    return disabled;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ChannelPreference && equalTo((ChannelPreference) other);
  }

  private boolean equalTo(ChannelPreference other) {
    return disabled == other.disabled;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.disabled);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ChannelPreference{" + "disabled: " + disabled + "}";
  }

  public static DisabledStage builder() {
    return new Builder();
  }

  public interface DisabledStage {
    _FinalStage disabled(boolean disabled);

    Builder from(ChannelPreference other);
  }

  public interface _FinalStage {
    ChannelPreference build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements DisabledStage, _FinalStage {
    private boolean disabled;

    private Builder() {}

    @Override
    public Builder from(ChannelPreference other) {
      disabled(other.getDisabled());
      return this;
    }

    @Override
    @JsonSetter("disabled")
    public _FinalStage disabled(boolean disabled) {
      this.disabled = disabled;
      return this;
    }

    @Override
    public ChannelPreference build() {
      return new ChannelPreference(disabled);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/types/ChannelPreferences.java]=[
package com.fern.basic.resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = ChannelPreferences.Builder.class)
public final class ChannelPreferences {
  private final Optional<ChannelPreference> sms;

  private final Optional<ChannelPreference> push;

  private final Optional<ChannelPreference> whatsapp;

  private final Optional<ChannelPreference> email;

  private final Optional<ChannelPreference> slack;

  private final Optional<ChannelPreference> voice;

  private final Optional<ChannelPreference> teams;

  private int _cachedHashCode;

  ChannelPreferences(
      Optional<ChannelPreference> sms,
      Optional<ChannelPreference> push,
      Optional<ChannelPreference> whatsapp,
      Optional<ChannelPreference> email,
      Optional<ChannelPreference> slack,
      Optional<ChannelPreference> voice,
      Optional<ChannelPreference> teams) {
    this.sms = sms;
    this.push = push;
    this.whatsapp = whatsapp;
    this.email = email;
    this.slack = slack;
    this.voice = voice;
    this.teams = teams;
  }

  @JsonProperty("sms")
  public Optional<ChannelPreference> getSms() {
    return sms;
  }

  @JsonProperty("push")
  public Optional<ChannelPreference> getPush() {
    return push;
  }

  @JsonProperty("whatsapp")
  public Optional<ChannelPreference> getWhatsapp() {
    return whatsapp;
  }

  @JsonProperty("email")
  public Optional<ChannelPreference> getEmail() {
    return email;
  }

  @JsonProperty("slack")
  public Optional<ChannelPreference> getSlack() {
    return slack;
  }

  @JsonProperty("voice")
  public Optional<ChannelPreference> getVoice() {
    return voice;
  }

  @JsonProperty("teams")
  public Optional<ChannelPreference> getTeams() {
    return teams;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ChannelPreferences && equalTo((ChannelPreferences) other);
  }

  private boolean equalTo(ChannelPreferences other) {
    return sms.equals(other.sms)
        && push.equals(other.push)
        && whatsapp.equals(other.whatsapp)
        && email.equals(other.email)
        && slack.equals(other.slack)
        && voice.equals(other.voice)
        && teams.equals(other.teams);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.sms, this.push, this.whatsapp, this.email, this.slack, this.voice, this.teams);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ChannelPreferences{"
        + "sms: "
        + sms
        + ", push: "
        + push
        + ", whatsapp: "
        + whatsapp
        + ", email: "
        + email
        + ", slack: "
        + slack
        + ", voice: "
        + voice
        + ", teams: "
        + teams
        + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder {
    private Optional<ChannelPreference> sms = Optional.empty();

    private Optional<ChannelPreference> push = Optional.empty();

    private Optional<ChannelPreference> whatsapp = Optional.empty();

    private Optional<ChannelPreference> email = Optional.empty();

    private Optional<ChannelPreference> slack = Optional.empty();

    private Optional<ChannelPreference> voice = Optional.empty();

    private Optional<ChannelPreference> teams = Optional.empty();

    private Builder() {}

    public Builder from(ChannelPreferences other) {
      sms(other.getSms());
      push(other.getPush());
      whatsapp(other.getWhatsapp());
      email(other.getEmail());
      slack(other.getSlack());
      voice(other.getVoice());
      teams(other.getTeams());
      return this;
    }

    @JsonSetter(value = "sms", nulls = Nulls.SKIP)
    public Builder sms(Optional<ChannelPreference> sms) {
      this.sms = sms;
      return this;
    }

    public Builder sms(ChannelPreference sms) {
      this.sms = Optional.of(sms);
      return this;
    }

    @JsonSetter(value = "push", nulls = Nulls.SKIP)
    public Builder push(Optional<ChannelPreference> push) {
      this.push = push;
      return this;
    }

    public Builder push(ChannelPreference push) {
      this.push = Optional.of(push);
      return this;
    }

    @JsonSetter(value = "whatsapp", nulls = Nulls.SKIP)
    public Builder whatsapp(Optional<ChannelPreference> whatsapp) {
      this.whatsapp = whatsapp;
      return this;
    }

    public Builder whatsapp(ChannelPreference whatsapp) {
      this.whatsapp = Optional.of(whatsapp);
      return this;
    }

    @JsonSetter(value = "email", nulls = Nulls.SKIP)
    public Builder email(Optional<ChannelPreference> email) {
      this.email = email;
      return this;
    }

    public Builder email(ChannelPreference email) {
      this.email = Optional.of(email);
      return this;
    }

    @JsonSetter(value = "slack", nulls = Nulls.SKIP)
    public Builder slack(Optional<ChannelPreference> slack) {
      this.slack = slack;
      return this;
    }

    public Builder slack(ChannelPreference slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @JsonSetter(value = "voice", nulls = Nulls.SKIP)
    public Builder voice(Optional<ChannelPreference> voice) {
      this.voice = voice;
      return this;
    }

    public Builder voice(ChannelPreference voice) {
      this.voice = Optional.of(voice);
      return this;
    }

    @JsonSetter(value = "teams", nulls = Nulls.SKIP)
    public Builder teams(Optional<ChannelPreference> teams) {
      this.teams = teams;
      return this;
    }

    public Builder teams(ChannelPreference teams) {
      this.teams = Optional.of(teams);
      return this;
    }

    public ChannelPreferences build() {
      return new ChannelPreferences(sms, push, whatsapp, email, slack, voice, teams);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/types/RavenUser.java]=[
package com.fern.basic.resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = RavenUser.Builder.class)
public final class RavenUser {
  private final String userId;

  private final Optional<String> userSid;

  private final Optional<String> onesignalExternalId;

  private final Optional<String> mobile;

  private final Optional<String> email;

  private final Optional<String> whatsappMobile;

  private final Optional<SlackProfile> slack;

  private final Optional<TelegramProfile> telegram;

  private final Optional<List<String>> fcmTokens;

  private final Optional<List<String>> onesignalPlayerIds;

  private final Optional<List<String>> iosTokens;

  private final Optional<Long> createdAt;

  private final Optional<Long> updatedAt;

  private int _cachedHashCode;

  RavenUser(
      String userId,
      Optional<String> userSid,
      Optional<String> onesignalExternalId,
      Optional<String> mobile,
      Optional<String> email,
      Optional<String> whatsappMobile,
      Optional<SlackProfile> slack,
      Optional<TelegramProfile> telegram,
      Optional<List<String>> fcmTokens,
      Optional<List<String>> onesignalPlayerIds,
      Optional<List<String>> iosTokens,
      Optional<Long> createdAt,
      Optional<Long> updatedAt) {
    this.userId = userId;
    this.userSid = userSid;
    this.onesignalExternalId = onesignalExternalId;
    this.mobile = mobile;
    this.email = email;
    this.whatsappMobile = whatsappMobile;
    this.slack = slack;
    this.telegram = telegram;
    this.fcmTokens = fcmTokens;
    this.onesignalPlayerIds = onesignalPlayerIds;
    this.iosTokens = iosTokens;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * @return Your user identifier. If user_id already exists, user properties will be updated else a
   *     new user will be created
   */
  @JsonProperty("user_id")
  public String getUserId() {
    return userId;
  }

  @JsonProperty("user_sid")
  public Optional<String> getUserSid() {
    return userSid;
  }

  @JsonProperty("onesignal_external_id")
  public Optional<String> getOnesignalExternalId() {
    return onesignalExternalId;
  }

  @JsonProperty("mobile")
  public Optional<String> getMobile() {
    return mobile;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return Include this only when user's whatsapp mobile is different than primary mobile
   */
  @JsonProperty("whatsapp_mobile")
  public Optional<String> getWhatsappMobile() {
    return whatsappMobile;
  }

  @JsonProperty("slack")
  public Optional<SlackProfile> getSlack() {
    return slack;
  }

  @JsonProperty("telegram")
  public Optional<TelegramProfile> getTelegram() {
    return telegram;
  }

  @JsonProperty("fcm_tokens")
  public Optional<List<String>> getFcmTokens() {
    return fcmTokens;
  }

  @JsonProperty("onesignal_player_ids")
  public Optional<List<String>> getOnesignalPlayerIds() {
    return onesignalPlayerIds;
  }

  @JsonProperty("ios_tokens")
  public Optional<List<String>> getIosTokens() {
    return iosTokens;
  }

  @JsonProperty("created_at")
  public Optional<Long> getCreatedAt() {
    return createdAt;
  }

  @JsonProperty("updated_at")
  public Optional<Long> getUpdatedAt() {
    return updatedAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof RavenUser && equalTo((RavenUser) other);
  }

  private boolean equalTo(RavenUser other) {
    return userId.equals(other.userId)
        && userSid.equals(other.userSid)
        && onesignalExternalId.equals(other.onesignalExternalId)
        && mobile.equals(other.mobile)
        && email.equals(other.email)
        && whatsappMobile.equals(other.whatsappMobile)
        && slack.equals(other.slack)
        && telegram.equals(other.telegram)
        && fcmTokens.equals(other.fcmTokens)
        && onesignalPlayerIds.equals(other.onesignalPlayerIds)
        && iosTokens.equals(other.iosTokens)
        && createdAt.equals(other.createdAt)
        && updatedAt.equals(other.updatedAt);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode =
          Objects.hash(
              this.userId,
              this.userSid,
              this.onesignalExternalId,
              this.mobile,
              this.email,
              this.whatsappMobile,
              this.slack,
              this.telegram,
              this.fcmTokens,
              this.onesignalPlayerIds,
              this.iosTokens,
              this.createdAt,
              this.updatedAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "RavenUser{"
        + "userId: "
        + userId
        + ", userSid: "
        + userSid
        + ", onesignalExternalId: "
        + onesignalExternalId
        + ", mobile: "
        + mobile
        + ", email: "
        + email
        + ", whatsappMobile: "
        + whatsappMobile
        + ", slack: "
        + slack
        + ", telegram: "
        + telegram
        + ", fcmTokens: "
        + fcmTokens
        + ", onesignalPlayerIds: "
        + onesignalPlayerIds
        + ", iosTokens: "
        + iosTokens
        + ", createdAt: "
        + createdAt
        + ", updatedAt: "
        + updatedAt
        + "}";
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    _FinalStage userId(String userId);

    Builder from(RavenUser other);
  }

  public interface _FinalStage {
    RavenUser build();

    _FinalStage userSid(Optional<String> userSid);

    _FinalStage userSid(String userSid);

    _FinalStage onesignalExternalId(Optional<String> onesignalExternalId);

    _FinalStage onesignalExternalId(String onesignalExternalId);

    _FinalStage mobile(Optional<String> mobile);

    _FinalStage mobile(String mobile);

    _FinalStage email(Optional<String> email);

    _FinalStage email(String email);

    _FinalStage whatsappMobile(Optional<String> whatsappMobile);

    _FinalStage whatsappMobile(String whatsappMobile);

    _FinalStage slack(Optional<SlackProfile> slack);

    _FinalStage slack(SlackProfile slack);

    _FinalStage telegram(Optional<TelegramProfile> telegram);

    _FinalStage telegram(TelegramProfile telegram);

    _FinalStage fcmTokens(Optional<List<String>> fcmTokens);

    _FinalStage fcmTokens(List<String> fcmTokens);

    _FinalStage onesignalPlayerIds(Optional<List<String>> onesignalPlayerIds);

    _FinalStage onesignalPlayerIds(List<String> onesignalPlayerIds);

    _FinalStage iosTokens(Optional<List<String>> iosTokens);

    _FinalStage iosTokens(List<String> iosTokens);

    _FinalStage createdAt(Optional<Long> createdAt);

    _FinalStage createdAt(Long createdAt);

    _FinalStage updatedAt(Optional<Long> updatedAt);

    _FinalStage updatedAt(Long updatedAt);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements UserIdStage, _FinalStage {
    private String userId;

    private Optional<Long> updatedAt = Optional.empty();

    private Optional<Long> createdAt = Optional.empty();

    private Optional<List<String>> iosTokens = Optional.empty();

    private Optional<List<String>> onesignalPlayerIds = Optional.empty();

    private Optional<List<String>> fcmTokens = Optional.empty();

    private Optional<TelegramProfile> telegram = Optional.empty();

    private Optional<SlackProfile> slack = Optional.empty();

    private Optional<String> whatsappMobile = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Optional<String> mobile = Optional.empty();

    private Optional<String> onesignalExternalId = Optional.empty();

    private Optional<String> userSid = Optional.empty();

    private Builder() {}

    @Override
    public Builder from(RavenUser other) {
      userId(other.getUserId());
      userSid(other.getUserSid());
      onesignalExternalId(other.getOnesignalExternalId());
      mobile(other.getMobile());
      email(other.getEmail());
      whatsappMobile(other.getWhatsappMobile());
      slack(other.getSlack());
      telegram(other.getTelegram());
      fcmTokens(other.getFcmTokens());
      onesignalPlayerIds(other.getOnesignalPlayerIds());
      iosTokens(other.getIosTokens());
      createdAt(other.getCreatedAt());
      updatedAt(other.getUpdatedAt());
      return this;
    }

    /**
     * Your user identifier. If user_id already exists, user properties will be updated else a new
     * user will be created
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("user_id")
    public _FinalStage userId(String userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public _FinalStage updatedAt(Long updatedAt) {
      this.updatedAt = Optional.of(updatedAt);
      return this;
    }

    @Override
    @JsonSetter(value = "updated_at", nulls = Nulls.SKIP)
    public _FinalStage updatedAt(Optional<Long> updatedAt) {
      this.updatedAt = updatedAt;
      return this;
    }

    @Override
    public _FinalStage createdAt(Long createdAt) {
      this.createdAt = Optional.of(createdAt);
      return this;
    }

    @Override
    @JsonSetter(value = "created_at", nulls = Nulls.SKIP)
    public _FinalStage createdAt(Optional<Long> createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    @Override
    public _FinalStage iosTokens(List<String> iosTokens) {
      this.iosTokens = Optional.of(iosTokens);
      return this;
    }

    @Override
    @JsonSetter(value = "ios_tokens", nulls = Nulls.SKIP)
    public _FinalStage iosTokens(Optional<List<String>> iosTokens) {
      this.iosTokens = iosTokens;
      return this;
    }

    @Override
    public _FinalStage onesignalPlayerIds(List<String> onesignalPlayerIds) {
      this.onesignalPlayerIds = Optional.of(onesignalPlayerIds);
      return this;
    }

    @Override
    @JsonSetter(value = "onesignal_player_ids", nulls = Nulls.SKIP)
    public _FinalStage onesignalPlayerIds(Optional<List<String>> onesignalPlayerIds) {
      this.onesignalPlayerIds = onesignalPlayerIds;
      return this;
    }

    @Override
    public _FinalStage fcmTokens(List<String> fcmTokens) {
      this.fcmTokens = Optional.of(fcmTokens);
      return this;
    }

    @Override
    @JsonSetter(value = "fcm_tokens", nulls = Nulls.SKIP)
    public _FinalStage fcmTokens(Optional<List<String>> fcmTokens) {
      this.fcmTokens = fcmTokens;
      return this;
    }

    @Override
    public _FinalStage telegram(TelegramProfile telegram) {
      this.telegram = Optional.of(telegram);
      return this;
    }

    @Override
    @JsonSetter(value = "telegram", nulls = Nulls.SKIP)
    public _FinalStage telegram(Optional<TelegramProfile> telegram) {
      this.telegram = telegram;
      return this;
    }

    @Override
    public _FinalStage slack(SlackProfile slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @Override
    @JsonSetter(value = "slack", nulls = Nulls.SKIP)
    public _FinalStage slack(Optional<SlackProfile> slack) {
      this.slack = slack;
      return this;
    }

    /**
     * Include this only when user's whatsapp mobile is different than primary mobile
     *
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage whatsappMobile(String whatsappMobile) {
      this.whatsappMobile = Optional.of(whatsappMobile);
      return this;
    }

    @Override
    @JsonSetter(value = "whatsapp_mobile", nulls = Nulls.SKIP)
    public _FinalStage whatsappMobile(Optional<String> whatsappMobile) {
      this.whatsappMobile = whatsappMobile;
      return this;
    }

    @Override
    public _FinalStage email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @Override
    @JsonSetter(value = "email", nulls = Nulls.SKIP)
    public _FinalStage email(Optional<String> email) {
      this.email = email;
      return this;
    }

    @Override
    public _FinalStage mobile(String mobile) {
      this.mobile = Optional.of(mobile);
      return this;
    }

    @Override
    @JsonSetter(value = "mobile", nulls = Nulls.SKIP)
    public _FinalStage mobile(Optional<String> mobile) {
      this.mobile = mobile;
      return this;
    }

    @Override
    public _FinalStage onesignalExternalId(String onesignalExternalId) {
      this.onesignalExternalId = Optional.of(onesignalExternalId);
      return this;
    }

    @Override
    @JsonSetter(value = "onesignal_external_id", nulls = Nulls.SKIP)
    public _FinalStage onesignalExternalId(Optional<String> onesignalExternalId) {
      this.onesignalExternalId = onesignalExternalId;
      return this;
    }

    @Override
    public _FinalStage userSid(String userSid) {
      this.userSid = Optional.of(userSid);
      return this;
    }

    @Override
    @JsonSetter(value = "user_sid", nulls = Nulls.SKIP)
    public _FinalStage userSid(Optional<String> userSid) {
      this.userSid = userSid;
      return this;
    }

    @Override
    public RavenUser build() {
      return new RavenUser(
          userId,
          userSid,
          onesignalExternalId,
          mobile,
          email,
          whatsappMobile,
          slack,
          telegram,
          fcmTokens,
          onesignalPlayerIds,
          iosTokens,
          createdAt,
          updatedAt);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/types/SlackProfile.java]=[
package com.fern.basic.resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = SlackProfile.Builder.class)
public final class SlackProfile {
  private final String accessToken;

  private final Optional<String> email;

  private final Optional<String> channelId;

  private int _cachedHashCode;

  SlackProfile(String accessToken, Optional<String> email, Optional<String> channelId) {
    this.accessToken = accessToken;
    this.email = email;
    this.channelId = channelId;
  }

  @JsonProperty("access_token")
  public String getAccessToken() {
    return accessToken;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  @JsonProperty("channel_id")
  public Optional<String> getChannelId() {
    return channelId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SlackProfile && equalTo((SlackProfile) other);
  }

  private boolean equalTo(SlackProfile other) {
    return accessToken.equals(other.accessToken)
        && email.equals(other.email)
        && channelId.equals(other.channelId);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.accessToken, this.email, this.channelId);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SlackProfile{"
        + "accessToken: "
        + accessToken
        + ", email: "
        + email
        + ", channelId: "
        + channelId
        + "}";
  }

  public static AccessTokenStage builder() {
    return new Builder();
  }

  public interface AccessTokenStage {
    _FinalStage accessToken(String accessToken);

    Builder from(SlackProfile other);
  }

  public interface _FinalStage {
    SlackProfile build();

    _FinalStage email(Optional<String> email);

    _FinalStage email(String email);

    _FinalStage channelId(Optional<String> channelId);

    _FinalStage channelId(String channelId);
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements AccessTokenStage, _FinalStage {
    private String accessToken;

    private Optional<String> channelId = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Builder() {}

    @Override
    public Builder from(SlackProfile other) {
      accessToken(other.getAccessToken());
      email(other.getEmail());
      channelId(other.getChannelId());
      return this;
    }

    @Override
    @JsonSetter("access_token")
    public _FinalStage accessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    @Override
    public _FinalStage channelId(String channelId) {
      this.channelId = Optional.of(channelId);
      return this;
    }

    @Override
    @JsonSetter(value = "channel_id", nulls = Nulls.SKIP)
    public _FinalStage channelId(Optional<String> channelId) {
      this.channelId = channelId;
      return this;
    }

    @Override
    public _FinalStage email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @Override
    @JsonSetter(value = "email", nulls = Nulls.SKIP)
    public _FinalStage email(Optional<String> email) {
      this.email = email;
      return this;
    }

    @Override
    public SlackProfile build() {
      return new SlackProfile(accessToken, email, channelId);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/types/TelegramProfile.java]=[
package com.fern.basic.resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;

@JsonDeserialize(builder = TelegramProfile.Builder.class)
public final class TelegramProfile {
  private final String chatId;

  private int _cachedHashCode;

  TelegramProfile(String chatId) {
    this.chatId = chatId;
  }

  @JsonProperty("chat_id")
  public String getChatId() {
    return chatId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TelegramProfile && equalTo((TelegramProfile) other);
  }

  private boolean equalTo(TelegramProfile other) {
    return chatId.equals(other.chatId);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.chatId);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "TelegramProfile{" + "chatId: " + chatId + "}";
  }

  public static ChatIdStage builder() {
    return new Builder();
  }

  public interface ChatIdStage {
    _FinalStage chatId(String chatId);

    Builder from(TelegramProfile other);
  }

  public interface _FinalStage {
    TelegramProfile build();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder implements ChatIdStage, _FinalStage {
    private String chatId;

    private Builder() {}

    @Override
    public Builder from(TelegramProfile other) {
      chatId(other.getChatId());
      return this;
    }

    @Override
    @JsonSetter("chat_id")
    public _FinalStage chatId(String chatId) {
      this.chatId = chatId;
      return this;
    }

    @Override
    public TelegramProfile build() {
      return new TelegramProfile(chatId);
    }
  }
}

]


basic[src/main/java/com/fern/basic/resources/raven/user/types/UserPreferences.java]=[
package com.fern.basic.resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(builder = UserPreferences.Builder.class)
public final class UserPreferences {
  private final Optional<Channel> preferredChannel;

  private final Optional<ChannelPreferences> channelPreferences;

  private int _cachedHashCode;

  UserPreferences(
      Optional<Channel> preferredChannel, Optional<ChannelPreferences> channelPreferences) {
    this.preferredChannel = preferredChannel;
    this.channelPreferences = channelPreferences;
  }

  @JsonProperty("preferred_channel")
  public Optional<Channel> getPreferredChannel() {
    return preferredChannel;
  }

  @JsonProperty("channel_preferences")
  public Optional<ChannelPreferences> getChannelPreferences() {
    return channelPreferences;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserPreferences && equalTo((UserPreferences) other);
  }

  private boolean equalTo(UserPreferences other) {
    return preferredChannel.equals(other.preferredChannel)
        && channelPreferences.equals(other.channelPreferences);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.preferredChannel, this.channelPreferences);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "UserPreferences{"
        + "preferredChannel: "
        + preferredChannel
        + ", channelPreferences: "
        + channelPreferences
        + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(ignoreUnknown = true)
  public static final class Builder {
    private Optional<Channel> preferredChannel = Optional.empty();

    private Optional<ChannelPreferences> channelPreferences = Optional.empty();

    private Builder() {}

    public Builder from(UserPreferences other) {
      preferredChannel(other.getPreferredChannel());
      channelPreferences(other.getChannelPreferences());
      return this;
    }

    @JsonSetter(value = "preferred_channel", nulls = Nulls.SKIP)
    public Builder preferredChannel(Optional<Channel> preferredChannel) {
      this.preferredChannel = preferredChannel;
      return this;
    }

    public Builder preferredChannel(Channel preferredChannel) {
      this.preferredChannel = Optional.of(preferredChannel);
      return this;
    }

    @JsonSetter(value = "channel_preferences", nulls = Nulls.SKIP)
    public Builder channelPreferences(Optional<ChannelPreferences> channelPreferences) {
      this.channelPreferences = channelPreferences;
      return this;
    }

    public Builder channelPreferences(ChannelPreferences channelPreferences) {
      this.channelPreferences = Optional.of(channelPreferences);
      return this;
    }

    public UserPreferences build() {
      return new UserPreferences(preferredChannel, channelPreferences);
    }
  }
}

]


local[FernFernClient.java]=[
import core.Environment;
import java.lang.String;
import resources.auth.AuthClient;
import resources.blog.BlogClient;
import resources.dummyservice.DummyServiceClient;
import resources.raven.RavenClient;

public interface FernFernClient {
  AuthClient auth();

  BlogClient blog();

  DummyServiceClient dummyService();

  RavenClient raven();

  static Builder builder() {
    return new FernFernClientImpl.Builder();
  }

  interface Builder {
    Builder token(String token);

    Builder apiVersion(String apiVersion);

    Builder environment(Environment environment);

    Builder url(String url);

    FernFernClient build();
  }
}

]


local[FernFernClientImpl.java]=[
import core.ClientOptions;
import core.Environment;
import core.Suppliers;
import java.lang.Override;
import java.lang.String;
import java.util.function.Supplier;
import resources.auth.AuthClient;
import resources.auth.AuthClientImpl;
import resources.blog.BlogClient;
import resources.blog.BlogClientImpl;
import resources.dummyservice.DummyServiceClient;
import resources.dummyservice.DummyServiceClientImpl;
import resources.raven.RavenClient;
import resources.raven.RavenClientImpl;

public final class FernFernClientImpl implements FernFernClient {
  private final ClientOptions clientOptions;

  private final Supplier<AuthClient> authClient;

  private final Supplier<BlogClient> blogClient;

  private final Supplier<DummyServiceClient> dummyServiceClient;

  private final Supplier<RavenClient> ravenClient;

  public FernFernClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.authClient = Suppliers.memoize(() -> new AuthClientImpl(clientOptions));
    this.blogClient = Suppliers.memoize(() -> new BlogClientImpl(clientOptions));
    this.dummyServiceClient = Suppliers.memoize(() -> new DummyServiceClientImpl(clientOptions));
    this.ravenClient = Suppliers.memoize(() -> new RavenClientImpl(clientOptions));
  }

  @Override
  public AuthClient auth() {
    return this.authClient.get();
  }

  @Override
  public BlogClient blog() {
    return this.blogClient.get();
  }

  @Override
  public DummyServiceClient dummyService() {
    return this.dummyServiceClient.get();
  }

  @Override
  public RavenClient raven() {
    return this.ravenClient.get();
  }

  public static final class Builder implements FernFernClient.Builder {
    ClientOptions.Builder clientOptionsBuilder = ClientOptions.builder();

    Environment environment = Environment.PROD;

    @Override
    public FernFernClient.Builder token(String token) {
      this.clientOptionsBuilder.addHeader("Authorization", "Bearer " + token);
      return this;
    }

    @Override
    public FernFernClient.Builder apiVersion(String apiVersion) {
      this.clientOptionsBuilder.addHeader("API-VERSION", apiVersion);
      return this;
    }

    @Override
    public FernFernClient.Builder environment(Environment environment) {
      this.environment = environment;
      return this;
    }

    @Override
    public FernFernClient.Builder url(String url) {
      this.environment = Environment.custom(url);
      return this;
    }

    @Override
    public FernFernClient build() {
      clientOptionsBuilder.environment(this.environment);
      return new FernFernClientImpl(clientOptionsBuilder.build());
    }
  }
}

]


local[core/ClientOptions.java]=[
package core;

import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import okhttp3.OkHttpClient;

public final class ClientOptions {
  private final Environment environment;

  private final Map<String, String> headers;

  private final OkHttpClient httpClient;

  private ClientOptions(Environment environment, Map<String, String> headers,
      OkHttpClient httpClient) {
    this.environment = environment;
    this.headers = headers;
    this.httpClient = httpClient;
  }

  public Environment environment() {
    return this.environment;
  }

  public Map<String, String> headers() {
    return this.headers;
  }

  public OkHttpClient httpClient() {
    return this.httpClient;
  }

  public static Builder builder() {
    return new Builder();
  }

  public static final class Builder {
    private Environment environment;

    private final Map<String, String> headers = new HashMap<>();

    public Builder environment(Environment environment) {
      this.environment = environment;
      return this;
    }

    public Builder addHeader(String key, String value) {
      this.headers.put(key, value);
      return this;
    }

    public ClientOptions build() {
      return new ClientOptions(environment, headers, new OkHttpClient());
    }
  }
}

]


local[core/Environment.java]=[
package core;

import java.lang.String;

public final class Environment {
  public static final Environment PROD = new Environment("prod.com");

  public static final Environment STAGING = new Environment("staging.com");

  private final String url;

  private Environment(String url) {
    this.url = url;
  }

  public String getUrl() {
    return this.url;
  }

  public static Environment custom(String url) {
    return new Environment(url);
  }
}

]


local[core/ObjectMappers.java]=[
package core;

import com.fasterxml.jackson.databind.DeserializationFeature;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.json.JsonMapper;
import com.fasterxml.jackson.datatype.jdk8.Jdk8Module;

public final class ObjectMappers {
  public static final ObjectMapper JSON_MAPPER = JsonMapper.builder()
    .addModule(new Jdk8Module())
    .disable(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES)
    .build();

    private ObjectMappers() {
    }
  }

]


local[core/Suppliers.java]=[
package core;

import java.util.Objects;
import java.util.concurrent.atomic.AtomicReference;
import java.util.function.Supplier;

public final class Suppliers {
  private Suppliers() {
  }

  public static <T> Supplier<T> memoize(Supplier<T> delegate) {
    AtomicReference<T> value = new AtomicReference<>();
    return () ->  {
      T val = value.get();
      if (val == null) {
        val = value.updateAndGet(cur -> cur == null ? Objects.requireNonNull(delegate.get()) : cur);
      }
      return val;
    } ;
  }
}

]


local[resources/auth/AuthClient.java]=[
package resources.auth;

public interface AuthClient {
  void getAuth();
}

]


local[resources/auth/AuthClientImpl.java]=[
package resources.auth;

import core.ClientOptions;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.Request;
import okhttp3.Response;

public final class AuthClientImpl implements AuthClient {
  private final ClientOptions clientOptions;

  public AuthClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public void getAuth() {
    HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("auth")
      .build();Request _request = new Request.Builder()
      .url(_httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers()))
      .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


local[resources/auth/types/PropertyValue.java]=[
package resources.auth.types;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.core.JsonParseException;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import core.ObjectMappers;
import java.io.IOException;
import java.lang.Double;
import java.lang.IllegalArgumentException;
import java.lang.IllegalStateException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import resources.blog.types.Author;

@JsonDeserialize(
    using = PropertyValue.Deserializer.class
)
public final class PropertyValue {
  private final Object value;

  private final int type;

  private PropertyValue(Object value, int type) {
    this.value = value;
    this.type = type;
  }

  @JsonValue
  public Object get() {
    return this.value;
  }

  public <T> T visit(Visitor<T> visitor) {
    if(this.type == 0) {
      return visitor.visit((List<String>) this.value);
    } else if(this.type == 1) {
      return visitor.visit((String) this.value);
    } else if(this.type == 2) {
      return visitor.visit((Author) this.value);
    } else if(this.type == 3) {
      return visitor.visit((double) this.value);
    }
    throw new IllegalStateException("Failed to visit value. This should never happen.");
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PropertyValue && equalTo((PropertyValue) other);
  }

  private boolean equalTo(PropertyValue other) {
    return value.equals(other.value);
  }

  @Override
  public int hashCode() {
    return Objects.hash(this.value);
  }

  @Override
  public String toString() {
    return this.value.toString();
  }

  public static PropertyValue of(List<String> value) {
    return new PropertyValue(value, 0);
  }

  public static PropertyValue of(String value) {
    return new PropertyValue(value, 1);
  }

  public static PropertyValue of(Author value) {
    return new PropertyValue(value, 2);
  }

  public static PropertyValue of(double value) {
    return new PropertyValue(value, 3);
  }

  public interface Visitor<T> {
    T visit(List<String> value);

    T visit(String value);

    T visit(Author value);

    T visit(double value);
  }

  static final class Deserializer extends StdDeserializer<PropertyValue> {
    Deserializer() {
      super(PropertyValue.class);
    }

    @Override
    public PropertyValue deserialize(JsonParser p, DeserializationContext ctxt) throws IOException {
      Object value = p.readValueAs(Object.class);
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, new TypeReference<List<String>>() {}));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, String.class));
      } catch(IllegalArgumentException e) {
      }
      try {
        return of(ObjectMappers.JSON_MAPPER.convertValue(value, Author.class));
      } catch(IllegalArgumentException e) {
      }
      if (value instanceof Double) {
        return of((Double) value);
      }
      throw new JsonParseException(p, "Failed to deserialize");
    }
  }
}

]


local[resources/blog/BlogClient.java]=[
package resources.blog;

import java.lang.String;
import java.util.List;
import resources.blog.requests.CreatePostRequest;
import resources.blog.requests.GetPostRequest;
import resources.blog.types.BlogPost;

public interface BlogClient {
  void createPost(CreatePostRequest request);

  BlogPost getPost(String postId, GetPostRequest request);

  List<BlogPost> getAll();
}

]


local[resources/blog/BlogClientImpl.java]=[
package resources.blog;

import com.fasterxml.jackson.core.type.TypeReference;
import core.ClientOptions;
import core.ObjectMappers;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.blog.requests.CreatePostRequest;
import resources.blog.requests.GetPostRequest;
import resources.blog.types.BlogPost;

public final class BlogClientImpl implements BlogClient {
  private final ClientOptions clientOptions;

  public BlogClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public void createPost(CreatePostRequest request) {
    HttpUrl.Builder _httpUrlBuilder = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("posts")
      ;HttpUrl _httpUrl = _httpUrlBuilder.build()
          ;
      Map<String, Object> _requestBodyProperties = new HashMap<>();
      _requestBodyProperties.put("title", request.getTitle());
      _requestBodyProperties.put("author", request.getAuthor());
      _requestBodyProperties.put("content", request.getContent());
      _requestBodyProperties.put("postType", request.getPostType());
      _requestBodyProperties.put("switch", request.getSwitch());
      _requestBodyProperties.put("ratings", request.getRatings());
      _requestBodyProperties.put("list", request.getList());
      RequestBody _requestBody;
      try {
        _requestBody = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties), MediaType.parse("application/json"));
      }
      catch(Exception e) {
        throw new RuntimeException(e);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(_httpUrl)
        .method("POST", _requestBody)
        .headers(Headers.of(clientOptions.headers()));
      Request _request = _requestBuilder.build();
      try {
        Response _response = clientOptions.httpClient().newCall(_request).execute();
        if (_response.isSuccessful()) {
          return;
        }
        throw new RuntimeException();
      }
      catch (Exception e) {
        throw new RuntimeException(e);
      }
    }

    @Override
    public BlogPost getPost(String postId, GetPostRequest request) {
      HttpUrl.Builder _httpUrlBuilder = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
        .addPathSegments("posts")
        .addPathSegment(postId)
        ;_httpUrlBuilder.addQueryParameter("dummy", request.getDummy());
        HttpUrl _httpUrl = _httpUrlBuilder.build()
            ;
        RequestBody _requestBody = null;
        Request.Builder _requestBuilder = new Request.Builder()
          .url(_httpUrl)
          .method("GET", _requestBody)
          .headers(Headers.of(clientOptions.headers()));
        Request _request = _requestBuilder.build();
        try {
          Response _response = clientOptions.httpClient().newCall(_request).execute();
          if (_response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), BlogPost.class);
          }
          throw new RuntimeException();
        }
        catch (Exception e) {
          throw new RuntimeException(e);
        }
      }

      @Override
      public List<BlogPost> getAll() {
        HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
          .addPathSegments("posts")
          .build();Request _request = new Request.Builder()
          .url(_httpUrl)
          .method("GET", null)
          .headers(Headers.of(clientOptions.headers()))
          .build();
        try {
          Response _response = clientOptions.httpClient().newCall(_request).execute();
          if (_response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), new TypeReference<List<BlogPost>>() {});
          }
          throw new RuntimeException();
        }
        catch (Exception e) {
          throw new RuntimeException(e);
        }
      }
    }

]


local[resources/blog/requests/CreatePostRequest.java]=[
package resources.blog.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import resources.blog.types.Author;
import resources.blog.types.PostType;

@JsonDeserialize(
    builder = CreatePostRequest.Builder.class
)
public final class CreatePostRequest {
  private final String title;

  private final Author author;

  private final String content;

  private final PostType postType;

  private final int switch_;

  private final Map<String, Integer> ratings;

  private final List<List<String>> list;

  private int _cachedHashCode;

  CreatePostRequest(String title, Author author, String content, PostType postType, int switch_,
      Map<String, Integer> ratings, List<List<String>> list) {
    this.title = title;
    this.author = author;
    this.content = content;
    this.postType = postType;
    this.switch_ = switch_;
    this.ratings = ratings;
    this.list = list;
  }

  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @JsonProperty("postType")
  public PostType getPostType() {
    return postType;
  }

  @JsonProperty("switch")
  public int getSwitch() {
    return switch_;
  }

  @JsonProperty("ratings")
  public Map<String, Integer> getRatings() {
    return ratings;
  }

  @JsonProperty("list")
  public List<List<String>> getList() {
    return list;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreatePostRequest && equalTo((CreatePostRequest) other);
  }

  private boolean equalTo(CreatePostRequest other) {
    return title.equals(other.title) && author.equals(other.author) && content.equals(other.content) && postType.equals(other.postType) && switch_ == other.switch_ && ratings.equals(other.ratings) && list.equals(other.list);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.title, this.author, this.content, this.postType, this.switch_, this.ratings, this.list);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "CreatePostRequest{" + "title: " + title + ", author: " + author + ", content: " + content + ", postType: " + postType + ", switch_: " + switch_ + ", ratings: " + ratings + ", list: " + list + "}";
  }

  public static TitleStage builder() {
    return new Builder();
  }

  public interface TitleStage {
    AuthorStage title(String title);

    Builder from(CreatePostRequest other);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    PostTypeStage content(String content);
  }

  public interface PostTypeStage {
    SwitchStage postType(PostType postType);
  }

  public interface SwitchStage {
    _FinalStage switch_(int switch_);
  }

  public interface _FinalStage {
    CreatePostRequest build();

    _FinalStage ratings(Map<String, Integer> ratings);

    _FinalStage putAllRatings(Map<String, Integer> ratings);

    _FinalStage ratings(String key, Integer value);

    _FinalStage list(List<List<String>> list);

    _FinalStage addList(List<String> list);

    _FinalStage addAllList(List<List<String>> list);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TitleStage, AuthorStage, ContentStage, PostTypeStage, SwitchStage, _FinalStage {
    private String title;

    private Author author;

    private String content;

    private PostType postType;

    private int switch_;

    private List<List<String>> list = new ArrayList<>();

    private Map<String, Integer> ratings = new LinkedHashMap<>();

    private Builder() {
    }

    @Override
    public Builder from(CreatePostRequest other) {
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      postType(other.getPostType());
      switch_(other.getSwitch());
      ratings(other.getRatings());
      list(other.getList());
      return this;
    }

    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public PostTypeStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    @JsonSetter("postType")
    public SwitchStage postType(PostType postType) {
      this.postType = postType;
      return this;
    }

    @Override
    @JsonSetter("switch")
    public _FinalStage switch_(int switch_) {
      this.switch_ = switch_;
      return this;
    }

    @Override
    public _FinalStage addAllList(List<List<String>> list) {
      this.list.addAll(list);
      return this;
    }

    @Override
    public _FinalStage addList(List<String> list) {
      this.list.add(list);
      return this;
    }

    @Override
    @JsonSetter(
        value = "list",
        nulls = Nulls.SKIP
    )
    public _FinalStage list(List<List<String>> list) {
      this.list.clear();
      this.list.addAll(list);
      return this;
    }

    @Override
    public _FinalStage ratings(String key, Integer value) {
      this.ratings.put(key, value);
      return this;
    }

    @Override
    public _FinalStage putAllRatings(Map<String, Integer> ratings) {
      this.ratings.putAll(ratings);
      return this;
    }

    @Override
    @JsonSetter(
        value = "ratings",
        nulls = Nulls.SKIP
    )
    public _FinalStage ratings(Map<String, Integer> ratings) {
      this.ratings.clear();
      this.ratings.putAll(ratings);
      return this;
    }

    @Override
    public CreatePostRequest build() {
      return new CreatePostRequest(title, author, content, postType, switch_, ratings, list);
    }
  }
}

]


local[resources/blog/requests/GetPostRequest.java]=[
package resources.blog.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = GetPostRequest.Builder.class
)
public final class GetPostRequest {
  private final String dummy;

  private int _cachedHashCode;

  GetPostRequest(String dummy) {
    this.dummy = dummy;
  }

  /**
   * @return Dummy query param
   */
  @JsonProperty("dummy")
  public String getDummy() {
    return dummy;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GetPostRequest && equalTo((GetPostRequest) other);
  }

  private boolean equalTo(GetPostRequest other) {
    return dummy.equals(other.dummy);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.dummy);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "GetPostRequest{" + "dummy: " + dummy + "}";
  }

  public static DummyStage builder() {
    return new Builder();
  }

  public interface DummyStage {
    _FinalStage dummy(String dummy);

    Builder from(GetPostRequest other);
  }

  public interface _FinalStage {
    GetPostRequest build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DummyStage, _FinalStage {
    private String dummy;

    private Builder() {
    }

    @Override
    public Builder from(GetPostRequest other) {
      dummy(other.getDummy());
      return this;
    }

    /**
     * <p>Dummy query param</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("dummy")
    public _FinalStage dummy(String dummy) {
      this.dummy = dummy;
      return this;
    }

    @Override
    public GetPostRequest build() {
      return new GetPostRequest(dummy);
    }
  }
}

]


local[resources/blog/types/Author.java]=[
package resources.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public final class Author {
  private final Value value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private Author(Value value) {
    this.value = value;
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public static Author anonymous() {
    return new Author(new AnonymousValue());
  }

  public static Author name(String value) {
    return new Author(new NameValue(value));
  }

  public boolean isAnonymous() {
    return value instanceof AnonymousValue;
  }

  public boolean isName() {
    return value instanceof NameValue;
  }

  public boolean _isUnknown() {
    return value instanceof _UnknownValue;
  }

  public Optional<String> getName() {
    if (isName()) {
      return Optional.of(((NameValue) value).value);
    }
    return Optional.empty();
  }

  public Optional<Object> _getUnknown() {
    if (_isUnknown()) {
      return Optional.of(((_UnknownValue) value).value);
    }
    return Optional.empty();
  }

  @JsonValue
  private Value getValue() {
    return this.value;
  }

  public interface Visitor<T> {
    T visitAnonymous();

    T visitName(String name);

    T _visitUnknown(Object unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      property = "type",
      visible = true,
      defaultImpl = _UnknownValue.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(AnonymousValue.class),
      @JsonSubTypes.Type(NameValue.class)
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface Value {
    <T> T visit(Visitor<T> visitor);
  }

  @JsonTypeName("anonymous")
  private static final class AnonymousValue implements Value {
    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private AnonymousValue() {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitAnonymous();
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof AnonymousValue;
    }

    @Override
    public String toString() {
      return "Author{" + "}";
    }
  }

  @JsonTypeName("name")
  private static final class NameValue implements Value {
    @JsonProperty("value")
    private String value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private NameValue(@JsonProperty("value") String value) {
      this.value = value;
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor.visitName(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof NameValue && equalTo((NameValue) other);
    }

    private boolean equalTo(NameValue other) {
      return value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "value: " + value + "}";
    }
  }

  private static final class _UnknownValue implements Value {
    private String type;

    @JsonValue
    private Object value;

    @JsonCreator(
        mode = JsonCreator.Mode.PROPERTIES
    )
    private _UnknownValue(@JsonProperty("value") Object value) {
    }

    @Override
    public <T> T visit(Visitor<T> visitor) {
      return visitor._visitUnknown(value);
    }

    @Override
    public boolean equals(Object other) {
      if (this == other) return true;
      return other instanceof _UnknownValue && equalTo((_UnknownValue) other);
    }

    private boolean equalTo(_UnknownValue other) {
      return type.equals(other.type) && value.equals(other.value);
    }

    @Override
    public int hashCode() {
      return Objects.hash(this.type, this.value);
    }

    @Override
    public String toString() {
      return "Author{" + "type: " + type + ", value: " + value + "}";
    }
  }
}

]


local[resources/blog/types/BlogPost.java]=[
package resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = BlogPost.Builder.class
)
public final class BlogPost {
  private final String id;

  private final PostType type;

  private final String title;

  private final Author author;

  private final String content;

  private int _cachedHashCode;

  BlogPost(String id, PostType type, String title, Author author, String content) {
    this.id = id;
    this.type = type;
    this.title = title;
    this.author = author;
    this.content = content;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("type")
  public PostType getType() {
    return type;
  }

  /**
   * @return The title of the blog post.
   */
  @JsonProperty("title")
  public String getTitle() {
    return title;
  }

  @JsonProperty("author")
  public Author getAuthor() {
    return author;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BlogPost && equalTo((BlogPost) other);
  }

  private boolean equalTo(BlogPost other) {
    return id.equals(other.id) && type.equals(other.type) && title.equals(other.title) && author.equals(other.author) && content.equals(other.content);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.type, this.title, this.author, this.content);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BlogPost{" + "id: " + id + ", type: " + type + ", title: " + title + ", author: " + author + ", content: " + content + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    TypeStage id(String id);

    Builder from(BlogPost other);
  }

  public interface TypeStage {
    TitleStage type(PostType type);
  }

  public interface TitleStage {
    AuthorStage title(String title);
  }

  public interface AuthorStage {
    ContentStage author(Author author);
  }

  public interface ContentStage {
    _FinalStage content(String content);
  }

  public interface _FinalStage {
    BlogPost build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, TypeStage, TitleStage, AuthorStage, ContentStage, _FinalStage {
    private String id;

    private PostType type;

    private String title;

    private Author author;

    private String content;

    private Builder() {
    }

    @Override
    public Builder from(BlogPost other) {
      id(other.getId());
      type(other.getType());
      title(other.getTitle());
      author(other.getAuthor());
      content(other.getContent());
      return this;
    }

    @Override
    @JsonSetter("id")
    public TypeStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("type")
    public TitleStage type(PostType type) {
      this.type = type;
      return this;
    }

    /**
     * <p>The title of the blog post.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("title")
    public AuthorStage title(String title) {
      this.title = title;
      return this;
    }

    @Override
    @JsonSetter("author")
    public ContentStage author(Author author) {
      this.author = author;
      return this;
    }

    @Override
    @JsonSetter("content")
    public _FinalStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    public BlogPost build() {
      return new BlogPost(id, type, title, author, content);
    }
  }
}

]


local[resources/blog/types/GeneratorIdAndVersion.java]=[
package resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = GeneratorIdAndVersion.Builder.class
)
public final class GeneratorIdAndVersion {
  private final String id;

  private final String version;

  private int _cachedHashCode;

  GeneratorIdAndVersion(String id, String version) {
    this.id = id;
    this.version = version;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("version")
  public String getVersion() {
    return version;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof GeneratorIdAndVersion && equalTo((GeneratorIdAndVersion) other);
  }

  private boolean equalTo(GeneratorIdAndVersion other) {
    return id.equals(other.id) && version.equals(other.version);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.version);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "GeneratorIdAndVersion{" + "id: " + id + ", version: " + version + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    VersionStage id(String id);

    Builder from(GeneratorIdAndVersion other);
  }

  public interface VersionStage {
    _FinalStage version(String version);
  }

  public interface _FinalStage {
    GeneratorIdAndVersion build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, VersionStage, _FinalStage {
    private String id;

    private String version;

    private Builder() {
    }

    @Override
    public Builder from(GeneratorIdAndVersion other) {
      id(other.getId());
      version(other.getVersion());
      return this;
    }

    @Override
    @JsonSetter("id")
    public VersionStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("version")
    public _FinalStage version(String version) {
      this.version = version;
      return this;
    }

    @Override
    public GeneratorIdAndVersion build() {
      return new GeneratorIdAndVersion(id, version);
    }
  }
}

]


local[resources/blog/types/PostNotFoundErrorBody.java]=[
package resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = PostNotFoundErrorBody.Builder.class
)
public final class PostNotFoundErrorBody {
  private final String id;

  private int _cachedHashCode;

  PostNotFoundErrorBody(String id) {
    this.id = id;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PostNotFoundErrorBody && equalTo((PostNotFoundErrorBody) other);
  }

  private boolean equalTo(PostNotFoundErrorBody other) {
    return id.equals(other.id);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "PostNotFoundErrorBody{" + "id: " + id + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    _FinalStage id(String id);

    Builder from(PostNotFoundErrorBody other);
  }

  public interface _FinalStage {
    PostNotFoundErrorBody build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, _FinalStage {
    private String id;

    private Builder() {
    }

    @Override
    public Builder from(PostNotFoundErrorBody other) {
      id(other.getId());
      return this;
    }

    @Override
    @JsonSetter("id")
    public _FinalStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    public PostNotFoundErrorBody build() {
      return new PostNotFoundErrorBody(id);
    }
  }
}

]


local[resources/blog/types/PostType.java]=[
package resources.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;

public final class PostType {
  public static final PostType LONG = new PostType(Value.LONG, "LONG");

  public static final PostType SHORT = new PostType(Value.SHORT, "SHORT");

  public static final PostType MEDIUM = new PostType(Value.MEDIUM, "med.med");

  private final Value value;

  private final String string;

  PostType(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof PostType && this.string.equals(((PostType) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case LONG:
        return visitor.visitLong();
      case SHORT:
        return visitor.visitShort();
      case MEDIUM:
        return visitor.visitMedium();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostType valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "LONG":
        return LONG;
      case "SHORT":
        return SHORT;
      case "med.med":
        return MEDIUM;
      default:
        return new PostType(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    LONG,

    SHORT,

    MEDIUM,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitLong();

    T visitShort();

    T visitMedium();

    T visitUnknown(String unknownType);
  }
}

]


local[resources/blog/types/UnauthorizedErrorBody.java]=[
package resources.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = UnauthorizedErrorBody.Builder.class
)
public final class UnauthorizedErrorBody {
  private final String reason;

  private int _cachedHashCode;

  UnauthorizedErrorBody(String reason) {
    this.reason = reason;
  }

  @JsonProperty("reason")
  public String getReason() {
    return reason;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UnauthorizedErrorBody && equalTo((UnauthorizedErrorBody) other);
  }

  private boolean equalTo(UnauthorizedErrorBody other) {
    return reason.equals(other.reason);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.reason);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "UnauthorizedErrorBody{" + "reason: " + reason + "}";
  }

  public static ReasonStage builder() {
    return new Builder();
  }

  public interface ReasonStage {
    _FinalStage reason(String reason);

    Builder from(UnauthorizedErrorBody other);
  }

  public interface _FinalStage {
    UnauthorizedErrorBody build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ReasonStage, _FinalStage {
    private String reason;

    private Builder() {
    }

    @Override
    public Builder from(UnauthorizedErrorBody other) {
      reason(other.getReason());
      return this;
    }

    @Override
    @JsonSetter("reason")
    public _FinalStage reason(String reason) {
      this.reason = reason;
      return this;
    }

    @Override
    public UnauthorizedErrorBody build() {
      return new UnauthorizedErrorBody(reason);
    }
  }
}

]


local[resources/dummyservice/DummyServiceClient.java]=[
package resources.dummyservice;

import java.lang.String;

public interface DummyServiceClient {
  void getDummy(String request);

  void health();
}

]


local[resources/dummyservice/DummyServiceClientImpl.java]=[
package resources.dummyservice;

import core.ClientOptions;
import core.ObjectMappers;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;

public final class DummyServiceClientImpl implements DummyServiceClient {
  private final ClientOptions clientOptions;

  public DummyServiceClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public void getDummy(String request) {
    HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("dummy")
      .build();
    RequestBody _requestBody;
    try {
      _requestBody = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request _request = new Request.Builder()
      .url(_httpUrl)
      .method("POST", _requestBody)
      .headers(Headers.of(clientOptions.headers()))
      .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public void health() {
    HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("dummy")
      .build();Request _request = new Request.Builder()
      .url(_httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers()))
      .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


local[resources/raven/RavenClient.java]=[
package resources.raven;

import resources.raven.device.DeviceClient;
import resources.raven.event.EventClient;
import resources.raven.user.UserClient;

public interface RavenClient {
  DeviceClient device();

  EventClient event();

  UserClient user();
}

]


local[resources/raven/RavenClientImpl.java]=[
package resources.raven;

import core.ClientOptions;
import core.Suppliers;
import java.lang.Override;
import java.util.function.Supplier;
import resources.raven.device.DeviceClient;
import resources.raven.device.DeviceClientImpl;
import resources.raven.event.EventClient;
import resources.raven.event.EventClientImpl;
import resources.raven.user.UserClient;
import resources.raven.user.UserClientImpl;

public final class RavenClientImpl implements RavenClient {
  private final ClientOptions clientOptions;

  private final Supplier<DeviceClient> deviceClient;

  private final Supplier<EventClient> eventClient;

  private final Supplier<UserClient> userClient;

  public RavenClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
    this.deviceClient = Suppliers.memoize(() -> new DeviceClientImpl(clientOptions));
    this.eventClient = Suppliers.memoize(() -> new EventClientImpl(clientOptions));
    this.userClient = Suppliers.memoize(() -> new UserClientImpl(clientOptions));
  }

  @Override
  public DeviceClient device() {
    return this.deviceClient.get();
  }

  @Override
  public EventClient event() {
    return this.eventClient.get();
  }

  @Override
  public UserClient user() {
    return this.userClient.get();
  }
}

]


local[resources/raven/device/DeviceClient.java]=[
package resources.raven.device;

import java.lang.String;
import resources.raven.device.types.Device;

public interface DeviceClient {
  Device add(String appId, String userId, Device request);

  Device update(String appId, String userId, String deviceId, Device request);

  void delete(String appId, String userId, String deviceId);

  Device getDevice(String appId, String userId, String deviceId);
}

]


local[resources/raven/device/DeviceClientImpl.java]=[
package resources.raven.device;

import core.ClientOptions;
import core.ObjectMappers;
import java.lang.Exception;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.raven.device.types.Device;

public final class DeviceClientImpl implements DeviceClient {
  private final ClientOptions clientOptions;

  public DeviceClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public Device add(String appId, String userId, Device request) {
    HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("v1/apps")
      .addPathSegment(appId)
      .addPathSegments("users/")
      .addPathSegment(userId)
      .addPathSegments("devices")
      .build();
    RequestBody _requestBody;
    try {
      _requestBody = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request _request = new Request.Builder()
      .url(_httpUrl)
      .method("POST", _requestBody)
      .headers(Headers.of(clientOptions.headers()))
      .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), Device.class);
      }
      throw new RuntimeException();
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public Device update(String appId, String userId, String deviceId, Device request) {
    HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("v1/apps")
      .addPathSegment(appId)
      .addPathSegments("users/")
      .addPathSegment(userId)
      .addPathSegments("devices/")
      .addPathSegment(deviceId)
      .build();
    RequestBody _requestBody;
    try {
      _requestBody = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(request), MediaType.parse("application/json"));
    }
    catch(Exception e) {
      throw new RuntimeException(e);
    }
    Request _request = new Request.Builder()
      .url(_httpUrl)
      .method("PUT", _requestBody)
      .headers(Headers.of(clientOptions.headers()))
      .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), Device.class);
      }
      throw new RuntimeException();
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public void delete(String appId, String userId, String deviceId) {
    HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("v1/apps")
      .addPathSegment(appId)
      .addPathSegments("users/")
      .addPathSegment(userId)
      .addPathSegments("devices/")
      .addPathSegment(deviceId)
      .build();Request _request = new Request.Builder()
      .url(_httpUrl)
      .method("DELETE", null)
      .headers(Headers.of(clientOptions.headers()))
      .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return;
      }
      throw new RuntimeException();
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }
  }

  @Override
  public Device getDevice(String appId, String userId, String deviceId) {
    HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("v1/apps")
      .addPathSegment(appId)
      .addPathSegments("users/")
      .addPathSegment(userId)
      .addPathSegments("devices/")
      .addPathSegment(deviceId)
      .build();Request _request = new Request.Builder()
      .url(_httpUrl)
      .method("GET", null)
      .headers(Headers.of(clientOptions.headers()))
      .build();
    try {
      Response _response = clientOptions.httpClient().newCall(_request).execute();
      if (_response.isSuccessful()) {
        return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), Device.class);
      }
      throw new RuntimeException();
    }
    catch (Exception e) {
      throw new RuntimeException(e);
    }
  }
}

]


local[resources/raven/device/types/Device.java]=[
package resources.raven.device.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = Device.Builder.class
)
public final class Device {
  private final Optional<String> id;

  private final Optional<Platform> platform;

  private final Optional<String> onesignalPlayerId;

  private final Optional<String> xiaomiToken;

  private final Optional<String> oppoToken;

  private final Optional<String> vivoToken;

  private final Optional<String> huaweiToken;

  private final Optional<String> fcmToken;

  private final Optional<String> ravenId;

  private final Optional<String> deviceSid;

  private final Optional<Boolean> notificationsDisabled;

  private final Optional<Long> createdAt;

  private final Optional<Long> updatedAt;

  private int _cachedHashCode;

  Device(Optional<String> id, Optional<Platform> platform, Optional<String> onesignalPlayerId,
      Optional<String> xiaomiToken, Optional<String> oppoToken, Optional<String> vivoToken,
      Optional<String> huaweiToken, Optional<String> fcmToken, Optional<String> ravenId,
      Optional<String> deviceSid, Optional<Boolean> notificationsDisabled, Optional<Long> createdAt,
      Optional<Long> updatedAt) {
    this.id = id;
    this.platform = platform;
    this.onesignalPlayerId = onesignalPlayerId;
    this.xiaomiToken = xiaomiToken;
    this.oppoToken = oppoToken;
    this.vivoToken = vivoToken;
    this.huaweiToken = huaweiToken;
    this.fcmToken = fcmToken;
    this.ravenId = ravenId;
    this.deviceSid = deviceSid;
    this.notificationsDisabled = notificationsDisabled;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  @JsonProperty("id")
  public Optional<String> getId() {
    return id;
  }

  @JsonProperty("platform")
  public Optional<Platform> getPlatform() {
    return platform;
  }

  @JsonProperty("onesignal_player_id")
  public Optional<String> getOnesignalPlayerId() {
    return onesignalPlayerId;
  }

  @JsonProperty("xiaomi_token")
  public Optional<String> getXiaomiToken() {
    return xiaomiToken;
  }

  @JsonProperty("oppo_token")
  public Optional<String> getOppoToken() {
    return oppoToken;
  }

  @JsonProperty("vivo_token")
  public Optional<String> getVivoToken() {
    return vivoToken;
  }

  @JsonProperty("huaweiToken")
  public Optional<String> getHuaweiToken() {
    return huaweiToken;
  }

  /**
   * @return firebase device token
   */
  @JsonProperty("fcm_token")
  public Optional<String> getFcmToken() {
    return fcmToken;
  }

  /**
   * @return user id affiliated with device
   */
  @JsonProperty("raven_id")
  public Optional<String> getRavenId() {
    return ravenId;
  }

  @JsonProperty("device_sid")
  public Optional<String> getDeviceSid() {
    return deviceSid;
  }

  @JsonProperty("notifications_disabled")
  public Optional<Boolean> getNotificationsDisabled() {
    return notificationsDisabled;
  }

  @JsonProperty("created_at")
  public Optional<Long> getCreatedAt() {
    return createdAt;
  }

  @JsonProperty("updated_at")
  public Optional<Long> getUpdatedAt() {
    return updatedAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Device && equalTo((Device) other);
  }

  private boolean equalTo(Device other) {
    return id.equals(other.id) && platform.equals(other.platform) && onesignalPlayerId.equals(other.onesignalPlayerId) && xiaomiToken.equals(other.xiaomiToken) && oppoToken.equals(other.oppoToken) && vivoToken.equals(other.vivoToken) && huaweiToken.equals(other.huaweiToken) && fcmToken.equals(other.fcmToken) && ravenId.equals(other.ravenId) && deviceSid.equals(other.deviceSid) && notificationsDisabled.equals(other.notificationsDisabled) && createdAt.equals(other.createdAt) && updatedAt.equals(other.updatedAt);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.platform, this.onesignalPlayerId, this.xiaomiToken, this.oppoToken, this.vivoToken, this.huaweiToken, this.fcmToken, this.ravenId, this.deviceSid, this.notificationsDisabled, this.createdAt, this.updatedAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "Device{" + "id: " + id + ", platform: " + platform + ", onesignalPlayerId: " + onesignalPlayerId + ", xiaomiToken: " + xiaomiToken + ", oppoToken: " + oppoToken + ", vivoToken: " + vivoToken + ", huaweiToken: " + huaweiToken + ", fcmToken: " + fcmToken + ", ravenId: " + ravenId + ", deviceSid: " + deviceSid + ", notificationsDisabled: " + notificationsDisabled + ", createdAt: " + createdAt + ", updatedAt: " + updatedAt + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> id = Optional.empty();

    private Optional<Platform> platform = Optional.empty();

    private Optional<String> onesignalPlayerId = Optional.empty();

    private Optional<String> xiaomiToken = Optional.empty();

    private Optional<String> oppoToken = Optional.empty();

    private Optional<String> vivoToken = Optional.empty();

    private Optional<String> huaweiToken = Optional.empty();

    private Optional<String> fcmToken = Optional.empty();

    private Optional<String> ravenId = Optional.empty();

    private Optional<String> deviceSid = Optional.empty();

    private Optional<Boolean> notificationsDisabled = Optional.empty();

    private Optional<Long> createdAt = Optional.empty();

    private Optional<Long> updatedAt = Optional.empty();

    private Builder() {
    }

    public Builder from(Device other) {
      id(other.getId());
      platform(other.getPlatform());
      onesignalPlayerId(other.getOnesignalPlayerId());
      xiaomiToken(other.getXiaomiToken());
      oppoToken(other.getOppoToken());
      vivoToken(other.getVivoToken());
      huaweiToken(other.getHuaweiToken());
      fcmToken(other.getFcmToken());
      ravenId(other.getRavenId());
      deviceSid(other.getDeviceSid());
      notificationsDisabled(other.getNotificationsDisabled());
      createdAt(other.getCreatedAt());
      updatedAt(other.getUpdatedAt());
      return this;
    }

    @JsonSetter(
        value = "id",
        nulls = Nulls.SKIP
    )
    public Builder id(Optional<String> id) {
      this.id = id;
      return this;
    }

    public Builder id(String id) {
      this.id = Optional.of(id);
      return this;
    }

    @JsonSetter(
        value = "platform",
        nulls = Nulls.SKIP
    )
    public Builder platform(Optional<Platform> platform) {
      this.platform = platform;
      return this;
    }

    public Builder platform(Platform platform) {
      this.platform = Optional.of(platform);
      return this;
    }

    @JsonSetter(
        value = "onesignal_player_id",
        nulls = Nulls.SKIP
    )
    public Builder onesignalPlayerId(Optional<String> onesignalPlayerId) {
      this.onesignalPlayerId = onesignalPlayerId;
      return this;
    }

    public Builder onesignalPlayerId(String onesignalPlayerId) {
      this.onesignalPlayerId = Optional.of(onesignalPlayerId);
      return this;
    }

    @JsonSetter(
        value = "xiaomi_token",
        nulls = Nulls.SKIP
    )
    public Builder xiaomiToken(Optional<String> xiaomiToken) {
      this.xiaomiToken = xiaomiToken;
      return this;
    }

    public Builder xiaomiToken(String xiaomiToken) {
      this.xiaomiToken = Optional.of(xiaomiToken);
      return this;
    }

    @JsonSetter(
        value = "oppo_token",
        nulls = Nulls.SKIP
    )
    public Builder oppoToken(Optional<String> oppoToken) {
      this.oppoToken = oppoToken;
      return this;
    }

    public Builder oppoToken(String oppoToken) {
      this.oppoToken = Optional.of(oppoToken);
      return this;
    }

    @JsonSetter(
        value = "vivo_token",
        nulls = Nulls.SKIP
    )
    public Builder vivoToken(Optional<String> vivoToken) {
      this.vivoToken = vivoToken;
      return this;
    }

    public Builder vivoToken(String vivoToken) {
      this.vivoToken = Optional.of(vivoToken);
      return this;
    }

    @JsonSetter(
        value = "huaweiToken",
        nulls = Nulls.SKIP
    )
    public Builder huaweiToken(Optional<String> huaweiToken) {
      this.huaweiToken = huaweiToken;
      return this;
    }

    public Builder huaweiToken(String huaweiToken) {
      this.huaweiToken = Optional.of(huaweiToken);
      return this;
    }

    @JsonSetter(
        value = "fcm_token",
        nulls = Nulls.SKIP
    )
    public Builder fcmToken(Optional<String> fcmToken) {
      this.fcmToken = fcmToken;
      return this;
    }

    public Builder fcmToken(String fcmToken) {
      this.fcmToken = Optional.of(fcmToken);
      return this;
    }

    @JsonSetter(
        value = "raven_id",
        nulls = Nulls.SKIP
    )
    public Builder ravenId(Optional<String> ravenId) {
      this.ravenId = ravenId;
      return this;
    }

    public Builder ravenId(String ravenId) {
      this.ravenId = Optional.of(ravenId);
      return this;
    }

    @JsonSetter(
        value = "device_sid",
        nulls = Nulls.SKIP
    )
    public Builder deviceSid(Optional<String> deviceSid) {
      this.deviceSid = deviceSid;
      return this;
    }

    public Builder deviceSid(String deviceSid) {
      this.deviceSid = Optional.of(deviceSid);
      return this;
    }

    @JsonSetter(
        value = "notifications_disabled",
        nulls = Nulls.SKIP
    )
    public Builder notificationsDisabled(Optional<Boolean> notificationsDisabled) {
      this.notificationsDisabled = notificationsDisabled;
      return this;
    }

    public Builder notificationsDisabled(Boolean notificationsDisabled) {
      this.notificationsDisabled = Optional.of(notificationsDisabled);
      return this;
    }

    @JsonSetter(
        value = "created_at",
        nulls = Nulls.SKIP
    )
    public Builder createdAt(Optional<Long> createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    public Builder createdAt(Long createdAt) {
      this.createdAt = Optional.of(createdAt);
      return this;
    }

    @JsonSetter(
        value = "updated_at",
        nulls = Nulls.SKIP
    )
    public Builder updatedAt(Optional<Long> updatedAt) {
      this.updatedAt = updatedAt;
      return this;
    }

    public Builder updatedAt(Long updatedAt) {
      this.updatedAt = Optional.of(updatedAt);
      return this;
    }

    public Device build() {
      return new Device(id, platform, onesignalPlayerId, xiaomiToken, oppoToken, vivoToken, huaweiToken, fcmToken, ravenId, deviceSid, notificationsDisabled, createdAt, updatedAt);
    }
  }
}

]


local[resources/raven/device/types/Platform.java]=[
package resources.raven.device.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;

public final class Platform {
  public static final Platform WEB = new Platform(Value.WEB, "web");

  public static final Platform IOS = new Platform(Value.IOS, "ios");

  public static final Platform ANDROID = new Platform(Value.ANDROID, "android");

  private final Value value;

  private final String string;

  Platform(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof Platform && this.string.equals(((Platform) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case WEB:
        return visitor.visitWeb();
      case IOS:
        return visitor.visitIos();
      case ANDROID:
        return visitor.visitAndroid();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static Platform valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "web":
        return WEB;
      case "ios":
        return IOS;
      case "android":
        return ANDROID;
      default:
        return new Platform(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    ANDROID,

    WEB,

    IOS,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitAndroid();

    T visitWeb();

    T visitIos();

    T visitUnknown(String unknownType);
  }
}

]


local[resources/raven/event/EventClient.java]=[
package resources.raven.event;

import java.lang.String;
import resources.raven.event.requests.BulkSendEventRequest;
import resources.raven.event.requests.SendEventRequest;
import resources.raven.event.types.SendEventResponse;

public interface EventClient {
  SendEventResponse send(String appId, SendEventRequest request);

  SendEventResponse sendBulk(String appId, BulkSendEventRequest request);
}

]


local[resources/raven/event/EventClientImpl.java]=[
package resources.raven.event;

import core.ClientOptions;
import core.ObjectMappers;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.raven.event.requests.BulkSendEventRequest;
import resources.raven.event.requests.SendEventRequest;
import resources.raven.event.types.SendEventResponse;

public final class EventClientImpl implements EventClient {
  private final ClientOptions clientOptions;

  public EventClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public SendEventResponse send(String appId, SendEventRequest request) {
    HttpUrl.Builder _httpUrlBuilder = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("v1/apps")
      .addPathSegment(appId)
      .addPathSegments("events/send")
      ;HttpUrl _httpUrl = _httpUrlBuilder.build()
          ;
      Map<String, Object> _requestBodyProperties = new HashMap<>();
      _requestBodyProperties.put("event", request.getEvent());
      _requestBodyProperties.put("data", request.getData());
      _requestBodyProperties.put("user", request.getUser());
      _requestBodyProperties.put("scheduleAt", request.getScheduleAt());
      _requestBodyProperties.put("override", request.getOverride());
      RequestBody _requestBody;
      try {
        _requestBody = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties), MediaType.parse("application/json"));
      }
      catch(Exception e) {
        throw new RuntimeException(e);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(_httpUrl)
        .method("POST", _requestBody)
        .headers(Headers.of(clientOptions.headers()));
      if (request.getIdempotencyKey().isPresent()) {
        _requestBuilder.addHeader("Idempotency-Key", request.getIdempotencyKey().get());
      }
      Request _request = _requestBuilder.build();
      try {
        Response _response = clientOptions.httpClient().newCall(_request).execute();
        if (_response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), SendEventResponse.class);
        }
        throw new RuntimeException();
      }
      catch (Exception e) {
        throw new RuntimeException(e);
      }
    }

    @Override
    public SendEventResponse sendBulk(String appId, BulkSendEventRequest request) {
      HttpUrl.Builder _httpUrlBuilder = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
        .addPathSegments("v1/apps")
        .addPathSegment(appId)
        .addPathSegments("events/bulk_send")
        ;HttpUrl _httpUrl = _httpUrlBuilder.build()
            ;
        Map<String, Object> _requestBodyProperties = new HashMap<>();
        _requestBodyProperties.put("event", request.getEvent());
        _requestBodyProperties.put("batch", request.getBatch());
        RequestBody _requestBody;
        try {
          _requestBody = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties), MediaType.parse("application/json"));
        }
        catch(Exception e) {
          throw new RuntimeException(e);
        }
        Request.Builder _requestBuilder = new Request.Builder()
          .url(_httpUrl)
          .method("POST", _requestBody)
          .headers(Headers.of(clientOptions.headers()));
        if (request.getIdempotencyKey().isPresent()) {
          _requestBuilder.addHeader("Idempotency-Key", request.getIdempotencyKey().get());
        }
        Request _request = _requestBuilder.build();
        try {
          Response _response = clientOptions.httpClient().newCall(_request).execute();
          if (_response.isSuccessful()) {
            return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), SendEventResponse.class);
          }
          throw new RuntimeException();
        }
        catch (Exception e) {
          throw new RuntimeException(e);
        }
      }
    }

]


local[resources/raven/event/requests/BulkSendEventRequest.java]=[
package resources.raven.event.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import resources.raven.event.types.BatchEvent;

@JsonDeserialize(
    builder = BulkSendEventRequest.Builder.class
)
public final class BulkSendEventRequest {
  private final Optional<String> idempotencyKey;

  private final String event;

  private final List<BatchEvent> batch;

  private int _cachedHashCode;

  BulkSendEventRequest(Optional<String> idempotencyKey, String event, List<BatchEvent> batch) {
    this.idempotencyKey = idempotencyKey;
    this.event = event;
    this.batch = batch;
  }

  /**
   * @return The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
   * This is useful when an API call is disrupted in transit and you do not receive a response.
   * For example, if a request to send event does not respond due to a network connection error, you can retry the request with the same idempotency key to guarantee that no more than one event is sent.
   * An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request.
   * How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.
   * Idempotency keys can be up to 255 characters long.
   */
  @JsonProperty("Idempotency-Key")
  public Optional<String> getIdempotencyKey() {
    return idempotencyKey;
  }

  @JsonProperty("event")
  public String getEvent() {
    return event;
  }

  /**
   * @return List of events
   */
  @JsonProperty("batch")
  public List<BatchEvent> getBatch() {
    return batch;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BulkSendEventRequest && equalTo((BulkSendEventRequest) other);
  }

  private boolean equalTo(BulkSendEventRequest other) {
    return idempotencyKey.equals(other.idempotencyKey) && event.equals(other.event) && batch.equals(other.batch);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.idempotencyKey, this.event, this.batch);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BulkSendEventRequest{" + "idempotencyKey: " + idempotencyKey + ", event: " + event + ", batch: " + batch + "}";
  }

  public static EventStage builder() {
    return new Builder();
  }

  public interface EventStage {
    _FinalStage event(String event);

    Builder from(BulkSendEventRequest other);
  }

  public interface _FinalStage {
    BulkSendEventRequest build();

    _FinalStage idempotencyKey(Optional<String> idempotencyKey);

    _FinalStage idempotencyKey(String idempotencyKey);

    _FinalStage batch(List<BatchEvent> batch);

    _FinalStage addBatch(BatchEvent batch);

    _FinalStage addAllBatch(List<BatchEvent> batch);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements EventStage, _FinalStage {
    private String event;

    private List<BatchEvent> batch = new ArrayList<>();

    private Optional<String> idempotencyKey = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(BulkSendEventRequest other) {
      idempotencyKey(other.getIdempotencyKey());
      event(other.getEvent());
      batch(other.getBatch());
      return this;
    }

    @Override
    @JsonSetter("event")
    public _FinalStage event(String event) {
      this.event = event;
      return this;
    }

    /**
     * <p>List of events</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage addAllBatch(List<BatchEvent> batch) {
      this.batch.addAll(batch);
      return this;
    }

    /**
     * <p>List of events</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage addBatch(BatchEvent batch) {
      this.batch.add(batch);
      return this;
    }

    @Override
    @JsonSetter(
        value = "batch",
        nulls = Nulls.SKIP
    )
    public _FinalStage batch(List<BatchEvent> batch) {
      this.batch.clear();
      this.batch.addAll(batch);
      return this;
    }

    /**
     * <p>The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
     * This is useful when an API call is disrupted in transit and you do not receive a response.
     * For example, if a request to send event does not respond due to a network connection error, you can retry the request with the same idempotency key to guarantee that no more than one event is sent.
     * An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request.
     * How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.
     * Idempotency keys can be up to 255 characters long.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = Optional.of(idempotencyKey);
      return this;
    }

    @Override
    @JsonSetter(
        value = "Idempotency-Key",
        nulls = Nulls.SKIP
    )
    public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    @Override
    public BulkSendEventRequest build() {
      return new BulkSendEventRequest(idempotencyKey, event, batch);
    }
  }
}

]


local[resources/raven/event/requests/SendEventRequest.java]=[
package resources.raven.event.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import resources.raven.event.types.EventOverride;
import resources.raven.event.types.User;

@JsonDeserialize(
    builder = SendEventRequest.Builder.class
)
public final class SendEventRequest {
  private final Optional<String> idempotencyKey;

  private final String event;

  private final Map<String, Optional<Object>> data;

  private final Optional<User> user;

  private final Optional<Long> scheduleAt;

  private final Optional<EventOverride> override;

  private int _cachedHashCode;

  SendEventRequest(Optional<String> idempotencyKey, String event,
      Map<String, Optional<Object>> data, Optional<User> user, Optional<Long> scheduleAt,
      Optional<EventOverride> override) {
    this.idempotencyKey = idempotencyKey;
    this.event = event;
    this.data = data;
    this.user = user;
    this.scheduleAt = scheduleAt;
    this.override = override;
  }

  /**
   * @return The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
   * This is useful when an API call is disrupted in transit and you do not receive a response.
   * For example, if a request to send event does not respond due to a network connection error, you can retry the request with the same idempotency key to guarantee that no more than one event is sent.
   * An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request.
   * How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.
   * Idempotency keys can be up to 255 characters long.
   */
  @JsonProperty("Idempotency-Key")
  public Optional<String> getIdempotencyKey() {
    return idempotencyKey;
  }

  /**
   * @return event name
   */
  @JsonProperty("event")
  public String getEvent() {
    return event;
  }

  /**
   * @return {
   * &quot;param1&quot; : &quot;&lt;value1&gt;&quot;,
   * &quot;param2&quot; : &quot;&lt;value2&gt;&quot;,
   * &quot;param3&quot; : object/array&quot;
   * }
   */
  @JsonProperty("data")
  public Map<String, Optional<Object>> getData() {
    return data;
  }

  @JsonProperty("user")
  public Optional<User> getUser() {
    return user;
  }

  /**
   * @return Time to send message expressed as UTC milliseconds.
   * If not present, message will be sent immediately.
   */
  @JsonProperty("scheduleAt")
  public Optional<Long> getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("override")
  public Optional<EventOverride> getOverride() {
    return override;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SendEventRequest && equalTo((SendEventRequest) other);
  }

  private boolean equalTo(SendEventRequest other) {
    return idempotencyKey.equals(other.idempotencyKey) && event.equals(other.event) && data.equals(other.data) && user.equals(other.user) && scheduleAt.equals(other.scheduleAt) && override.equals(other.override);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.idempotencyKey, this.event, this.data, this.user, this.scheduleAt, this.override);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SendEventRequest{" + "idempotencyKey: " + idempotencyKey + ", event: " + event + ", data: " + data + ", user: " + user + ", scheduleAt: " + scheduleAt + ", override: " + override + "}";
  }

  public static EventStage builder() {
    return new Builder();
  }

  public interface EventStage {
    _FinalStage event(String event);

    Builder from(SendEventRequest other);
  }

  public interface _FinalStage {
    SendEventRequest build();

    _FinalStage idempotencyKey(Optional<String> idempotencyKey);

    _FinalStage idempotencyKey(String idempotencyKey);

    _FinalStage data(Map<String, Optional<Object>> data);

    _FinalStage putAllData(Map<String, Optional<Object>> data);

    _FinalStage data(String key, Optional<Object> value);

    _FinalStage user(Optional<User> user);

    _FinalStage user(User user);

    _FinalStage scheduleAt(Optional<Long> scheduleAt);

    _FinalStage scheduleAt(Long scheduleAt);

    _FinalStage override(Optional<EventOverride> override);

    _FinalStage override(EventOverride override);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements EventStage, _FinalStage {
    private String event;

    private Optional<EventOverride> override = Optional.empty();

    private Optional<Long> scheduleAt = Optional.empty();

    private Optional<User> user = Optional.empty();

    private Map<String, Optional<Object>> data = new LinkedHashMap<>();

    private Optional<String> idempotencyKey = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(SendEventRequest other) {
      idempotencyKey(other.getIdempotencyKey());
      event(other.getEvent());
      data(other.getData());
      user(other.getUser());
      scheduleAt(other.getScheduleAt());
      override(other.getOverride());
      return this;
    }

    /**
     * <p>event name</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("event")
    public _FinalStage event(String event) {
      this.event = event;
      return this;
    }

    @Override
    public _FinalStage override(EventOverride override) {
      this.override = Optional.of(override);
      return this;
    }

    @Override
    @JsonSetter(
        value = "override",
        nulls = Nulls.SKIP
    )
    public _FinalStage override(Optional<EventOverride> override) {
      this.override = override;
      return this;
    }

    /**
     * <p>Time to send message expressed as UTC milliseconds.
     * If not present, message will be sent immediately.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage scheduleAt(Long scheduleAt) {
      this.scheduleAt = Optional.of(scheduleAt);
      return this;
    }

    @Override
    @JsonSetter(
        value = "scheduleAt",
        nulls = Nulls.SKIP
    )
    public _FinalStage scheduleAt(Optional<Long> scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public _FinalStage user(User user) {
      this.user = Optional.of(user);
      return this;
    }

    @Override
    @JsonSetter(
        value = "user",
        nulls = Nulls.SKIP
    )
    public _FinalStage user(Optional<User> user) {
      this.user = user;
      return this;
    }

    /**
     * <p>{
     * &quot;param1&quot; : &quot;&lt;value1&gt;&quot;,
     * &quot;param2&quot; : &quot;&lt;value2&gt;&quot;,
     * &quot;param3&quot; : object/array&quot;
     * }</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage data(String key, Optional<Object> value) {
      this.data.put(key, value);
      return this;
    }

    /**
     * <p>{
     * &quot;param1&quot; : &quot;&lt;value1&gt;&quot;,
     * &quot;param2&quot; : &quot;&lt;value2&gt;&quot;,
     * &quot;param3&quot; : object/array&quot;
     * }</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage putAllData(Map<String, Optional<Object>> data) {
      this.data.putAll(data);
      return this;
    }

    @Override
    @JsonSetter(
        value = "data",
        nulls = Nulls.SKIP
    )
    public _FinalStage data(Map<String, Optional<Object>> data) {
      this.data.clear();
      this.data.putAll(data);
      return this;
    }

    /**
     * <p>The API supports idempotency for safely retrying requests without accidentally performing the same operation twice.
     * This is useful when an API call is disrupted in transit and you do not receive a response.
     * For example, if a request to send event does not respond due to a network connection error, you can retry the request with the same idempotency key to guarantee that no more than one event is sent.
     * An idempotency key is a unique value generated by the client which the server uses to recognize subsequent retries of the same request.
     * How you create unique keys is up to you, but we suggest using V4 UUIDs, or another random string with enough entropy to avoid collisions.
     * Idempotency keys can be up to 255 characters long.</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage idempotencyKey(String idempotencyKey) {
      this.idempotencyKey = Optional.of(idempotencyKey);
      return this;
    }

    @Override
    @JsonSetter(
        value = "Idempotency-Key",
        nulls = Nulls.SKIP
    )
    public _FinalStage idempotencyKey(Optional<String> idempotencyKey) {
      this.idempotencyKey = idempotencyKey;
      return this;
    }

    @Override
    public SendEventRequest build() {
      return new SendEventRequest(idempotencyKey, event, data, user, scheduleAt, override);
    }
  }
}

]


local[resources/raven/event/types/Attachment.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = Attachment.Builder.class
)
public final class Attachment {
  private final String fileName;

  private final String content;

  private final String url;

  private int _cachedHashCode;

  Attachment(String fileName, String content, String url) {
    this.fileName = fileName;
    this.content = content;
    this.url = url;
  }

  @JsonProperty("file_name")
  public String getFileName() {
    return fileName;
  }

  @JsonProperty("content")
  public String getContent() {
    return content;
  }

  @JsonProperty("url")
  public String getUrl() {
    return url;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Attachment && equalTo((Attachment) other);
  }

  private boolean equalTo(Attachment other) {
    return fileName.equals(other.fileName) && content.equals(other.content) && url.equals(other.url);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.fileName, this.content, this.url);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "Attachment{" + "fileName: " + fileName + ", content: " + content + ", url: " + url + "}";
  }

  public static FileNameStage builder() {
    return new Builder();
  }

  public interface FileNameStage {
    ContentStage fileName(String fileName);

    Builder from(Attachment other);
  }

  public interface ContentStage {
    UrlStage content(String content);
  }

  public interface UrlStage {
    _FinalStage url(String url);
  }

  public interface _FinalStage {
    Attachment build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements FileNameStage, ContentStage, UrlStage, _FinalStage {
    private String fileName;

    private String content;

    private String url;

    private Builder() {
    }

    @Override
    public Builder from(Attachment other) {
      fileName(other.getFileName());
      content(other.getContent());
      url(other.getUrl());
      return this;
    }

    @Override
    @JsonSetter("file_name")
    public ContentStage fileName(String fileName) {
      this.fileName = fileName;
      return this;
    }

    @Override
    @JsonSetter("content")
    public UrlStage content(String content) {
      this.content = content;
      return this;
    }

    @Override
    @JsonSetter("url")
    public _FinalStage url(String url) {
      this.url = url;
      return this;
    }

    @Override
    public Attachment build() {
      return new Attachment(fileName, content, url);
    }
  }
}

]


local[resources/raven/event/types/BatchEvent.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = BatchEvent.Builder.class
)
public final class BatchEvent {
  private final Map<String, Optional<Object>> data;

  private final Optional<User> user;

  private final Optional<EventOverride> override;

  private int _cachedHashCode;

  BatchEvent(Map<String, Optional<Object>> data, Optional<User> user,
      Optional<EventOverride> override) {
    this.data = data;
    this.user = user;
    this.override = override;
  }

  /**
   * @return {
   * &quot;param1&quot; : &quot;&lt;value1&gt;&quot;,
   * &quot;param2&quot; : &quot;&lt;value2&gt;&quot;,
   * &quot;param3&quot; : object/array&quot;
   * }
   */
  @JsonProperty("data")
  public Map<String, Optional<Object>> getData() {
    return data;
  }

  @JsonProperty("user")
  public Optional<User> getUser() {
    return user;
  }

  @JsonProperty("override")
  public Optional<EventOverride> getOverride() {
    return override;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof BatchEvent && equalTo((BatchEvent) other);
  }

  private boolean equalTo(BatchEvent other) {
    return data.equals(other.data) && user.equals(other.user) && override.equals(other.override);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.data, this.user, this.override);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "BatchEvent{" + "data: " + data + ", user: " + user + ", override: " + override + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Map<String, Optional<Object>> data = new LinkedHashMap<>();

    private Optional<User> user = Optional.empty();

    private Optional<EventOverride> override = Optional.empty();

    private Builder() {
    }

    public Builder from(BatchEvent other) {
      data(other.getData());
      user(other.getUser());
      override(other.getOverride());
      return this;
    }

    @JsonSetter(
        value = "data",
        nulls = Nulls.SKIP
    )
    public Builder data(Map<String, Optional<Object>> data) {
      this.data.clear();
      this.data.putAll(data);
      return this;
    }

    public Builder putAllData(Map<String, Optional<Object>> data) {
      this.data.putAll(data);
      return this;
    }

    public Builder data(String key, Optional<Object> value) {
      this.data.put(key, value);
      return this;
    }

    @JsonSetter(
        value = "user",
        nulls = Nulls.SKIP
    )
    public Builder user(Optional<User> user) {
      this.user = user;
      return this;
    }

    public Builder user(User user) {
      this.user = Optional.of(user);
      return this;
    }

    @JsonSetter(
        value = "override",
        nulls = Nulls.SKIP
    )
    public Builder override(Optional<EventOverride> override) {
      this.override = override;
      return this;
    }

    public Builder override(EventOverride override) {
      this.override = Optional.of(override);
      return this;
    }

    public BatchEvent build() {
      return new BatchEvent(data, user, override);
    }
  }
}

]


local[resources/raven/event/types/ChannelOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = ChannelOverride.Builder.class
)
public final class ChannelOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  ChannelOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ChannelOverride && equalTo((ChannelOverride) other);
  }

  private boolean equalTo(ChannelOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ChannelOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(ChannelOverride other);
  }

  public interface _FinalStage {
    ChannelOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {
    }

    @Override
    public Builder from(ChannelOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public ChannelOverride build() {
      return new ChannelOverride(scheduleAt);
    }
  }
}

]


local[resources/raven/event/types/EmailMessage.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = EmailMessage.Builder.class
)
public final class EmailMessage {
  private final String text;

  private final String htmlBody;

  private final String subject;

  private int _cachedHashCode;

  EmailMessage(String text, String htmlBody, String subject) {
    this.text = text;
    this.htmlBody = htmlBody;
    this.subject = subject;
  }

  @JsonProperty("text")
  public String getText() {
    return text;
  }

  @JsonProperty("html_body")
  public String getHtmlBody() {
    return htmlBody;
  }

  @JsonProperty("subject")
  public String getSubject() {
    return subject;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EmailMessage && equalTo((EmailMessage) other);
  }

  private boolean equalTo(EmailMessage other) {
    return text.equals(other.text) && htmlBody.equals(other.htmlBody) && subject.equals(other.subject);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.text, this.htmlBody, this.subject);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EmailMessage{" + "text: " + text + ", htmlBody: " + htmlBody + ", subject: " + subject + "}";
  }

  public static TextStage builder() {
    return new Builder();
  }

  public interface TextStage {
    HtmlBodyStage text(String text);

    Builder from(EmailMessage other);
  }

  public interface HtmlBodyStage {
    SubjectStage htmlBody(String htmlBody);
  }

  public interface SubjectStage {
    _FinalStage subject(String subject);
  }

  public interface _FinalStage {
    EmailMessage build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TextStage, HtmlBodyStage, SubjectStage, _FinalStage {
    private String text;

    private String htmlBody;

    private String subject;

    private Builder() {
    }

    @Override
    public Builder from(EmailMessage other) {
      text(other.getText());
      htmlBody(other.getHtmlBody());
      subject(other.getSubject());
      return this;
    }

    @Override
    @JsonSetter("text")
    public HtmlBodyStage text(String text) {
      this.text = text;
      return this;
    }

    @Override
    @JsonSetter("html_body")
    public SubjectStage htmlBody(String htmlBody) {
      this.htmlBody = htmlBody;
      return this;
    }

    @Override
    @JsonSetter("subject")
    public _FinalStage subject(String subject) {
      this.subject = subject;
      return this;
    }

    @Override
    public EmailMessage build() {
      return new EmailMessage(text, htmlBody, subject);
    }
  }
}

]


local[resources/raven/event/types/EmailOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

@JsonDeserialize(
    builder = EmailOverride.Builder.class
)
public final class EmailOverride implements IChannelOverride {
  private final long scheduleAt;

  private final EmailRecipient from;

  private final List<EmailRecipient> cc;

  private final List<EmailRecipient> bcc;

  private final List<Attachment> attachments;

  private final EmailMessage message;

  private int _cachedHashCode;

  EmailOverride(long scheduleAt, EmailRecipient from, List<EmailRecipient> cc,
      List<EmailRecipient> bcc, List<Attachment> attachments, EmailMessage message) {
    this.scheduleAt = scheduleAt;
    this.from = from;
    this.cc = cc;
    this.bcc = bcc;
    this.attachments = attachments;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("from")
  public EmailRecipient getFrom() {
    return from;
  }

  @JsonProperty("cc")
  public List<EmailRecipient> getCc() {
    return cc;
  }

  @JsonProperty("bcc")
  public List<EmailRecipient> getBcc() {
    return bcc;
  }

  @JsonProperty("attachments")
  public List<Attachment> getAttachments() {
    return attachments;
  }

  @JsonProperty("message")
  public EmailMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EmailOverride && equalTo((EmailOverride) other);
  }

  private boolean equalTo(EmailOverride other) {
    return scheduleAt == other.scheduleAt && from.equals(other.from) && cc.equals(other.cc) && bcc.equals(other.bcc) && attachments.equals(other.attachments) && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt, this.from, this.cc, this.bcc, this.attachments, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EmailOverride{" + "scheduleAt: " + scheduleAt + ", from: " + from + ", cc: " + cc + ", bcc: " + bcc + ", attachments: " + attachments + ", message: " + message + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    FromStage scheduleAt(long scheduleAt);

    Builder from(EmailOverride other);
  }

  public interface FromStage {
    MessageStage from(EmailRecipient from);
  }

  public interface MessageStage {
    _FinalStage message(EmailMessage message);
  }

  public interface _FinalStage {
    EmailOverride build();

    _FinalStage cc(List<EmailRecipient> cc);

    _FinalStage addCc(EmailRecipient cc);

    _FinalStage addAllCc(List<EmailRecipient> cc);

    _FinalStage bcc(List<EmailRecipient> bcc);

    _FinalStage addBcc(EmailRecipient bcc);

    _FinalStage addAllBcc(List<EmailRecipient> bcc);

    _FinalStage attachments(List<Attachment> attachments);

    _FinalStage addAttachments(Attachment attachments);

    _FinalStage addAllAttachments(List<Attachment> attachments);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, FromStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private EmailRecipient from;

    private EmailMessage message;

    private List<Attachment> attachments = new ArrayList<>();

    private List<EmailRecipient> bcc = new ArrayList<>();

    private List<EmailRecipient> cc = new ArrayList<>();

    private Builder() {
    }

    @Override
    public Builder from(EmailOverride other) {
      scheduleAt(other.getScheduleAt());
      from(other.getFrom());
      cc(other.getCc());
      bcc(other.getBcc());
      attachments(other.getAttachments());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public FromStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("from")
    public MessageStage from(EmailRecipient from) {
      this.from = from;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(EmailMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public _FinalStage addAllAttachments(List<Attachment> attachments) {
      this.attachments.addAll(attachments);
      return this;
    }

    @Override
    public _FinalStage addAttachments(Attachment attachments) {
      this.attachments.add(attachments);
      return this;
    }

    @Override
    @JsonSetter(
        value = "attachments",
        nulls = Nulls.SKIP
    )
    public _FinalStage attachments(List<Attachment> attachments) {
      this.attachments.clear();
      this.attachments.addAll(attachments);
      return this;
    }

    @Override
    public _FinalStage addAllBcc(List<EmailRecipient> bcc) {
      this.bcc.addAll(bcc);
      return this;
    }

    @Override
    public _FinalStage addBcc(EmailRecipient bcc) {
      this.bcc.add(bcc);
      return this;
    }

    @Override
    @JsonSetter(
        value = "bcc",
        nulls = Nulls.SKIP
    )
    public _FinalStage bcc(List<EmailRecipient> bcc) {
      this.bcc.clear();
      this.bcc.addAll(bcc);
      return this;
    }

    @Override
    public _FinalStage addAllCc(List<EmailRecipient> cc) {
      this.cc.addAll(cc);
      return this;
    }

    @Override
    public _FinalStage addCc(EmailRecipient cc) {
      this.cc.add(cc);
      return this;
    }

    @Override
    @JsonSetter(
        value = "cc",
        nulls = Nulls.SKIP
    )
    public _FinalStage cc(List<EmailRecipient> cc) {
      this.cc.clear();
      this.cc.addAll(cc);
      return this;
    }

    @Override
    public EmailOverride build() {
      return new EmailOverride(scheduleAt, from, cc, bcc, attachments, message);
    }
  }
}

]


local[resources/raven/event/types/EmailRecipient.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = EmailRecipient.Builder.class
)
public final class EmailRecipient {
  private final String name;

  private final String address;

  private int _cachedHashCode;

  EmailRecipient(String name, String address) {
    this.name = name;
    this.address = address;
  }

  @JsonProperty("name")
  public String getName() {
    return name;
  }

  @JsonProperty("address")
  public String getAddress() {
    return address;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EmailRecipient && equalTo((EmailRecipient) other);
  }

  private boolean equalTo(EmailRecipient other) {
    return name.equals(other.name) && address.equals(other.address);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.name, this.address);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EmailRecipient{" + "name: " + name + ", address: " + address + "}";
  }

  public static NameStage builder() {
    return new Builder();
  }

  public interface NameStage {
    AddressStage name(String name);

    Builder from(EmailRecipient other);
  }

  public interface AddressStage {
    _FinalStage address(String address);
  }

  public interface _FinalStage {
    EmailRecipient build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements NameStage, AddressStage, _FinalStage {
    private String name;

    private String address;

    private Builder() {
    }

    @Override
    public Builder from(EmailRecipient other) {
      name(other.getName());
      address(other.getAddress());
      return this;
    }

    @Override
    @JsonSetter("name")
    public AddressStage name(String name) {
      this.name = name;
      return this;
    }

    @Override
    @JsonSetter("address")
    public _FinalStage address(String address) {
      this.address = address;
      return this;
    }

    @Override
    public EmailRecipient build() {
      return new EmailRecipient(name, address);
    }
  }
}

]


local[resources/raven/event/types/EventOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = EventOverride.Builder.class
)
public final class EventOverride {
  private final Optional<EmailOverride> email;

  private final Optional<SmsOverride> sms;

  private final Optional<WhatsappOverride> whatsapp;

  private final Optional<PushOverride> push;

  private final Optional<WebhookOverride> webhook;

  private final Optional<VoiceOverride> voice;

  private final Optional<SlackOverride> slack;

  private final Optional<InAppOverride> inApp;

  private final Optional<TelegramOverride> telegram;

  private final Map<String, ProviderOverride> providers;

  private int _cachedHashCode;

  EventOverride(Optional<EmailOverride> email, Optional<SmsOverride> sms,
      Optional<WhatsappOverride> whatsapp, Optional<PushOverride> push,
      Optional<WebhookOverride> webhook, Optional<VoiceOverride> voice,
      Optional<SlackOverride> slack, Optional<InAppOverride> inApp,
      Optional<TelegramOverride> telegram, Map<String, ProviderOverride> providers) {
    this.email = email;
    this.sms = sms;
    this.whatsapp = whatsapp;
    this.push = push;
    this.webhook = webhook;
    this.voice = voice;
    this.slack = slack;
    this.inApp = inApp;
    this.telegram = telegram;
    this.providers = providers;
  }

  @JsonProperty("email")
  public Optional<EmailOverride> getEmail() {
    return email;
  }

  @JsonProperty("sms")
  public Optional<SmsOverride> getSms() {
    return sms;
  }

  @JsonProperty("whatsapp")
  public Optional<WhatsappOverride> getWhatsapp() {
    return whatsapp;
  }

  @JsonProperty("push")
  public Optional<PushOverride> getPush() {
    return push;
  }

  @JsonProperty("webhook")
  public Optional<WebhookOverride> getWebhook() {
    return webhook;
  }

  @JsonProperty("voice")
  public Optional<VoiceOverride> getVoice() {
    return voice;
  }

  @JsonProperty("slack")
  public Optional<SlackOverride> getSlack() {
    return slack;
  }

  @JsonProperty("in_app")
  public Optional<InAppOverride> getInApp() {
    return inApp;
  }

  @JsonProperty("telegram")
  public Optional<TelegramOverride> getTelegram() {
    return telegram;
  }

  @JsonProperty("providers")
  public Map<String, ProviderOverride> getProviders() {
    return providers;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof EventOverride && equalTo((EventOverride) other);
  }

  private boolean equalTo(EventOverride other) {
    return email.equals(other.email) && sms.equals(other.sms) && whatsapp.equals(other.whatsapp) && push.equals(other.push) && webhook.equals(other.webhook) && voice.equals(other.voice) && slack.equals(other.slack) && inApp.equals(other.inApp) && telegram.equals(other.telegram) && providers.equals(other.providers);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.email, this.sms, this.whatsapp, this.push, this.webhook, this.voice, this.slack, this.inApp, this.telegram, this.providers);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "EventOverride{" + "email: " + email + ", sms: " + sms + ", whatsapp: " + whatsapp + ", push: " + push + ", webhook: " + webhook + ", voice: " + voice + ", slack: " + slack + ", inApp: " + inApp + ", telegram: " + telegram + ", providers: " + providers + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<EmailOverride> email = Optional.empty();

    private Optional<SmsOverride> sms = Optional.empty();

    private Optional<WhatsappOverride> whatsapp = Optional.empty();

    private Optional<PushOverride> push = Optional.empty();

    private Optional<WebhookOverride> webhook = Optional.empty();

    private Optional<VoiceOverride> voice = Optional.empty();

    private Optional<SlackOverride> slack = Optional.empty();

    private Optional<InAppOverride> inApp = Optional.empty();

    private Optional<TelegramOverride> telegram = Optional.empty();

    private Map<String, ProviderOverride> providers = new LinkedHashMap<>();

    private Builder() {
    }

    public Builder from(EventOverride other) {
      email(other.getEmail());
      sms(other.getSms());
      whatsapp(other.getWhatsapp());
      push(other.getPush());
      webhook(other.getWebhook());
      voice(other.getVoice());
      slack(other.getSlack());
      inApp(other.getInApp());
      telegram(other.getTelegram());
      providers(other.getProviders());
      return this;
    }

    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public Builder email(Optional<EmailOverride> email) {
      this.email = email;
      return this;
    }

    public Builder email(EmailOverride email) {
      this.email = Optional.of(email);
      return this;
    }

    @JsonSetter(
        value = "sms",
        nulls = Nulls.SKIP
    )
    public Builder sms(Optional<SmsOverride> sms) {
      this.sms = sms;
      return this;
    }

    public Builder sms(SmsOverride sms) {
      this.sms = Optional.of(sms);
      return this;
    }

    @JsonSetter(
        value = "whatsapp",
        nulls = Nulls.SKIP
    )
    public Builder whatsapp(Optional<WhatsappOverride> whatsapp) {
      this.whatsapp = whatsapp;
      return this;
    }

    public Builder whatsapp(WhatsappOverride whatsapp) {
      this.whatsapp = Optional.of(whatsapp);
      return this;
    }

    @JsonSetter(
        value = "push",
        nulls = Nulls.SKIP
    )
    public Builder push(Optional<PushOverride> push) {
      this.push = push;
      return this;
    }

    public Builder push(PushOverride push) {
      this.push = Optional.of(push);
      return this;
    }

    @JsonSetter(
        value = "webhook",
        nulls = Nulls.SKIP
    )
    public Builder webhook(Optional<WebhookOverride> webhook) {
      this.webhook = webhook;
      return this;
    }

    public Builder webhook(WebhookOverride webhook) {
      this.webhook = Optional.of(webhook);
      return this;
    }

    @JsonSetter(
        value = "voice",
        nulls = Nulls.SKIP
    )
    public Builder voice(Optional<VoiceOverride> voice) {
      this.voice = voice;
      return this;
    }

    public Builder voice(VoiceOverride voice) {
      this.voice = Optional.of(voice);
      return this;
    }

    @JsonSetter(
        value = "slack",
        nulls = Nulls.SKIP
    )
    public Builder slack(Optional<SlackOverride> slack) {
      this.slack = slack;
      return this;
    }

    public Builder slack(SlackOverride slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @JsonSetter(
        value = "in_app",
        nulls = Nulls.SKIP
    )
    public Builder inApp(Optional<InAppOverride> inApp) {
      this.inApp = inApp;
      return this;
    }

    public Builder inApp(InAppOverride inApp) {
      this.inApp = Optional.of(inApp);
      return this;
    }

    @JsonSetter(
        value = "telegram",
        nulls = Nulls.SKIP
    )
    public Builder telegram(Optional<TelegramOverride> telegram) {
      this.telegram = telegram;
      return this;
    }

    public Builder telegram(TelegramOverride telegram) {
      this.telegram = Optional.of(telegram);
      return this;
    }

    @JsonSetter(
        value = "providers",
        nulls = Nulls.SKIP
    )
    public Builder providers(Map<String, ProviderOverride> providers) {
      this.providers.clear();
      this.providers.putAll(providers);
      return this;
    }

    public Builder putAllProviders(Map<String, ProviderOverride> providers) {
      this.providers.putAll(providers);
      return this;
    }

    public Builder providers(String key, ProviderOverride value) {
      this.providers.put(key, value);
      return this;
    }

    public EventOverride build() {
      return new EventOverride(email, sms, whatsapp, push, webhook, voice, slack, inApp, telegram, providers);
    }
  }
}

]


local[resources/raven/event/types/IChannelOverride.java]=[
package resources.raven.event.types;

public interface IChannelOverride {
  long getScheduleAt();
}

]


local[resources/raven/event/types/InAppOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = InAppOverride.Builder.class
)
public final class InAppOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  InAppOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof InAppOverride && equalTo((InAppOverride) other);
  }

  private boolean equalTo(InAppOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "InAppOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(InAppOverride other);
  }

  public interface _FinalStage {
    InAppOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {
    }

    @Override
    public Builder from(InAppOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public InAppOverride build() {
      return new InAppOverride(scheduleAt);
    }
  }
}

]


local[resources/raven/event/types/Param.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = Param.Builder.class
)
public final class Param {
  private final String name;

  private final String value;

  private int _cachedHashCode;

  Param(String name, String value) {
    this.name = name;
    this.value = value;
  }

  @JsonProperty("name")
  public String getName() {
    return name;
  }

  @JsonProperty("value")
  public String getValue() {
    return value;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof Param && equalTo((Param) other);
  }

  private boolean equalTo(Param other) {
    return name.equals(other.name) && value.equals(other.value);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.name, this.value);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "Param{" + "name: " + name + ", value: " + value + "}";
  }

  public static NameStage builder() {
    return new Builder();
  }

  public interface NameStage {
    ValueStage name(String name);

    Builder from(Param other);
  }

  public interface ValueStage {
    _FinalStage value(String value);
  }

  public interface _FinalStage {
    Param build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements NameStage, ValueStage, _FinalStage {
    private String name;

    private String value;

    private Builder() {
    }

    @Override
    public Builder from(Param other) {
      name(other.getName());
      value(other.getValue());
      return this;
    }

    @Override
    @JsonSetter("name")
    public ValueStage name(String name) {
      this.name = name;
      return this;
    }

    @Override
    @JsonSetter("value")
    public _FinalStage value(String value) {
      this.value = value;
      return this;
    }

    @Override
    public Param build() {
      return new Param(name, value);
    }
  }
}

]


local[resources/raven/event/types/ProviderOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = ProviderOverride.Builder.class
)
public final class ProviderOverride {
  private final Map<String, Optional<Object>> payload;

  private final List<Param> formParams;

  private final List<Param> queryParams;

  private final List<Param> pathParams;

  private final List<Param> headers;

  private int _cachedHashCode;

  ProviderOverride(Map<String, Optional<Object>> payload, List<Param> formParams,
      List<Param> queryParams, List<Param> pathParams, List<Param> headers) {
    this.payload = payload;
    this.formParams = formParams;
    this.queryParams = queryParams;
    this.pathParams = pathParams;
    this.headers = headers;
  }

  @JsonProperty("payload")
  public Map<String, Optional<Object>> getPayload() {
    return payload;
  }

  @JsonProperty("form_params")
  public List<Param> getFormParams() {
    return formParams;
  }

  @JsonProperty("query_params")
  public List<Param> getQueryParams() {
    return queryParams;
  }

  @JsonProperty("path_params")
  public List<Param> getPathParams() {
    return pathParams;
  }

  @JsonProperty("headers")
  public List<Param> getHeaders() {
    return headers;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ProviderOverride && equalTo((ProviderOverride) other);
  }

  private boolean equalTo(ProviderOverride other) {
    return payload.equals(other.payload) && formParams.equals(other.formParams) && queryParams.equals(other.queryParams) && pathParams.equals(other.pathParams) && headers.equals(other.headers);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.payload, this.formParams, this.queryParams, this.pathParams, this.headers);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ProviderOverride{" + "payload: " + payload + ", formParams: " + formParams + ", queryParams: " + queryParams + ", pathParams: " + pathParams + ", headers: " + headers + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Map<String, Optional<Object>> payload = new LinkedHashMap<>();

    private List<Param> formParams = new ArrayList<>();

    private List<Param> queryParams = new ArrayList<>();

    private List<Param> pathParams = new ArrayList<>();

    private List<Param> headers = new ArrayList<>();

    private Builder() {
    }

    public Builder from(ProviderOverride other) {
      payload(other.getPayload());
      formParams(other.getFormParams());
      queryParams(other.getQueryParams());
      pathParams(other.getPathParams());
      headers(other.getHeaders());
      return this;
    }

    @JsonSetter(
        value = "payload",
        nulls = Nulls.SKIP
    )
    public Builder payload(Map<String, Optional<Object>> payload) {
      this.payload.clear();
      this.payload.putAll(payload);
      return this;
    }

    public Builder putAllPayload(Map<String, Optional<Object>> payload) {
      this.payload.putAll(payload);
      return this;
    }

    public Builder payload(String key, Optional<Object> value) {
      this.payload.put(key, value);
      return this;
    }

    @JsonSetter(
        value = "form_params",
        nulls = Nulls.SKIP
    )
    public Builder formParams(List<Param> formParams) {
      this.formParams.clear();
      this.formParams.addAll(formParams);
      return this;
    }

    public Builder addFormParams(Param formParams) {
      this.formParams.add(formParams);
      return this;
    }

    public Builder addAllFormParams(List<Param> formParams) {
      this.formParams.addAll(formParams);
      return this;
    }

    @JsonSetter(
        value = "query_params",
        nulls = Nulls.SKIP
    )
    public Builder queryParams(List<Param> queryParams) {
      this.queryParams.clear();
      this.queryParams.addAll(queryParams);
      return this;
    }

    public Builder addQueryParams(Param queryParams) {
      this.queryParams.add(queryParams);
      return this;
    }

    public Builder addAllQueryParams(List<Param> queryParams) {
      this.queryParams.addAll(queryParams);
      return this;
    }

    @JsonSetter(
        value = "path_params",
        nulls = Nulls.SKIP
    )
    public Builder pathParams(List<Param> pathParams) {
      this.pathParams.clear();
      this.pathParams.addAll(pathParams);
      return this;
    }

    public Builder addPathParams(Param pathParams) {
      this.pathParams.add(pathParams);
      return this;
    }

    public Builder addAllPathParams(List<Param> pathParams) {
      this.pathParams.addAll(pathParams);
      return this;
    }

    @JsonSetter(
        value = "headers",
        nulls = Nulls.SKIP
    )
    public Builder headers(List<Param> headers) {
      this.headers.clear();
      this.headers.addAll(headers);
      return this;
    }

    public Builder addHeaders(Param headers) {
      this.headers.add(headers);
      return this;
    }

    public Builder addAllHeaders(List<Param> headers) {
      this.headers.addAll(headers);
      return this;
    }

    public ProviderOverride build() {
      return new ProviderOverride(payload, formParams, queryParams, pathParams, headers);
    }
  }
}

]


local[resources/raven/event/types/PushOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = PushOverride.Builder.class
)
public final class PushOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  PushOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof PushOverride && equalTo((PushOverride) other);
  }

  private boolean equalTo(PushOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "PushOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(PushOverride other);
  }

  public interface _FinalStage {
    PushOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {
    }

    @Override
    public Builder from(PushOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public PushOverride build() {
      return new PushOverride(scheduleAt);
    }
  }
}

]


local[resources/raven/event/types/SendEventResponse.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = SendEventResponse.Builder.class
)
public final class SendEventResponse {
  private final String id;

  private final boolean success;

  private int _cachedHashCode;

  SendEventResponse(String id, boolean success) {
    this.id = id;
    this.success = success;
  }

  @JsonProperty("id")
  public String getId() {
    return id;
  }

  @JsonProperty("success")
  public boolean getSuccess() {
    return success;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SendEventResponse && equalTo((SendEventResponse) other);
  }

  private boolean equalTo(SendEventResponse other) {
    return id.equals(other.id) && success == other.success;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.id, this.success);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SendEventResponse{" + "id: " + id + ", success: " + success + "}";
  }

  public static IdStage builder() {
    return new Builder();
  }

  public interface IdStage {
    SuccessStage id(String id);

    Builder from(SendEventResponse other);
  }

  public interface SuccessStage {
    _FinalStage success(boolean success);
  }

  public interface _FinalStage {
    SendEventResponse build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements IdStage, SuccessStage, _FinalStage {
    private String id;

    private boolean success;

    private Builder() {
    }

    @Override
    public Builder from(SendEventResponse other) {
      id(other.getId());
      success(other.getSuccess());
      return this;
    }

    @Override
    @JsonSetter("id")
    public SuccessStage id(String id) {
      this.id = id;
      return this;
    }

    @Override
    @JsonSetter("success")
    public _FinalStage success(boolean success) {
      this.success = success;
      return this;
    }

    @Override
    public SendEventResponse build() {
      return new SendEventResponse(id, success);
    }
  }
}

]


local[resources/raven/event/types/SlackMessage.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = SlackMessage.Builder.class
)
public final class SlackMessage {
  private final String text;

  private final Optional<Object> blocks;

  private int _cachedHashCode;

  SlackMessage(String text, Optional<Object> blocks) {
    this.text = text;
    this.blocks = blocks;
  }

  @JsonProperty("text")
  public String getText() {
    return text;
  }

  @JsonProperty("blocks")
  public Optional<Object> getBlocks() {
    return blocks;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SlackMessage && equalTo((SlackMessage) other);
  }

  private boolean equalTo(SlackMessage other) {
    return text.equals(other.text) && blocks.equals(other.blocks);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.text, this.blocks);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SlackMessage{" + "text: " + text + ", blocks: " + blocks + "}";
  }

  public static TextStage builder() {
    return new Builder();
  }

  public interface TextStage {
    _FinalStage text(String text);

    Builder from(SlackMessage other);
  }

  public interface _FinalStage {
    SlackMessage build();

    _FinalStage blocks(Optional<Object> blocks);

    _FinalStage blocks(Object blocks);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TextStage, _FinalStage {
    private String text;

    private Optional<Object> blocks = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(SlackMessage other) {
      text(other.getText());
      blocks(other.getBlocks());
      return this;
    }

    @Override
    @JsonSetter("text")
    public _FinalStage text(String text) {
      this.text = text;
      return this;
    }

    @Override
    public _FinalStage blocks(Object blocks) {
      this.blocks = Optional.of(blocks);
      return this;
    }

    @Override
    @JsonSetter(
        value = "blocks",
        nulls = Nulls.SKIP
    )
    public _FinalStage blocks(Optional<Object> blocks) {
      this.blocks = blocks;
      return this;
    }

    @Override
    public SlackMessage build() {
      return new SlackMessage(text, blocks);
    }
  }
}

]


local[resources/raven/event/types/SlackOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = SlackOverride.Builder.class
)
public final class SlackOverride implements IChannelOverride {
  private final long scheduleAt;

  private final SlackMessage message;

  private int _cachedHashCode;

  SlackOverride(long scheduleAt, SlackMessage message) {
    this.scheduleAt = scheduleAt;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("message")
  public SlackMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SlackOverride && equalTo((SlackOverride) other);
  }

  private boolean equalTo(SlackOverride other) {
    return scheduleAt == other.scheduleAt && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SlackOverride{" + "scheduleAt: " + scheduleAt + ", message: " + message + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    MessageStage scheduleAt(long scheduleAt);

    Builder from(SlackOverride other);
  }

  public interface MessageStage {
    _FinalStage message(SlackMessage message);
  }

  public interface _FinalStage {
    SlackOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private SlackMessage message;

    private Builder() {
    }

    @Override
    public Builder from(SlackOverride other) {
      scheduleAt(other.getScheduleAt());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public MessageStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(SlackMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public SlackOverride build() {
      return new SlackOverride(scheduleAt, message);
    }
  }
}

]


local[resources/raven/event/types/SmsMessage.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = SmsMessage.Builder.class
)
public final class SmsMessage {
  private final String text;

  private int _cachedHashCode;

  SmsMessage(String text) {
    this.text = text;
  }

  @JsonProperty("text")
  public String getText() {
    return text;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SmsMessage && equalTo((SmsMessage) other);
  }

  private boolean equalTo(SmsMessage other) {
    return text.equals(other.text);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.text);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SmsMessage{" + "text: " + text + "}";
  }

  public static TextStage builder() {
    return new Builder();
  }

  public interface TextStage {
    _FinalStage text(String text);

    Builder from(SmsMessage other);
  }

  public interface _FinalStage {
    SmsMessage build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements TextStage, _FinalStage {
    private String text;

    private Builder() {
    }

    @Override
    public Builder from(SmsMessage other) {
      text(other.getText());
      return this;
    }

    @Override
    @JsonSetter("text")
    public _FinalStage text(String text) {
      this.text = text;
      return this;
    }

    @Override
    public SmsMessage build() {
      return new SmsMessage(text);
    }
  }
}

]


local[resources/raven/event/types/SmsOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = SmsOverride.Builder.class
)
public final class SmsOverride implements IChannelOverride {
  private final long scheduleAt;

  private final String sender;

  private final SmsMessage message;

  private int _cachedHashCode;

  SmsOverride(long scheduleAt, String sender, SmsMessage message) {
    this.scheduleAt = scheduleAt;
    this.sender = sender;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("sender")
  public String getSender() {
    return sender;
  }

  @JsonProperty("message")
  public SmsMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SmsOverride && equalTo((SmsOverride) other);
  }

  private boolean equalTo(SmsOverride other) {
    return scheduleAt == other.scheduleAt && sender.equals(other.sender) && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt, this.sender, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SmsOverride{" + "scheduleAt: " + scheduleAt + ", sender: " + sender + ", message: " + message + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    SenderStage scheduleAt(long scheduleAt);

    Builder from(SmsOverride other);
  }

  public interface SenderStage {
    MessageStage sender(String sender);
  }

  public interface MessageStage {
    _FinalStage message(SmsMessage message);
  }

  public interface _FinalStage {
    SmsOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, SenderStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private String sender;

    private SmsMessage message;

    private Builder() {
    }

    @Override
    public Builder from(SmsOverride other) {
      scheduleAt(other.getScheduleAt());
      sender(other.getSender());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public SenderStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("sender")
    public MessageStage sender(String sender) {
      this.sender = sender;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(SmsMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public SmsOverride build() {
      return new SmsOverride(scheduleAt, sender, message);
    }
  }
}

]


local[resources/raven/event/types/TelegramOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = TelegramOverride.Builder.class
)
public final class TelegramOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  TelegramOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TelegramOverride && equalTo((TelegramOverride) other);
  }

  private boolean equalTo(TelegramOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "TelegramOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(TelegramOverride other);
  }

  public interface _FinalStage {
    TelegramOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {
    }

    @Override
    public Builder from(TelegramOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public TelegramOverride build() {
      return new TelegramOverride(scheduleAt);
    }
  }
}

]


local[resources/raven/event/types/User.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import resources.raven.user.types.SlackProfile;
import resources.raven.user.types.TelegramProfile;

@JsonDeserialize(
    builder = User.Builder.class
)
public final class User {
  private final Optional<String> userId;

  private final Optional<String> email;

  private final Optional<String> mobile;

  private final Optional<String> whatsappMobile;

  private final Optional<String> onesignalExternalId;

  private final Optional<List<String>> onesignalPlayerIds;

  private final Optional<List<String>> fcmTokens;

  private final Optional<List<String>> iosTokens;

  private final Optional<SlackProfile> slack;

  private final Optional<TelegramProfile> telegram;

  private final Optional<String> fcmTopic;

  private final Optional<String> fcmDeviceGroup;

  private int _cachedHashCode;

  User(Optional<String> userId, Optional<String> email, Optional<String> mobile,
      Optional<String> whatsappMobile, Optional<String> onesignalExternalId,
      Optional<List<String>> onesignalPlayerIds, Optional<List<String>> fcmTokens,
      Optional<List<String>> iosTokens, Optional<SlackProfile> slack,
      Optional<TelegramProfile> telegram, Optional<String> fcmTopic,
      Optional<String> fcmDeviceGroup) {
    this.userId = userId;
    this.email = email;
    this.mobile = mobile;
    this.whatsappMobile = whatsappMobile;
    this.onesignalExternalId = onesignalExternalId;
    this.onesignalPlayerIds = onesignalPlayerIds;
    this.fcmTokens = fcmTokens;
    this.iosTokens = iosTokens;
    this.slack = slack;
    this.telegram = telegram;
    this.fcmTopic = fcmTopic;
    this.fcmDeviceGroup = fcmDeviceGroup;
  }

  /**
   * @return userId to send the notifications to.
   * This is  your own user identifier which you have used to create user on Raven
   */
  @JsonProperty("user_id")
  public Optional<String> getUserId() {
    return userId;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return mobile with country code prefix (e.g +91)
   */
  @JsonProperty("mobile")
  public Optional<String> getMobile() {
    return mobile;
  }

  /**
   * @return mobile with country code prefix (e.g. +91).
   * if empty, <code>mobile</code> is considered for whatsapp
   */
  @JsonProperty("whatsapp_mobile")
  public Optional<String> getWhatsappMobile() {
    return whatsappMobile;
  }

  /**
   * @return <a href="https://documentation.onesignal.com/docs/external-user-ids">OneSignal external user IDs</a>
   */
  @JsonProperty("onesignal_external_id")
  public Optional<String> getOnesignalExternalId() {
    return onesignalExternalId;
  }

  @JsonProperty("onesignal_player_ids")
  public Optional<List<String>> getOnesignalPlayerIds() {
    return onesignalPlayerIds;
  }

  /**
   * @return List of fcm tokens.  eg. [&quot;&lt;fcmtoken1&quot;, &quot;&lt;fcmtoken2&gt;&quot;]
   */
  @JsonProperty("fcm_tokens")
  public Optional<List<String>> getFcmTokens() {
    return fcmTokens;
  }

  @JsonProperty("ios_tokens")
  public Optional<List<String>> getIosTokens() {
    return iosTokens;
  }

  @JsonProperty("slack")
  public Optional<SlackProfile> getSlack() {
    return slack;
  }

  @JsonProperty("telegram")
  public Optional<TelegramProfile> getTelegram() {
    return telegram;
  }

  @JsonProperty("fcm_topic")
  public Optional<String> getFcmTopic() {
    return fcmTopic;
  }

  @JsonProperty("fcm_device_group")
  public Optional<String> getFcmDeviceGroup() {
    return fcmDeviceGroup;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof User && equalTo((User) other);
  }

  private boolean equalTo(User other) {
    return userId.equals(other.userId) && email.equals(other.email) && mobile.equals(other.mobile) && whatsappMobile.equals(other.whatsappMobile) && onesignalExternalId.equals(other.onesignalExternalId) && onesignalPlayerIds.equals(other.onesignalPlayerIds) && fcmTokens.equals(other.fcmTokens) && iosTokens.equals(other.iosTokens) && slack.equals(other.slack) && telegram.equals(other.telegram) && fcmTopic.equals(other.fcmTopic) && fcmDeviceGroup.equals(other.fcmDeviceGroup);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.userId, this.email, this.mobile, this.whatsappMobile, this.onesignalExternalId, this.onesignalPlayerIds, this.fcmTokens, this.iosTokens, this.slack, this.telegram, this.fcmTopic, this.fcmDeviceGroup);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "User{" + "userId: " + userId + ", email: " + email + ", mobile: " + mobile + ", whatsappMobile: " + whatsappMobile + ", onesignalExternalId: " + onesignalExternalId + ", onesignalPlayerIds: " + onesignalPlayerIds + ", fcmTokens: " + fcmTokens + ", iosTokens: " + iosTokens + ", slack: " + slack + ", telegram: " + telegram + ", fcmTopic: " + fcmTopic + ", fcmDeviceGroup: " + fcmDeviceGroup + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<String> userId = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Optional<String> mobile = Optional.empty();

    private Optional<String> whatsappMobile = Optional.empty();

    private Optional<String> onesignalExternalId = Optional.empty();

    private Optional<List<String>> onesignalPlayerIds = Optional.empty();

    private Optional<List<String>> fcmTokens = Optional.empty();

    private Optional<List<String>> iosTokens = Optional.empty();

    private Optional<SlackProfile> slack = Optional.empty();

    private Optional<TelegramProfile> telegram = Optional.empty();

    private Optional<String> fcmTopic = Optional.empty();

    private Optional<String> fcmDeviceGroup = Optional.empty();

    private Builder() {
    }

    public Builder from(User other) {
      userId(other.getUserId());
      email(other.getEmail());
      mobile(other.getMobile());
      whatsappMobile(other.getWhatsappMobile());
      onesignalExternalId(other.getOnesignalExternalId());
      onesignalPlayerIds(other.getOnesignalPlayerIds());
      fcmTokens(other.getFcmTokens());
      iosTokens(other.getIosTokens());
      slack(other.getSlack());
      telegram(other.getTelegram());
      fcmTopic(other.getFcmTopic());
      fcmDeviceGroup(other.getFcmDeviceGroup());
      return this;
    }

    @JsonSetter(
        value = "user_id",
        nulls = Nulls.SKIP
    )
    public Builder userId(Optional<String> userId) {
      this.userId = userId;
      return this;
    }

    public Builder userId(String userId) {
      this.userId = Optional.of(userId);
      return this;
    }

    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public Builder email(Optional<String> email) {
      this.email = email;
      return this;
    }

    public Builder email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @JsonSetter(
        value = "mobile",
        nulls = Nulls.SKIP
    )
    public Builder mobile(Optional<String> mobile) {
      this.mobile = mobile;
      return this;
    }

    public Builder mobile(String mobile) {
      this.mobile = Optional.of(mobile);
      return this;
    }

    @JsonSetter(
        value = "whatsapp_mobile",
        nulls = Nulls.SKIP
    )
    public Builder whatsappMobile(Optional<String> whatsappMobile) {
      this.whatsappMobile = whatsappMobile;
      return this;
    }

    public Builder whatsappMobile(String whatsappMobile) {
      this.whatsappMobile = Optional.of(whatsappMobile);
      return this;
    }

    @JsonSetter(
        value = "onesignal_external_id",
        nulls = Nulls.SKIP
    )
    public Builder onesignalExternalId(Optional<String> onesignalExternalId) {
      this.onesignalExternalId = onesignalExternalId;
      return this;
    }

    public Builder onesignalExternalId(String onesignalExternalId) {
      this.onesignalExternalId = Optional.of(onesignalExternalId);
      return this;
    }

    @JsonSetter(
        value = "onesignal_player_ids",
        nulls = Nulls.SKIP
    )
    public Builder onesignalPlayerIds(Optional<List<String>> onesignalPlayerIds) {
      this.onesignalPlayerIds = onesignalPlayerIds;
      return this;
    }

    public Builder onesignalPlayerIds(List<String> onesignalPlayerIds) {
      this.onesignalPlayerIds = Optional.of(onesignalPlayerIds);
      return this;
    }

    @JsonSetter(
        value = "fcm_tokens",
        nulls = Nulls.SKIP
    )
    public Builder fcmTokens(Optional<List<String>> fcmTokens) {
      this.fcmTokens = fcmTokens;
      return this;
    }

    public Builder fcmTokens(List<String> fcmTokens) {
      this.fcmTokens = Optional.of(fcmTokens);
      return this;
    }

    @JsonSetter(
        value = "ios_tokens",
        nulls = Nulls.SKIP
    )
    public Builder iosTokens(Optional<List<String>> iosTokens) {
      this.iosTokens = iosTokens;
      return this;
    }

    public Builder iosTokens(List<String> iosTokens) {
      this.iosTokens = Optional.of(iosTokens);
      return this;
    }

    @JsonSetter(
        value = "slack",
        nulls = Nulls.SKIP
    )
    public Builder slack(Optional<SlackProfile> slack) {
      this.slack = slack;
      return this;
    }

    public Builder slack(SlackProfile slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @JsonSetter(
        value = "telegram",
        nulls = Nulls.SKIP
    )
    public Builder telegram(Optional<TelegramProfile> telegram) {
      this.telegram = telegram;
      return this;
    }

    public Builder telegram(TelegramProfile telegram) {
      this.telegram = Optional.of(telegram);
      return this;
    }

    @JsonSetter(
        value = "fcm_topic",
        nulls = Nulls.SKIP
    )
    public Builder fcmTopic(Optional<String> fcmTopic) {
      this.fcmTopic = fcmTopic;
      return this;
    }

    public Builder fcmTopic(String fcmTopic) {
      this.fcmTopic = Optional.of(fcmTopic);
      return this;
    }

    @JsonSetter(
        value = "fcm_device_group",
        nulls = Nulls.SKIP
    )
    public Builder fcmDeviceGroup(Optional<String> fcmDeviceGroup) {
      this.fcmDeviceGroup = fcmDeviceGroup;
      return this;
    }

    public Builder fcmDeviceGroup(String fcmDeviceGroup) {
      this.fcmDeviceGroup = Optional.of(fcmDeviceGroup);
      return this;
    }

    public User build() {
      return new User(userId, email, mobile, whatsappMobile, onesignalExternalId, onesignalPlayerIds, fcmTokens, iosTokens, slack, telegram, fcmTopic, fcmDeviceGroup);
    }
  }
}

]


local[resources/raven/event/types/VoiceOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = VoiceOverride.Builder.class
)
public final class VoiceOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  VoiceOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof VoiceOverride && equalTo((VoiceOverride) other);
  }

  private boolean equalTo(VoiceOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "VoiceOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(VoiceOverride other);
  }

  public interface _FinalStage {
    VoiceOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {
    }

    @Override
    public Builder from(VoiceOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public VoiceOverride build() {
      return new VoiceOverride(scheduleAt);
    }
  }
}

]


local[resources/raven/event/types/WebhookOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = WebhookOverride.Builder.class
)
public final class WebhookOverride implements IChannelOverride {
  private final long scheduleAt;

  private int _cachedHashCode;

  WebhookOverride(long scheduleAt) {
    this.scheduleAt = scheduleAt;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WebhookOverride && equalTo((WebhookOverride) other);
  }

  private boolean equalTo(WebhookOverride other) {
    return scheduleAt == other.scheduleAt;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "WebhookOverride{" + "scheduleAt: " + scheduleAt + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    _FinalStage scheduleAt(long scheduleAt);

    Builder from(WebhookOverride other);
  }

  public interface _FinalStage {
    WebhookOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, _FinalStage {
    private long scheduleAt;

    private Builder() {
    }

    @Override
    public Builder from(WebhookOverride other) {
      scheduleAt(other.getScheduleAt());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public _FinalStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    public WebhookOverride build() {
      return new WebhookOverride(scheduleAt);
    }
  }
}

]


local[resources/raven/event/types/WhatsappOverride.java]=[
package resources.raven.event.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = WhatsappOverride.Builder.class
)
public final class WhatsappOverride implements IChannelOverride {
  private final long scheduleAt;

  private final SmsMessage message;

  private int _cachedHashCode;

  WhatsappOverride(long scheduleAt, SmsMessage message) {
    this.scheduleAt = scheduleAt;
    this.message = message;
  }

  @JsonProperty("schedule_at")
  @Override
  public long getScheduleAt() {
    return scheduleAt;
  }

  @JsonProperty("message")
  public SmsMessage getMessage() {
    return message;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof WhatsappOverride && equalTo((WhatsappOverride) other);
  }

  private boolean equalTo(WhatsappOverride other) {
    return scheduleAt == other.scheduleAt && message.equals(other.message);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.scheduleAt, this.message);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "WhatsappOverride{" + "scheduleAt: " + scheduleAt + ", message: " + message + "}";
  }

  public static ScheduleAtStage builder() {
    return new Builder();
  }

  public interface ScheduleAtStage {
    MessageStage scheduleAt(long scheduleAt);

    Builder from(WhatsappOverride other);
  }

  public interface MessageStage {
    _FinalStage message(SmsMessage message);
  }

  public interface _FinalStage {
    WhatsappOverride build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ScheduleAtStage, MessageStage, _FinalStage {
    private long scheduleAt;

    private SmsMessage message;

    private Builder() {
    }

    @Override
    public Builder from(WhatsappOverride other) {
      scheduleAt(other.getScheduleAt());
      message(other.getMessage());
      return this;
    }

    @Override
    @JsonSetter("schedule_at")
    public MessageStage scheduleAt(long scheduleAt) {
      this.scheduleAt = scheduleAt;
      return this;
    }

    @Override
    @JsonSetter("message")
    public _FinalStage message(SmsMessage message) {
      this.message = message;
      return this;
    }

    @Override
    public WhatsappOverride build() {
      return new WhatsappOverride(scheduleAt, message);
    }
  }
}

]


local[resources/raven/user/UserClient.java]=[
package resources.raven.user;

import java.lang.String;
import resources.raven.user.requests.CreateUserRequest;
import resources.raven.user.types.RavenUser;

public interface UserClient {
  RavenUser createOrUpdate(String appId, CreateUserRequest request);

  RavenUser get(String appId, String userId);
}

]


local[resources/raven/user/UserClientImpl.java]=[
package resources.raven.user;

import core.ClientOptions;
import core.ObjectMappers;
import java.lang.Exception;
import java.lang.Object;
import java.lang.Override;
import java.lang.RuntimeException;
import java.lang.String;
import java.util.HashMap;
import java.util.Map;
import okhttp3.Headers;
import okhttp3.HttpUrl;
import okhttp3.MediaType;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import resources.raven.user.requests.CreateUserRequest;
import resources.raven.user.types.RavenUser;

public final class UserClientImpl implements UserClient {
  private final ClientOptions clientOptions;

  public UserClientImpl(ClientOptions clientOptions) {
    this.clientOptions = clientOptions;
  }

  @Override
  public RavenUser createOrUpdate(String appId, CreateUserRequest request) {
    HttpUrl.Builder _httpUrlBuilder = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
      .addPathSegments("v1/apps")
      .addPathSegment(appId)
      .addPathSegments("users")
      ;HttpUrl _httpUrl = _httpUrlBuilder.build()
          ;
      Map<String, Object> _requestBodyProperties = new HashMap<>();
      _requestBodyProperties.put("user_id", request.getUserId());
      _requestBodyProperties.put("mobile", request.getMobile());
      _requestBodyProperties.put("email", request.getEmail());
      _requestBodyProperties.put("whats_app", request.getWhatsApp());
      RequestBody _requestBody;
      try {
        _requestBody = RequestBody.create(ObjectMappers.JSON_MAPPER.writeValueAsBytes(_requestBodyProperties), MediaType.parse("application/json"));
      }
      catch(Exception e) {
        throw new RuntimeException(e);
      }
      Request.Builder _requestBuilder = new Request.Builder()
        .url(_httpUrl)
        .method("POST", _requestBody)
        .headers(Headers.of(clientOptions.headers()));
      Request _request = _requestBuilder.build();
      try {
        Response _response = clientOptions.httpClient().newCall(_request).execute();
        if (_response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), RavenUser.class);
        }
        throw new RuntimeException();
      }
      catch (Exception e) {
        throw new RuntimeException(e);
      }
    }

    @Override
    public RavenUser get(String appId, String userId) {
      HttpUrl _httpUrl = HttpUrl.parse(this.clientOptions.environment().getUrl()).newBuilder()
        .addPathSegments("v1/apps")
        .addPathSegment(appId)
        .addPathSegments("users/")
        .addPathSegment(userId)
        .build();Request _request = new Request.Builder()
        .url(_httpUrl)
        .method("GET", null)
        .headers(Headers.of(clientOptions.headers()))
        .build();
      try {
        Response _response = clientOptions.httpClient().newCall(_request).execute();
        if (_response.isSuccessful()) {
          return ObjectMappers.JSON_MAPPER.readValue(_response.body().string(), RavenUser.class);
        }
        throw new RuntimeException();
      }
      catch (Exception e) {
        throw new RuntimeException(e);
      }
    }
  }

]


local[resources/raven/user/requests/CreateUserRequest.java]=[
package resources.raven.user.requests;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = CreateUserRequest.Builder.class
)
public final class CreateUserRequest {
  private final String userId;

  private final Optional<String> mobile;

  private final Optional<String> email;

  private final Optional<String> whatsApp;

  private int _cachedHashCode;

  CreateUserRequest(String userId, Optional<String> mobile, Optional<String> email,
      Optional<String> whatsApp) {
    this.userId = userId;
    this.mobile = mobile;
    this.email = email;
    this.whatsApp = whatsApp;
  }

  /**
   * @return Your user identifier.
   * if user_id already exists, user properties will be updated else a new user will be created
   */
  @JsonProperty("user_id")
  public String getUserId() {
    return userId;
  }

  @JsonProperty("mobile")
  public Optional<String> getMobile() {
    return mobile;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return include this only when user's whatsapp mobile is different than primary mobile
   */
  @JsonProperty("whats_app")
  public Optional<String> getWhatsApp() {
    return whatsApp;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof CreateUserRequest && equalTo((CreateUserRequest) other);
  }

  private boolean equalTo(CreateUserRequest other) {
    return userId.equals(other.userId) && mobile.equals(other.mobile) && email.equals(other.email) && whatsApp.equals(other.whatsApp);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.userId, this.mobile, this.email, this.whatsApp);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "CreateUserRequest{" + "userId: " + userId + ", mobile: " + mobile + ", email: " + email + ", whatsApp: " + whatsApp + "}";
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    _FinalStage userId(String userId);

    Builder from(CreateUserRequest other);
  }

  public interface _FinalStage {
    CreateUserRequest build();

    _FinalStage mobile(Optional<String> mobile);

    _FinalStage mobile(String mobile);

    _FinalStage email(Optional<String> email);

    _FinalStage email(String email);

    _FinalStage whatsApp(Optional<String> whatsApp);

    _FinalStage whatsApp(String whatsApp);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserIdStage, _FinalStage {
    private String userId;

    private Optional<String> whatsApp = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Optional<String> mobile = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(CreateUserRequest other) {
      userId(other.getUserId());
      mobile(other.getMobile());
      email(other.getEmail());
      whatsApp(other.getWhatsApp());
      return this;
    }

    /**
     * <p>Your user identifier.
     * if user_id already exists, user properties will be updated else a new user will be created</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("user_id")
    public _FinalStage userId(String userId) {
      this.userId = userId;
      return this;
    }

    /**
     * <p>include this only when user's whatsapp mobile is different than primary mobile</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage whatsApp(String whatsApp) {
      this.whatsApp = Optional.of(whatsApp);
      return this;
    }

    @Override
    @JsonSetter(
        value = "whats_app",
        nulls = Nulls.SKIP
    )
    public _FinalStage whatsApp(Optional<String> whatsApp) {
      this.whatsApp = whatsApp;
      return this;
    }

    @Override
    public _FinalStage email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @Override
    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public _FinalStage email(Optional<String> email) {
      this.email = email;
      return this;
    }

    @Override
    public _FinalStage mobile(String mobile) {
      this.mobile = Optional.of(mobile);
      return this;
    }

    @Override
    @JsonSetter(
        value = "mobile",
        nulls = Nulls.SKIP
    )
    public _FinalStage mobile(Optional<String> mobile) {
      this.mobile = mobile;
      return this;
    }

    @Override
    public CreateUserRequest build() {
      return new CreateUserRequest(userId, mobile, email, whatsApp);
    }
  }
}

]


local[resources/raven/user/types/Channel.java]=[
package resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;

public final class Channel {
  public static final Channel SMS = new Channel(Value.SMS, "SMS");

  public static final Channel IN_APP = new Channel(Value.IN_APP, "IN_APP");

  public static final Channel TELEGRAM = new Channel(Value.TELEGRAM, "TELEGRAM");

  public static final Channel PUSH = new Channel(Value.PUSH, "PUSH");

  public static final Channel WHATSAPP = new Channel(Value.WHATSAPP, "WHATSAPP");

  public static final Channel SLACK = new Channel(Value.SLACK, "SLACK");

  public static final Channel EMAIL = new Channel(Value.EMAIL, "EMAIL");

  public static final Channel WEBHOOK = new Channel(Value.WEBHOOK, "WEBHOOK");

  public static final Channel VOICE = new Channel(Value.VOICE, "VOICE");

  private final Value value;

  private final String string;

  Channel(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof Channel && this.string.equals(((Channel) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case SMS:
        return visitor.visitSms();
      case IN_APP:
        return visitor.visitInApp();
      case TELEGRAM:
        return visitor.visitTelegram();
      case PUSH:
        return visitor.visitPush();
      case WHATSAPP:
        return visitor.visitWhatsapp();
      case SLACK:
        return visitor.visitSlack();
      case EMAIL:
        return visitor.visitEmail();
      case WEBHOOK:
        return visitor.visitWebhook();
      case VOICE:
        return visitor.visitVoice();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static Channel valueOf(String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "SMS":
        return SMS;
      case "IN_APP":
        return IN_APP;
      case "TELEGRAM":
        return TELEGRAM;
      case "PUSH":
        return PUSH;
      case "WHATSAPP":
        return WHATSAPP;
      case "SLACK":
        return SLACK;
      case "EMAIL":
        return EMAIL;
      case "WEBHOOK":
        return WEBHOOK;
      case "VOICE":
        return VOICE;
      default:
        return new Channel(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    VOICE,

    PUSH,

    SMS,

    EMAIL,

    WHATSAPP,

    WEBHOOK,

    SLACK,

    IN_APP,

    TELEGRAM,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitVoice();

    T visitPush();

    T visitSms();

    T visitEmail();

    T visitWhatsapp();

    T visitWebhook();

    T visitSlack();

    T visitInApp();

    T visitTelegram();

    T visitUnknown(String unknownType);
  }
}

]


local[resources/raven/user/types/ChannelPreference.java]=[
package resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = ChannelPreference.Builder.class
)
public final class ChannelPreference {
  private final boolean disabled;

  private int _cachedHashCode;

  ChannelPreference(boolean disabled) {
    this.disabled = disabled;
  }

  @JsonProperty("disabled")
  public boolean getDisabled() {
    return disabled;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ChannelPreference && equalTo((ChannelPreference) other);
  }

  private boolean equalTo(ChannelPreference other) {
    return disabled == other.disabled;
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.disabled);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ChannelPreference{" + "disabled: " + disabled + "}";
  }

  public static DisabledStage builder() {
    return new Builder();
  }

  public interface DisabledStage {
    _FinalStage disabled(boolean disabled);

    Builder from(ChannelPreference other);
  }

  public interface _FinalStage {
    ChannelPreference build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements DisabledStage, _FinalStage {
    private boolean disabled;

    private Builder() {
    }

    @Override
    public Builder from(ChannelPreference other) {
      disabled(other.getDisabled());
      return this;
    }

    @Override
    @JsonSetter("disabled")
    public _FinalStage disabled(boolean disabled) {
      this.disabled = disabled;
      return this;
    }

    @Override
    public ChannelPreference build() {
      return new ChannelPreference(disabled);
    }
  }
}

]


local[resources/raven/user/types/ChannelPreferences.java]=[
package resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = ChannelPreferences.Builder.class
)
public final class ChannelPreferences {
  private final Optional<ChannelPreference> sms;

  private final Optional<ChannelPreference> push;

  private final Optional<ChannelPreference> whatsapp;

  private final Optional<ChannelPreference> email;

  private final Optional<ChannelPreference> slack;

  private final Optional<ChannelPreference> voice;

  private final Optional<ChannelPreference> teams;

  private int _cachedHashCode;

  ChannelPreferences(Optional<ChannelPreference> sms, Optional<ChannelPreference> push,
      Optional<ChannelPreference> whatsapp, Optional<ChannelPreference> email,
      Optional<ChannelPreference> slack, Optional<ChannelPreference> voice,
      Optional<ChannelPreference> teams) {
    this.sms = sms;
    this.push = push;
    this.whatsapp = whatsapp;
    this.email = email;
    this.slack = slack;
    this.voice = voice;
    this.teams = teams;
  }

  @JsonProperty("sms")
  public Optional<ChannelPreference> getSms() {
    return sms;
  }

  @JsonProperty("push")
  public Optional<ChannelPreference> getPush() {
    return push;
  }

  @JsonProperty("whatsapp")
  public Optional<ChannelPreference> getWhatsapp() {
    return whatsapp;
  }

  @JsonProperty("email")
  public Optional<ChannelPreference> getEmail() {
    return email;
  }

  @JsonProperty("slack")
  public Optional<ChannelPreference> getSlack() {
    return slack;
  }

  @JsonProperty("voice")
  public Optional<ChannelPreference> getVoice() {
    return voice;
  }

  @JsonProperty("teams")
  public Optional<ChannelPreference> getTeams() {
    return teams;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof ChannelPreferences && equalTo((ChannelPreferences) other);
  }

  private boolean equalTo(ChannelPreferences other) {
    return sms.equals(other.sms) && push.equals(other.push) && whatsapp.equals(other.whatsapp) && email.equals(other.email) && slack.equals(other.slack) && voice.equals(other.voice) && teams.equals(other.teams);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.sms, this.push, this.whatsapp, this.email, this.slack, this.voice, this.teams);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "ChannelPreferences{" + "sms: " + sms + ", push: " + push + ", whatsapp: " + whatsapp + ", email: " + email + ", slack: " + slack + ", voice: " + voice + ", teams: " + teams + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<ChannelPreference> sms = Optional.empty();

    private Optional<ChannelPreference> push = Optional.empty();

    private Optional<ChannelPreference> whatsapp = Optional.empty();

    private Optional<ChannelPreference> email = Optional.empty();

    private Optional<ChannelPreference> slack = Optional.empty();

    private Optional<ChannelPreference> voice = Optional.empty();

    private Optional<ChannelPreference> teams = Optional.empty();

    private Builder() {
    }

    public Builder from(ChannelPreferences other) {
      sms(other.getSms());
      push(other.getPush());
      whatsapp(other.getWhatsapp());
      email(other.getEmail());
      slack(other.getSlack());
      voice(other.getVoice());
      teams(other.getTeams());
      return this;
    }

    @JsonSetter(
        value = "sms",
        nulls = Nulls.SKIP
    )
    public Builder sms(Optional<ChannelPreference> sms) {
      this.sms = sms;
      return this;
    }

    public Builder sms(ChannelPreference sms) {
      this.sms = Optional.of(sms);
      return this;
    }

    @JsonSetter(
        value = "push",
        nulls = Nulls.SKIP
    )
    public Builder push(Optional<ChannelPreference> push) {
      this.push = push;
      return this;
    }

    public Builder push(ChannelPreference push) {
      this.push = Optional.of(push);
      return this;
    }

    @JsonSetter(
        value = "whatsapp",
        nulls = Nulls.SKIP
    )
    public Builder whatsapp(Optional<ChannelPreference> whatsapp) {
      this.whatsapp = whatsapp;
      return this;
    }

    public Builder whatsapp(ChannelPreference whatsapp) {
      this.whatsapp = Optional.of(whatsapp);
      return this;
    }

    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public Builder email(Optional<ChannelPreference> email) {
      this.email = email;
      return this;
    }

    public Builder email(ChannelPreference email) {
      this.email = Optional.of(email);
      return this;
    }

    @JsonSetter(
        value = "slack",
        nulls = Nulls.SKIP
    )
    public Builder slack(Optional<ChannelPreference> slack) {
      this.slack = slack;
      return this;
    }

    public Builder slack(ChannelPreference slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @JsonSetter(
        value = "voice",
        nulls = Nulls.SKIP
    )
    public Builder voice(Optional<ChannelPreference> voice) {
      this.voice = voice;
      return this;
    }

    public Builder voice(ChannelPreference voice) {
      this.voice = Optional.of(voice);
      return this;
    }

    @JsonSetter(
        value = "teams",
        nulls = Nulls.SKIP
    )
    public Builder teams(Optional<ChannelPreference> teams) {
      this.teams = teams;
      return this;
    }

    public Builder teams(ChannelPreference teams) {
      this.teams = Optional.of(teams);
      return this;
    }

    public ChannelPreferences build() {
      return new ChannelPreferences(sms, push, whatsapp, email, slack, voice, teams);
    }
  }
}

]


local[resources/raven/user/types/RavenUser.java]=[
package resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = RavenUser.Builder.class
)
public final class RavenUser {
  private final String userId;

  private final Optional<String> userSid;

  private final Optional<String> onesignalExternalId;

  private final Optional<String> mobile;

  private final Optional<String> email;

  private final Optional<String> whatsappMobile;

  private final Optional<SlackProfile> slack;

  private final Optional<TelegramProfile> telegram;

  private final Optional<List<String>> fcmTokens;

  private final Optional<List<String>> onesignalPlayerIds;

  private final Optional<List<String>> iosTokens;

  private final Optional<Long> createdAt;

  private final Optional<Long> updatedAt;

  private int _cachedHashCode;

  RavenUser(String userId, Optional<String> userSid, Optional<String> onesignalExternalId,
      Optional<String> mobile, Optional<String> email, Optional<String> whatsappMobile,
      Optional<SlackProfile> slack, Optional<TelegramProfile> telegram,
      Optional<List<String>> fcmTokens, Optional<List<String>> onesignalPlayerIds,
      Optional<List<String>> iosTokens, Optional<Long> createdAt, Optional<Long> updatedAt) {
    this.userId = userId;
    this.userSid = userSid;
    this.onesignalExternalId = onesignalExternalId;
    this.mobile = mobile;
    this.email = email;
    this.whatsappMobile = whatsappMobile;
    this.slack = slack;
    this.telegram = telegram;
    this.fcmTokens = fcmTokens;
    this.onesignalPlayerIds = onesignalPlayerIds;
    this.iosTokens = iosTokens;
    this.createdAt = createdAt;
    this.updatedAt = updatedAt;
  }

  /**
   * @return Your user identifier.
   * If user_id already exists, user properties will be updated else a new user will be created
   */
  @JsonProperty("user_id")
  public String getUserId() {
    return userId;
  }

  @JsonProperty("user_sid")
  public Optional<String> getUserSid() {
    return userSid;
  }

  @JsonProperty("onesignal_external_id")
  public Optional<String> getOnesignalExternalId() {
    return onesignalExternalId;
  }

  @JsonProperty("mobile")
  public Optional<String> getMobile() {
    return mobile;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  /**
   * @return Include this only when user's whatsapp mobile is different than primary mobile
   */
  @JsonProperty("whatsapp_mobile")
  public Optional<String> getWhatsappMobile() {
    return whatsappMobile;
  }

  @JsonProperty("slack")
  public Optional<SlackProfile> getSlack() {
    return slack;
  }

  @JsonProperty("telegram")
  public Optional<TelegramProfile> getTelegram() {
    return telegram;
  }

  @JsonProperty("fcm_tokens")
  public Optional<List<String>> getFcmTokens() {
    return fcmTokens;
  }

  @JsonProperty("onesignal_player_ids")
  public Optional<List<String>> getOnesignalPlayerIds() {
    return onesignalPlayerIds;
  }

  @JsonProperty("ios_tokens")
  public Optional<List<String>> getIosTokens() {
    return iosTokens;
  }

  @JsonProperty("created_at")
  public Optional<Long> getCreatedAt() {
    return createdAt;
  }

  @JsonProperty("updated_at")
  public Optional<Long> getUpdatedAt() {
    return updatedAt;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof RavenUser && equalTo((RavenUser) other);
  }

  private boolean equalTo(RavenUser other) {
    return userId.equals(other.userId) && userSid.equals(other.userSid) && onesignalExternalId.equals(other.onesignalExternalId) && mobile.equals(other.mobile) && email.equals(other.email) && whatsappMobile.equals(other.whatsappMobile) && slack.equals(other.slack) && telegram.equals(other.telegram) && fcmTokens.equals(other.fcmTokens) && onesignalPlayerIds.equals(other.onesignalPlayerIds) && iosTokens.equals(other.iosTokens) && createdAt.equals(other.createdAt) && updatedAt.equals(other.updatedAt);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.userId, this.userSid, this.onesignalExternalId, this.mobile, this.email, this.whatsappMobile, this.slack, this.telegram, this.fcmTokens, this.onesignalPlayerIds, this.iosTokens, this.createdAt, this.updatedAt);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "RavenUser{" + "userId: " + userId + ", userSid: " + userSid + ", onesignalExternalId: " + onesignalExternalId + ", mobile: " + mobile + ", email: " + email + ", whatsappMobile: " + whatsappMobile + ", slack: " + slack + ", telegram: " + telegram + ", fcmTokens: " + fcmTokens + ", onesignalPlayerIds: " + onesignalPlayerIds + ", iosTokens: " + iosTokens + ", createdAt: " + createdAt + ", updatedAt: " + updatedAt + "}";
  }

  public static UserIdStage builder() {
    return new Builder();
  }

  public interface UserIdStage {
    _FinalStage userId(String userId);

    Builder from(RavenUser other);
  }

  public interface _FinalStage {
    RavenUser build();

    _FinalStage userSid(Optional<String> userSid);

    _FinalStage userSid(String userSid);

    _FinalStage onesignalExternalId(Optional<String> onesignalExternalId);

    _FinalStage onesignalExternalId(String onesignalExternalId);

    _FinalStage mobile(Optional<String> mobile);

    _FinalStage mobile(String mobile);

    _FinalStage email(Optional<String> email);

    _FinalStage email(String email);

    _FinalStage whatsappMobile(Optional<String> whatsappMobile);

    _FinalStage whatsappMobile(String whatsappMobile);

    _FinalStage slack(Optional<SlackProfile> slack);

    _FinalStage slack(SlackProfile slack);

    _FinalStage telegram(Optional<TelegramProfile> telegram);

    _FinalStage telegram(TelegramProfile telegram);

    _FinalStage fcmTokens(Optional<List<String>> fcmTokens);

    _FinalStage fcmTokens(List<String> fcmTokens);

    _FinalStage onesignalPlayerIds(Optional<List<String>> onesignalPlayerIds);

    _FinalStage onesignalPlayerIds(List<String> onesignalPlayerIds);

    _FinalStage iosTokens(Optional<List<String>> iosTokens);

    _FinalStage iosTokens(List<String> iosTokens);

    _FinalStage createdAt(Optional<Long> createdAt);

    _FinalStage createdAt(Long createdAt);

    _FinalStage updatedAt(Optional<Long> updatedAt);

    _FinalStage updatedAt(Long updatedAt);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements UserIdStage, _FinalStage {
    private String userId;

    private Optional<Long> updatedAt = Optional.empty();

    private Optional<Long> createdAt = Optional.empty();

    private Optional<List<String>> iosTokens = Optional.empty();

    private Optional<List<String>> onesignalPlayerIds = Optional.empty();

    private Optional<List<String>> fcmTokens = Optional.empty();

    private Optional<TelegramProfile> telegram = Optional.empty();

    private Optional<SlackProfile> slack = Optional.empty();

    private Optional<String> whatsappMobile = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Optional<String> mobile = Optional.empty();

    private Optional<String> onesignalExternalId = Optional.empty();

    private Optional<String> userSid = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(RavenUser other) {
      userId(other.getUserId());
      userSid(other.getUserSid());
      onesignalExternalId(other.getOnesignalExternalId());
      mobile(other.getMobile());
      email(other.getEmail());
      whatsappMobile(other.getWhatsappMobile());
      slack(other.getSlack());
      telegram(other.getTelegram());
      fcmTokens(other.getFcmTokens());
      onesignalPlayerIds(other.getOnesignalPlayerIds());
      iosTokens(other.getIosTokens());
      createdAt(other.getCreatedAt());
      updatedAt(other.getUpdatedAt());
      return this;
    }

    /**
     * <p>Your user identifier.
     * If user_id already exists, user properties will be updated else a new user will be created</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    @JsonSetter("user_id")
    public _FinalStage userId(String userId) {
      this.userId = userId;
      return this;
    }

    @Override
    public _FinalStage updatedAt(Long updatedAt) {
      this.updatedAt = Optional.of(updatedAt);
      return this;
    }

    @Override
    @JsonSetter(
        value = "updated_at",
        nulls = Nulls.SKIP
    )
    public _FinalStage updatedAt(Optional<Long> updatedAt) {
      this.updatedAt = updatedAt;
      return this;
    }

    @Override
    public _FinalStage createdAt(Long createdAt) {
      this.createdAt = Optional.of(createdAt);
      return this;
    }

    @Override
    @JsonSetter(
        value = "created_at",
        nulls = Nulls.SKIP
    )
    public _FinalStage createdAt(Optional<Long> createdAt) {
      this.createdAt = createdAt;
      return this;
    }

    @Override
    public _FinalStage iosTokens(List<String> iosTokens) {
      this.iosTokens = Optional.of(iosTokens);
      return this;
    }

    @Override
    @JsonSetter(
        value = "ios_tokens",
        nulls = Nulls.SKIP
    )
    public _FinalStage iosTokens(Optional<List<String>> iosTokens) {
      this.iosTokens = iosTokens;
      return this;
    }

    @Override
    public _FinalStage onesignalPlayerIds(List<String> onesignalPlayerIds) {
      this.onesignalPlayerIds = Optional.of(onesignalPlayerIds);
      return this;
    }

    @Override
    @JsonSetter(
        value = "onesignal_player_ids",
        nulls = Nulls.SKIP
    )
    public _FinalStage onesignalPlayerIds(Optional<List<String>> onesignalPlayerIds) {
      this.onesignalPlayerIds = onesignalPlayerIds;
      return this;
    }

    @Override
    public _FinalStage fcmTokens(List<String> fcmTokens) {
      this.fcmTokens = Optional.of(fcmTokens);
      return this;
    }

    @Override
    @JsonSetter(
        value = "fcm_tokens",
        nulls = Nulls.SKIP
    )
    public _FinalStage fcmTokens(Optional<List<String>> fcmTokens) {
      this.fcmTokens = fcmTokens;
      return this;
    }

    @Override
    public _FinalStage telegram(TelegramProfile telegram) {
      this.telegram = Optional.of(telegram);
      return this;
    }

    @Override
    @JsonSetter(
        value = "telegram",
        nulls = Nulls.SKIP
    )
    public _FinalStage telegram(Optional<TelegramProfile> telegram) {
      this.telegram = telegram;
      return this;
    }

    @Override
    public _FinalStage slack(SlackProfile slack) {
      this.slack = Optional.of(slack);
      return this;
    }

    @Override
    @JsonSetter(
        value = "slack",
        nulls = Nulls.SKIP
    )
    public _FinalStage slack(Optional<SlackProfile> slack) {
      this.slack = slack;
      return this;
    }

    /**
     * <p>Include this only when user's whatsapp mobile is different than primary mobile</p>
     * @return Reference to {@code this} so that method calls can be chained together.
     */
    @Override
    public _FinalStage whatsappMobile(String whatsappMobile) {
      this.whatsappMobile = Optional.of(whatsappMobile);
      return this;
    }

    @Override
    @JsonSetter(
        value = "whatsapp_mobile",
        nulls = Nulls.SKIP
    )
    public _FinalStage whatsappMobile(Optional<String> whatsappMobile) {
      this.whatsappMobile = whatsappMobile;
      return this;
    }

    @Override
    public _FinalStage email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @Override
    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public _FinalStage email(Optional<String> email) {
      this.email = email;
      return this;
    }

    @Override
    public _FinalStage mobile(String mobile) {
      this.mobile = Optional.of(mobile);
      return this;
    }

    @Override
    @JsonSetter(
        value = "mobile",
        nulls = Nulls.SKIP
    )
    public _FinalStage mobile(Optional<String> mobile) {
      this.mobile = mobile;
      return this;
    }

    @Override
    public _FinalStage onesignalExternalId(String onesignalExternalId) {
      this.onesignalExternalId = Optional.of(onesignalExternalId);
      return this;
    }

    @Override
    @JsonSetter(
        value = "onesignal_external_id",
        nulls = Nulls.SKIP
    )
    public _FinalStage onesignalExternalId(Optional<String> onesignalExternalId) {
      this.onesignalExternalId = onesignalExternalId;
      return this;
    }

    @Override
    public _FinalStage userSid(String userSid) {
      this.userSid = Optional.of(userSid);
      return this;
    }

    @Override
    @JsonSetter(
        value = "user_sid",
        nulls = Nulls.SKIP
    )
    public _FinalStage userSid(Optional<String> userSid) {
      this.userSid = userSid;
      return this;
    }

    @Override
    public RavenUser build() {
      return new RavenUser(userId, userSid, onesignalExternalId, mobile, email, whatsappMobile, slack, telegram, fcmTokens, onesignalPlayerIds, iosTokens, createdAt, updatedAt);
    }
  }
}

]


local[resources/raven/user/types/SlackProfile.java]=[
package resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = SlackProfile.Builder.class
)
public final class SlackProfile {
  private final String accessToken;

  private final Optional<String> email;

  private final Optional<String> channelId;

  private int _cachedHashCode;

  SlackProfile(String accessToken, Optional<String> email, Optional<String> channelId) {
    this.accessToken = accessToken;
    this.email = email;
    this.channelId = channelId;
  }

  @JsonProperty("access_token")
  public String getAccessToken() {
    return accessToken;
  }

  @JsonProperty("email")
  public Optional<String> getEmail() {
    return email;
  }

  @JsonProperty("channel_id")
  public Optional<String> getChannelId() {
    return channelId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof SlackProfile && equalTo((SlackProfile) other);
  }

  private boolean equalTo(SlackProfile other) {
    return accessToken.equals(other.accessToken) && email.equals(other.email) && channelId.equals(other.channelId);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.accessToken, this.email, this.channelId);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "SlackProfile{" + "accessToken: " + accessToken + ", email: " + email + ", channelId: " + channelId + "}";
  }

  public static AccessTokenStage builder() {
    return new Builder();
  }

  public interface AccessTokenStage {
    _FinalStage accessToken(String accessToken);

    Builder from(SlackProfile other);
  }

  public interface _FinalStage {
    SlackProfile build();

    _FinalStage email(Optional<String> email);

    _FinalStage email(String email);

    _FinalStage channelId(Optional<String> channelId);

    _FinalStage channelId(String channelId);
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements AccessTokenStage, _FinalStage {
    private String accessToken;

    private Optional<String> channelId = Optional.empty();

    private Optional<String> email = Optional.empty();

    private Builder() {
    }

    @Override
    public Builder from(SlackProfile other) {
      accessToken(other.getAccessToken());
      email(other.getEmail());
      channelId(other.getChannelId());
      return this;
    }

    @Override
    @JsonSetter("access_token")
    public _FinalStage accessToken(String accessToken) {
      this.accessToken = accessToken;
      return this;
    }

    @Override
    public _FinalStage channelId(String channelId) {
      this.channelId = Optional.of(channelId);
      return this;
    }

    @Override
    @JsonSetter(
        value = "channel_id",
        nulls = Nulls.SKIP
    )
    public _FinalStage channelId(Optional<String> channelId) {
      this.channelId = channelId;
      return this;
    }

    @Override
    public _FinalStage email(String email) {
      this.email = Optional.of(email);
      return this;
    }

    @Override
    @JsonSetter(
        value = "email",
        nulls = Nulls.SKIP
    )
    public _FinalStage email(Optional<String> email) {
      this.email = email;
      return this;
    }

    @Override
    public SlackProfile build() {
      return new SlackProfile(accessToken, email, channelId);
    }
  }
}

]


local[resources/raven/user/types/TelegramProfile.java]=[
package resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;

@JsonDeserialize(
    builder = TelegramProfile.Builder.class
)
public final class TelegramProfile {
  private final String chatId;

  private int _cachedHashCode;

  TelegramProfile(String chatId) {
    this.chatId = chatId;
  }

  @JsonProperty("chat_id")
  public String getChatId() {
    return chatId;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof TelegramProfile && equalTo((TelegramProfile) other);
  }

  private boolean equalTo(TelegramProfile other) {
    return chatId.equals(other.chatId);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.chatId);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "TelegramProfile{" + "chatId: " + chatId + "}";
  }

  public static ChatIdStage builder() {
    return new Builder();
  }

  public interface ChatIdStage {
    _FinalStage chatId(String chatId);

    Builder from(TelegramProfile other);
  }

  public interface _FinalStage {
    TelegramProfile build();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder implements ChatIdStage, _FinalStage {
    private String chatId;

    private Builder() {
    }

    @Override
    public Builder from(TelegramProfile other) {
      chatId(other.getChatId());
      return this;
    }

    @Override
    @JsonSetter("chat_id")
    public _FinalStage chatId(String chatId) {
      this.chatId = chatId;
      return this;
    }

    @Override
    public TelegramProfile build() {
      return new TelegramProfile(chatId);
    }
  }
}

]


local[resources/raven/user/types/UserPreferences.java]=[
package resources.raven.user.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonSetter;
import com.fasterxml.jackson.annotation.Nulls;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

@JsonDeserialize(
    builder = UserPreferences.Builder.class
)
public final class UserPreferences {
  private final Optional<Channel> preferredChannel;

  private final Optional<ChannelPreferences> channelPreferences;

  private int _cachedHashCode;

  UserPreferences(Optional<Channel> preferredChannel,
      Optional<ChannelPreferences> channelPreferences) {
    this.preferredChannel = preferredChannel;
    this.channelPreferences = channelPreferences;
  }

  @JsonProperty("preferred_channel")
  public Optional<Channel> getPreferredChannel() {
    return preferredChannel;
  }

  @JsonProperty("channel_preferences")
  public Optional<ChannelPreferences> getChannelPreferences() {
    return channelPreferences;
  }

  @Override
  public boolean equals(Object other) {
    if (this == other) return true;
    return other instanceof UserPreferences && equalTo((UserPreferences) other);
  }

  private boolean equalTo(UserPreferences other) {
    return preferredChannel.equals(other.preferredChannel) && channelPreferences.equals(other.channelPreferences);
  }

  @Override
  public int hashCode() {
    if (_cachedHashCode == 0) {
      _cachedHashCode = Objects.hash(this.preferredChannel, this.channelPreferences);
    }
    return _cachedHashCode;
  }

  @Override
  public String toString() {
    return "UserPreferences{" + "preferredChannel: " + preferredChannel + ", channelPreferences: " + channelPreferences + "}";
  }

  public static Builder builder() {
    return new Builder();
  }

  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  public static final class Builder {
    private Optional<Channel> preferredChannel = Optional.empty();

    private Optional<ChannelPreferences> channelPreferences = Optional.empty();

    private Builder() {
    }

    public Builder from(UserPreferences other) {
      preferredChannel(other.getPreferredChannel());
      channelPreferences(other.getChannelPreferences());
      return this;
    }

    @JsonSetter(
        value = "preferred_channel",
        nulls = Nulls.SKIP
    )
    public Builder preferredChannel(Optional<Channel> preferredChannel) {
      this.preferredChannel = preferredChannel;
      return this;
    }

    public Builder preferredChannel(Channel preferredChannel) {
      this.preferredChannel = Optional.of(preferredChannel);
      return this;
    }

    @JsonSetter(
        value = "channel_preferences",
        nulls = Nulls.SKIP
    )
    public Builder channelPreferences(Optional<ChannelPreferences> channelPreferences) {
      this.channelPreferences = channelPreferences;
      return this;
    }

    public Builder channelPreferences(ChannelPreferences channelPreferences) {
      this.channelPreferences = Optional.of(channelPreferences);
      return this;
    }

    public UserPreferences build() {
      return new UserPreferences(preferredChannel, channelPreferences);
    }
  }
}

]