basic[api/generated-java/blog-api-client/build.gradle]=[
plugins {
    id 'java-library'
    id "org.inferred.processors" version "3.6.0"
}

repositories {
    mavenCentral()
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/releases/"
    }
}

dependencies {
    api project(':blog-api-model')
    api 'io.github.fern-api:auth-utils:0.0.49'
    api 'io.github.fern-api:exception-utils:0.0.49'
    api 'io.github.fern-api:immutables-utils:0.0.49'
    api 'io.github.fern-api:jackson-utils:0.0.49'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.3'
    implementation 'io.github.openfeign:feign-jackson:11.8'
    implementation 'io.github.openfeign:feign-core:11.8'
    implementation 'io.github.openfeign:feign-jaxrs2:11.8'

    annotationProcessor 'org.immutables:value:2.8.8'
    compileOnly 'org.immutables:value-annotations:2.8.8'
}

]


basic[api/generated-java/blog-api-client/src/main/java/com/blog/client/PostsServiceClient.java]=[
package com.blog.client;

import com.blog.errors.PostNotFoundError;
import com.blog.services.CreatePostRequest;
import com.blog.types.BlogPost;
import com.blog.types.PostId;
import com.fern.java.exception.UnknownRemoteException;
import com.fern.java.jackson.ClientObjectMappers;
import feign.Feign;
import feign.jackson.JacksonDecoder;
import feign.jackson.JacksonEncoder;
import feign.jaxrs.JAXRSContract;
import java.lang.String;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/posts")
public interface PostsServiceClient {
  @POST
  @Path("/create")
  void createPost(CreatePostRequest request);

  @GET
  @Path("/{postId}")
  BlogPost getPost(@PathParam("postId") PostId postId) throws PostNotFoundError,
      UnknownRemoteException;

  static PostsServiceClient getClient(String url) {
    return Feign.builder()
        .contract(new JAXRSContract())
        .decoder(new JacksonDecoder(ClientObjectMappers.JSON_MAPPER))
        .encoder(new JacksonEncoder(ClientObjectMappers.JSON_MAPPER))
        .errorDecoder(new PostsServiceErrorDecoder()).target(PostsServiceClient.class, url);
  }
}

]


basic[api/generated-java/blog-api-client/src/main/java/com/blog/client/PostsServiceErrorDecoder.java]=[
package com.blog.client;

import com.blog.services.GetPostError;
import com.fern.java.exception.UnknownRemoteException;
import com.fern.java.jackson.ClientObjectMappers;
import feign.Response;
import feign.codec.ErrorDecoder;
import java.io.IOException;
import java.lang.Class;
import java.lang.Exception;
import java.lang.Override;
import java.lang.String;
import java.util.function.Function;

final class PostsServiceErrorDecoder implements ErrorDecoder {
  @Override
  public Exception decode(String methodKey, Response response) {
    if (methodKey.contains("getPost")) {
      return decodeException(response, GetPostError.class, GetPostError::getNestedError);
    }
    return new UnknownRemoteException("Encountered exception for unknown method: " + methodKey);
  }

  private static <T> Exception decodeException(Response response, Class<T> clazz,
      Function<T, Exception> exceptionRetriever) {
    try {
      T value = ClientObjectMappers.JSON_MAPPER.readValue(response.body().asInputStream(), clazz);
      return exceptionRetriever.apply(value);
    }
    catch (IOException e) {
      return new UnknownRemoteException("Failed to read error body");
    }
  }
}

]


basic[api/generated-java/blog-api-model/build.gradle]=[
plugins {
    id 'java-library'
    id "org.inferred.processors" version "3.6.0"
}

repositories {
    mavenCentral()
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/releases/"
    }
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.google.code.findbugs:annotations:3.0.1'
    implementation 'javax.ws.rs:javax.ws.rs-api:2.1.1'
    api 'io.github.fern-api:exception-utils:0.0.49'
    api 'io.github.fern-api:immutables-utils:0.0.49'

    annotationProcessor 'org.immutables:value:2.8.8'
    compileOnly 'org.immutables:value-annotations:2.8.8'
}

]


basic[api/generated-java/blog-api-model/src/main/java/com/blog/errors/PostNotFoundError.java]=[
package com.blog.errors;

import com.blog.types.PostId;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.java.exception.HttpException;
import com.fern.java.immutables.StagedBuilderImmutablesStyle;
import java.lang.Exception;
import java.lang.Override;
import org.immutables.value.Value;

@Value.Immutable
@StagedBuilderImmutablesStyle
@JsonDeserialize(
    as = ImmutablePostNotFoundError.class
)
@JsonIgnoreProperties(
    ignoreUnknown = true,
    value = {
        "stackTrace",
        "cause",
        "detailMessage",
        "localizedMessage",
        "statusCode",
        "message",
        "suppressed"
    }
)
public abstract class PostNotFoundError extends Exception implements HttpException {
  public static final int STATUS_CODE = 400;

  public abstract PostId id();

  public static ImmutablePostNotFoundError.IdBuildStage builder() {
    return ImmutablePostNotFoundError.builder();
  }

  @Override
  public int getStatusCode() {
    return STATUS_CODE;
  }
}

]


basic[api/generated-java/blog-api-model/src/main/java/com/blog/services/CreatePostRequest.java]=[
package com.blog.services;

import com.blog.types.Author;
import com.blog.types.PostType;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.java.immutables.StagedBuilderImmutablesStyle;
import java.lang.String;
import org.immutables.value.Value;

@Value.Immutable
@StagedBuilderImmutablesStyle
@JsonDeserialize(
    as = ImmutableCreatePostRequest.class
)
@JsonIgnoreProperties(
    ignoreUnknown = true
)
public interface CreatePostRequest {
  String title();

  Author author();

  String content();

  PostType postType();

  static ImmutableCreatePostRequest.TitleBuildStage builder() {
    return ImmutableCreatePostRequest.builder();
  }
}

]


basic[api/generated-java/blog-api-model/src/main/java/com/blog/services/GetPostError.java]=[
package com.blog.services;

import com.blog.errors.PostNotFoundError;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Exception;
import java.lang.Override;
import javax.ws.rs.WebApplicationException;
import javax.ws.rs.core.Response;
import org.immutables.value.Value;

@Value.Enclosing
public final class GetPostError extends WebApplicationException {
  private final InternalValue value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private GetPostError(InternalValue value) {
    this.value = value;
  }

  @JsonValue
  InternalValue getInternalValue() {
    return value;
  }

  @Override
  public final Response getResponse() {
    return Response.status(value.getStatusCode()).entity(value).build();
  }

  public final Exception getNestedError() {
    return value.getNestedError();
  }

  public static GetPostError postNotFoundError(PostNotFoundError value) {
    return new GetPostError(InternalPostNotFoundErrorValue.of(value));
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      include = JsonTypeInfo.As.PROPERTY,
      property = "_error",
      visible = true
  )
  @JsonSubTypes(@JsonSubTypes.Type(value = InternalPostNotFoundErrorValue.class, name = "PostNotFoundError"))
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface InternalValue {
    int getStatusCode();

    Exception getNestedError();
  }

  @Value.Immutable
  @JsonTypeName("PostNotFoundError")
  @JsonDeserialize(
      as = GetPostError.InternalPostNotFoundErrorValue.class
  )
  interface InternalPostNotFoundErrorValue extends InternalValue {
    @JsonValue
    PostNotFoundError PostNotFoundError();

    static InternalPostNotFoundErrorValue of(PostNotFoundError value) {
      return ImmutableGetPostError.InternalPostNotFoundErrorValue.builder().PostNotFoundError(value).build();
    }

    @Override
    default int getStatusCode() {
      return PostNotFoundError().getStatusCode();
    }

    @Override
    default Exception getNestedError() {
      return PostNotFoundError();
    }
  }
}

]


basic[api/generated-java/blog-api-model/src/main/java/com/blog/types/Author.java]=[
package com.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.immutables.value.Value;

@Value.Enclosing
public final class Author {
  private final InternalValue value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private Author(InternalValue value) {
    this.value = value;
  }

  @JsonValue
  InternalValue getInternalValue() {
    return value;
  }

  public static Author anonymous() {
    return new Author(InternalAnonymousValue.of());
  }

  public static Author name(String value) {
    return new Author(InternalNameValue.of(value));
  }

  public boolean isName() {
    return value instanceof InternalNameValue;
  }

  public boolean isAnonymous() {
    return value instanceof InternalAnonymousValue;
  }

  public Optional<String> getName() {
    if (isName()) {
      return Optional.of(((InternalNameValue) value).name());
    }
    return Optional.empty();
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public interface Visitor<T> {
    T visitAnonymous();

    T visitName(String value);

    T visitUnknown(String unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      include = JsonTypeInfo.As.PROPERTY,
      property = "_type",
      visible = true,
      defaultImpl = Unknown.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(value = InternalAnonymousValue.class, name = "anonymous"),
      @JsonSubTypes.Type(value = InternalNameValue.class, name = "name")
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface InternalValue {
    <T> T visit(Visitor<T> visitor);
  }

  @Value.Immutable
  @JsonTypeName("name")
  @JsonDeserialize(
      as = ImmutableAuthor.InternalNameValue.class
  )
  interface InternalNameValue extends InternalValue {
    String name();

    @Override
    default <T> T visit(Visitor<T> visitor) {
      return visitor.visitName(name());
    }

    static InternalNameValue of(String value) {
      return ImmutableAuthor.InternalNameValue.builder().name(value).build();
    }
  }

  @Value.Immutable
  @JsonTypeName("anonymous")
  @JsonDeserialize(
      as = ImmutableAuthor.InternalAnonymousValue.class
  )
  interface InternalAnonymousValue extends InternalValue {
    @Override
    default <T> T visit(Visitor<T> visitor) {
      return visitor.visitAnonymous();
    }

    static InternalAnonymousValue of() {
      return ImmutableAuthor.InternalAnonymousValue.builder().build();
    }
  }

  @Value.Immutable
  @JsonDeserialize(
      as = ImmutableAuthor.Unknown.class
  )
  interface Unknown extends InternalValue {
    @JsonValue
    Map<String, Object> value();

    default String type() {
      return value().get("type").toString();
    }

    @Override
    default <T> T visit(Visitor<T> visitor) {
      return visitor.visitUnknown(type());
    }
  }
}

]


basic[api/generated-java/blog-api-model/src/main/java/com/blog/types/BlogPost.java]=[
package com.blog.types;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.java.immutables.StagedBuilderImmutablesStyle;
import java.lang.String;
import org.immutables.value.Value;

@Value.Immutable
@StagedBuilderImmutablesStyle
@JsonDeserialize(
    as = ImmutableBlogPost.class
)
@JsonIgnoreProperties(
    ignoreUnknown = true
)
public interface BlogPost {
  PostId id();

  PostType type();

  String title();

  Author author();

  String content();

  static ImmutableBlogPost.IdBuildStage builder() {
    return ImmutableBlogPost.builder();
  }
}

]


basic[api/generated-java/blog-api-model/src/main/java/com/blog/types/PostId.java]=[
package com.blog.types;

import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fern.java.immutables.AliasImmutablesStyle;
import java.lang.Override;
import java.lang.String;
import org.immutables.value.Value;

@Value.Immutable
@AliasImmutablesStyle
@JsonDeserialize(
    as = ImmutablePostId.class
)
public abstract class PostId {
  @JsonValue
  public abstract String value();

  public static PostId valueOf(String value) {
    return ImmutablePostId.of(value);
  }

  @Override
  public String toString() {
    return value().toString();
  }
}

]


basic[api/generated-java/blog-api-model/src/main/java/com/blog/types/PostType.java]=[
package com.blog.types;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;
import javax.annotation.Nonnull;

public final class PostType {
  public static final PostType SHORT = new PostType(Value.SHORT, "SHORT");

  public static final PostType LONG = new PostType(Value.LONG, "LONG");

  private final Value value;

  private final String string;

  PostType(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof PostType && this.string.equals(((PostType) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case SHORT:
        return visitor.visitSHORT();
      case LONG:
        return visitor.visitLONG();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostType valueOf(@Nonnull String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "SHORT":
        return SHORT;
      case "LONG":
        return LONG;
      default:
        return new PostType(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    LONG,

    SHORT,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitLONG();

    T visitSHORT();

    T visitUnknown(String unknownType);
  }
}

]


basic[api/generated-java/blog-api-server/build.gradle]=[
plugins {
    id 'java-library'
    id "org.inferred.processors" version "3.6.0"
}

repositories {
    mavenCentral()
    maven {
        url "https://s01.oss.sonatype.org/content/repositories/releases/"
    }
}

dependencies {
    api project(':blog-api-model')
    api 'io.github.fern-api:auth-utils:0.0.49'
    api 'io.github.fern-api:exception-utils:0.0.49'
    api 'io.github.fern-api:immutables-utils:0.0.49'
    api 'io.github.fern-api:jackson-utils:0.0.49'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jdk8:2.12.3'
    implementation 'io.github.openfeign:feign-jackson:11.8'
    implementation 'io.github.openfeign:feign-core:11.8'
    implementation 'io.github.openfeign:feign-jaxrs2:11.8'
    implementation 'org.glassfish.jersey.ext:jersey-spring5:2.35'

    annotationProcessor 'org.immutables:value:2.8.8'
    compileOnly 'org.immutables:value-annotations:2.8.8'
}

]


basic[api/generated-java/blog-api-server/src/main/java/com/blog/server/AbstractServiceRegistry.java]=[
package com.blog.server;

import org.glassfish.jersey.server.ResourceConfig;

public abstract class AbstractServiceRegistry extends ResourceConfig {
  AbstractServiceRegistry() {
    register(registerPostsService());
  }

  public abstract PostsService registerPostsService();
}

]


basic[api/generated-java/blog-api-server/src/main/java/com/blog/server/PostsService.java]=[
package com.blog.server;

import com.blog.errors.PostNotFoundError;
import com.blog.services.CreatePostRequest;
import com.blog.services.GetPostError;
import com.blog.types.BlogPost;
import com.blog.types.PostId;
import javax.ws.rs.Consumes;
import javax.ws.rs.GET;
import javax.ws.rs.POST;
import javax.ws.rs.Path;
import javax.ws.rs.PathParam;
import javax.ws.rs.Produces;
import javax.ws.rs.core.MediaType;

@Consumes(MediaType.APPLICATION_JSON)
@Produces(MediaType.APPLICATION_JSON)
@Path("/posts")
public abstract class PostsService {
  @POST
  @Path("/create")
  public final void createPost(CreatePostRequest request) {
    createPostImpl(request);
  }

  public abstract void createPostImpl(CreatePostRequest request);

  @GET
  @Path("/{postId}")
  public final BlogPost getPost(@PathParam("postId") PostId postId) {
    try {
      return getPostImpl(postId);
    }
    catch (PostNotFoundError e) {
      throw GetPostError.postNotFoundError(e);
    }
  }

  public abstract BlogPost getPostImpl(PostId postId) throws PostNotFoundError;
}

]


basic[api/generated-java/gradle/wrapper/gradle-wrapper.jar]=[
api/generated-java/gradle/wrapper/gradle-wrapper.jar
]


basic[api/generated-java/gradle/wrapper/gradle-wrapper.properties]=[
distributionBase=GRADLE_USER_HOME
distributionPath=wrapper/dists
distributionUrl=https\://services.gradle.org/distributions/gradle-7.4.2-bin.zip
zipStoreBase=GRADLE_USER_HOME
zipStorePath=wrapper/dists
]


basic[api/generated-java/gradlew]=[
#!/usr/bin/env sh

#
# Copyright 2015 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

##############################################################################
##
##  Gradle start up script for UN*X
##
##############################################################################

# Attempt to set APP_HOME
# Resolve links: $0 may be a link
PRG="$0"
# Need this for relative symlinks.
while [ -h "$PRG" ] ; do
    ls=`ls -ld "$PRG"`
    link=`expr "$ls" : '.*-> \(.*\)$'`
    if expr "$link" : '/.*' > /dev/null; then
        PRG="$link"
    else
        PRG=`dirname "$PRG"`"/$link"
    fi
done
SAVED="`pwd`"
cd "`dirname \"$PRG\"`/" >/dev/null
APP_HOME="`pwd -P`"
cd "$SAVED" >/dev/null

APP_NAME="Gradle"
APP_BASE_NAME=`basename "$0"`

# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
DEFAULT_JVM_OPTS='"-Xmx64m" "-Xms64m"'

# Use the maximum available, or set MAX_FD != -1 to use that value.
MAX_FD="maximum"

warn () {
    echo "$*"
}

die () {
    echo
    echo "$*"
    echo
    exit 1
}

# OS specific support (must be 'true' or 'false').
cygwin=false
msys=false
darwin=false
nonstop=false
case "`uname`" in
  CYGWIN* )
    cygwin=true
    ;;
  Darwin* )
    darwin=true
    ;;
  MINGW* )
    msys=true
    ;;
  NONSTOP* )
    nonstop=true
    ;;
esac

CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
.
.
# Determine the Java command to use to start the JVM.
if [ -n "$JAVA_HOME" ] ; then
    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
        # IBM's JDK on AIX uses strange locations for the executables
        JAVACMD="$JAVA_HOME/jre/sh/java"
    else
        JAVACMD="$JAVA_HOME/bin/java"
    fi
    if [ ! -x "$JAVACMD" ] ; then
        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
    fi
else
    JAVACMD="java"
    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.

Please set the JAVA_HOME variable in your environment to match the
location of your Java installation."
fi

# Increase the maximum file descriptors if we can.
if [ "$cygwin" = "false" -a "$darwin" = "false" -a "$nonstop" = "false" ] ; then
    MAX_FD_LIMIT=`ulimit -H -n`
    if [ $? -eq 0 ] ; then
        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
            MAX_FD="$MAX_FD_LIMIT"
        fi
        ulimit -n $MAX_FD
        if [ $? -ne 0 ] ; then
            warn "Could not set maximum file descriptor limit: $MAX_FD"
        fi
    else
        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
    fi
fi

# For Darwin, add options to specify how the application appears in the dock
if $darwin; then
    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
fi

# For Cygwin or MSYS, switch paths to Windows format before running java
if [ "$cygwin" = "true" -o "$msys" = "true" ] ; then
    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
    
    JAVACMD=`cygpath --unix "$JAVACMD"`

    # We build the pattern for arguments to be converted via cygpath
    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
    SEP=""
    for dir in $ROOTDIRSRAW ; do
        ROOTDIRS="$ROOTDIRS$SEP$dir"
        SEP="|"
    done
    OURCYGPATTERN="(^($ROOTDIRS))"
    # Add a user-defined pattern to the cygpath arguments
    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
    fi
    # Now convert the arguments - kludge to limit ourselves to /bin/sh
    i=0
    for arg in "$@" ; do
        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option

        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
        else
            eval `echo args$i`="\"$arg\""
        fi
        i=`expr $i + 1`
    done
    case $i in
        0) set -- ;;
        1) set -- "$args0" ;;
        2) set -- "$args0" "$args1" ;;
        3) set -- "$args0" "$args1" "$args2" ;;
        4) set -- "$args0" "$args1" "$args2" "$args3" ;;
        5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
        6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
        7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
        8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
        9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
    esac
fi

# Escape application args
save () {
    for i do printf %s\\n "$i" | sed "s/'/'\\\\''/g;1s/^/'/;\$s/\$/' \\\\/" ; done
    echo " "
}
APP_ARGS=`save "$@"`

# Collect all arguments for the java command, following the shell quoting and substitution rules
eval set -- $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS "\"-Dorg.gradle.appname=$APP_BASE_NAME\"" -classpath "\"$CLASSPATH\"" org.gradle.wrapper.GradleWrapperMain "$APP_ARGS"

exec "$JAVACMD" "$@"

]


basic[api/generated-java/settings.gradle]=[
rootProject.name = 'fern-generated-java'

include 'blog-api-model'
include 'blog-api-client'
include 'blog-api-server'

]