basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/build.gradle]=[
plugins {
    id 'java-library'
    id "org.inferred.processors" version "3.6.0"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.12.3'
    implementation 'com.google.code.findbugs:annotations:3.0.1'

    annotationProcessor 'org.immutables:value:2.8.8'
    compileOnly 'org.immutables:value-annotations:2.8.8'
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/ApiException.java]=[
package com.blog;

public abstract interface ApiException {
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/AuthHeader.java]=[
package com.blog;

import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Override;
import java.lang.String;
import org.immutables.value.Value;

@Value.Immutable
@PackagePrivateStyle
public abstract class AuthHeader {
  @Value.Parameter
  @JsonValue
  public abstract String authHeader();

  public static AuthHeader valueOf(String authHeader) {
    if (authHeader.startsWith("Bearer ")) {
      return ImmutableAuthHeader.of(authHeader);
    }
    return ImmutableAuthHeader.of("Bearer " + authHeader);
  }

  @Override
  public final String toString() {
    return authHeader();
  }
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/HttpApiException.java]=[
package com.blog;

public abstract interface HttpApiException {
  int getStatusCode();
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/PackagePrivateStyle.java]=[
package com.blog;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import org.immutables.value.Value;

@Target({ElementType.PACKAGE, ElementType.TYPE})
@Retention(RetentionPolicy.SOURCE)
@Value.Style(
    jdkOnly = true,
    visibility = Value.Style.ImplementationVisibility.PACKAGE,
    overshadowImplementation = true
)
public @interface PackagePrivateStyle {
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/StagedBuilderStyle.java]=[
package com.blog;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;
import org.immutables.value.Value;

@Target({ElementType.PACKAGE, ElementType.TYPE})
@Retention(RetentionPolicy.SOURCE)
@Value.Style(
    jdkOnly = true,
    stagedBuilder = true,
    visibility = Value.Style.ImplementationVisibility.PACKAGE,
    overshadowImplementation = true
)
public @interface StagedBuilderStyle {
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/services/blog/CreatePostRequest.java]=[
package com.blog.services.blog;

import com.blog.StagedBuilderStyle;
import com.blog.types.blog.Author;
import com.blog.types.blog.PostType;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.String;
import org.immutables.value.Value;

@Value.Immutable
@StagedBuilderStyle
@JsonDeserialize(
    as = ImmutableCreatePostRequest.class
)
@JsonIgnoreProperties(
    ignoreUnknown = true
)
public interface CreatePostRequest {
  PostType postType();

  String title();

  Author author();

  String content();

  static ImmutableCreatePostRequest.PostTypeBuildStage builder() {
    return ImmutableCreatePostRequest.builder();
  }
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/types/blog/Author.java]=[
package com.blog.types.blog;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSubTypes;
import com.fasterxml.jackson.annotation.JsonTypeInfo;
import com.fasterxml.jackson.annotation.JsonTypeName;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import org.immutables.value.Value;

@Value.Enclosing
public final class Author {
  private final InternalValue value;

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  private Author(InternalValue value) {
    this.value = value;
  }

  @JsonValue
  InternalValue getInternalValue() {
    return value;
  }

  public static Author anonymous() {
    return new Author(InternalAnonymousValue.of());
  }

  public static Author name(String value) {
    return new Author(InternalNameValue.of(value));
  }

  public boolean isAnonymous() {
    return value instanceof InternalAnonymousValue;
  }

  public boolean isName() {
    return value instanceof InternalNameValue;
  }

  public Optional<String> getName() {
    if (isName()) {
      return Optional.of(((InternalNameValue) value).name());
    }
    return Optional.empty();
  }

  public <T> T visit(Visitor<T> visitor) {
    return value.visit(visitor);
  }

  public interface Visitor<T> {
    T visitAnonymous();

    T visitName(String value);

    T visitUnknown(String unknownType);
  }

  @JsonTypeInfo(
      use = JsonTypeInfo.Id.NAME,
      include = JsonTypeInfo.As.EXISTING_PROPERTY,
      property = "_type",
      visible = true,
      defaultImpl = Unknown.class
  )
  @JsonSubTypes({
      @JsonSubTypes.Type(value = InternalAnonymousValue.class, name = "anonymous"),
      @JsonSubTypes.Type(value = InternalNameValue.class, name = "name")
  })
  @JsonIgnoreProperties(
      ignoreUnknown = true
  )
  private interface InternalValue {
    <T> T visit(Visitor<T> visitor);
  }

  @Value.Immutable
  @JsonTypeName("anonymous")
  @JsonDeserialize(
      as = ImmutableAuthor.InternalAnonymousValue.class
  )
  interface InternalAnonymousValue extends InternalValue {
    @Override
    default <T> T visit(Visitor<T> visitor) {
      return visitor.visitAnonymous();
    }

    static InternalAnonymousValue of() {
      return ImmutableAuthor.InternalAnonymousValue.builder().build();
    }
  }

  @Value.Immutable
  @JsonTypeName("name")
  @JsonDeserialize(
      as = ImmutableAuthor.InternalNameValue.class
  )
  interface InternalNameValue extends InternalValue {
    String name();

    @Override
    default <T> T visit(Visitor<T> visitor) {
      return visitor.visitName(name());
    }

    static InternalNameValue of(String value) {
      return ImmutableAuthor.InternalNameValue.builder().name(value).build();
    }
  }

  @Value.Immutable
  @JsonDeserialize(
      as = ImmutableAuthor.Unknown.class
  )
  interface Unknown extends InternalValue {
    @JsonValue
    Map<String, Object> value();

    default String type() {
      return value().get("type").toString();
    }

    @Override
    default <T> T visit(Visitor<T> visitor) {
      return visitor.visitUnknown(type());
    }
  }
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/types/blog/BlogPost.java]=[
package com.blog.types.blog;

import com.blog.StagedBuilderStyle;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.String;
import org.immutables.value.Value;

@Value.Immutable
@StagedBuilderStyle
@JsonDeserialize(
    as = ImmutableBlogPost.class
)
@JsonIgnoreProperties(
    ignoreUnknown = true
)
public interface BlogPost {
  PostId id();

  String title();

  PostType type();

  Author author();

  String content();

  static ImmutableBlogPost.IdBuildStage builder() {
    return ImmutableBlogPost.builder();
  }
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/types/blog/PostId.java]=[
package com.blog.types.blog;

import com.blog.StagedBuilderStyle;
import com.fasterxml.jackson.annotation.JsonValue;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import java.lang.String;
import org.immutables.value.Value;

@Value.Immutable
@StagedBuilderStyle
@JsonDeserialize(
    as = ImmutablePostId.class
)
public interface PostId {
  @JsonValue
  String value();

  static PostId valueOf(String value) {
    return ImmutablePostId.builder().value(value).build();
  }
}

]


basic[/Users/dsinghvi/Documents/fern-java-plugins/cli/src/eteTest/basic/api/generated-java/model/src/main/java/com/blog/types/blog/PostType.java]=[
package com.blog.types.blog;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonValue;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.util.Locale;
import javax.annotation.Nonnull;

public final class PostType {
  public static final PostType SHORT = new PostType(Value.SHORT, "SHORT");

  public static final PostType LONG = new PostType(Value.LONG, "LONG");

  private final Value value;

  private final String string;

  PostType(Value value, String string) {
    this.value = value;
    this.string = string;
  }

  public Value getEnumValue() {
    return value;
  }

  @Override
  @JsonValue
  public String toString() {
    return this.string;
  }

  @Override
  public boolean equals(Object other) {
    return (this == other) 
      || (other instanceof PostType && this.string.equals(((PostType) other).string));
  }

  @Override
  public int hashCode() {
    return this.string.hashCode();
  }

  public <T> T visit(Visitor<T> visitor) {
    switch (value) {
      case SHORT:
        return visitor.visitSHORT();
      case LONG:
        return visitor.visitLONG();
      case UNKNOWN:
      default:
        return visitor.visitUnknown(string);
    }
  }

  @JsonCreator(
      mode = JsonCreator.Mode.DELEGATING
  )
  public static PostType valueOf(@Nonnull String value) {
    String upperCasedValue = value.toUpperCase(Locale.ROOT);
    switch (upperCasedValue) {
      case "SHORT":
        return SHORT;
      case "LONG":
        return LONG;
      default:
        return new PostType(Value.UNKNOWN, upperCasedValue);
    }
  }

  public enum Value {
    LONG,

    SHORT,

    UNKNOWN
  }

  public interface Visitor<T> {
    T visitLONG();

    T visitSHORT();

    T visitUnknown(String unknownType);
  }
}

]